;; Object semanticdb-project-database-file-4a90b57a
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4a90b57a"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4f74258c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("when" code nil nil [1471 1693])
            ("unless" code nil nil [1251 1305])
            ("dash" customgroup (:user-visible-flag t) nil [1696 1821])
            ("!cons" function (:arguments ("car" "cdr")) nil [1823 1969])
            ("!cdr" function (:arguments ("list")) nil [1971 2097])
            ("--each" function (:arguments ("list" "body")) nil [2099 2639])
            ("-each" function (:arguments ("list" "fn")) nil [2641 2919])
            ("defalias" code nil nil [2921 2955])
            ("-each-indexed" function (:arguments ("list" "fn")) nil [2957 3244])
            ("--each-while" function (:arguments ("list" "pred" "body")) nil [3246 4173])
            ("-each-while" function (:arguments ("list" "pred" "fn")) nil [4175 4531])
            ("--each-r" function (:arguments ("list" "body")) nil [4533 5507])
            ("-each-r" function (:arguments ("list" "fn")) nil [5509 5721])
            ("--each-r-while" function (:arguments ("list" "pred" "body")) nil [5723 6634])
            ("-each-r-while" function (:arguments ("list" "pred" "fn")) nil [6636 6984])
            ("--dotimes" function (:arguments ("num" "body")) nil [6986 7565])
            ("-dotimes" function (:arguments ("num" "fn")) nil [7567 7902])
            ("-map" function (:arguments ("fn" "list")) nil [7904 8101])
            ("--map" function (:arguments ("form" "list")) nil [8103 8400])
            ("--reduce-from" function (:arguments ("form" "init" "list")) nil [8402 9100])
            ("-reduce-from" function (:arguments ("fn" "init" "list")) nil [9102 9581])
            ("--reduce" function (:arguments ("form" "list")) nil [9583 10371])
            ("-reduce" function (:arguments ("fn" "list")) nil [10373 10927])
            ("--reduce-r-from" function (:arguments ("form" "init" "list")) nil [10929 11276])
            ("-reduce-r-from" function (:arguments ("fn" "init" "list")) nil [11278 12230])
            ("--reduce-r" function (:arguments ("form" "list")) nil [12232 12525])
            ("-reduce-r" function (:arguments ("fn" "list")) nil [12527 13542])
            ("--reductions-from" function (:arguments ("form" "init" "list")) nil [13544 14023])
            ("-reductions-from" function (:arguments ("fn" "init" "list")) nil [14025 14472])
            ("--reductions" function (:arguments ("form" "list")) nil [14474 15168])
            ("-reductions" function (:arguments ("fn" "list")) nil [15170 15649])
            ("--reductions-r-from" function (:arguments ("form" "init" "list")) nil [15651 16134])
            ("-reductions-r-from" function (:arguments ("fn" "init" "list")) nil [16136 16600])
            ("--reductions-r" function (:arguments ("form" "list")) nil [16602 17425])
            ("-reductions-r" function (:arguments ("fn" "list")) nil [17427 17906])
            ("--filter" function (:arguments ("form" "list")) nil [17908 18376])
            ("-filter" function (:arguments ("pred" "list")) nil [18378 18685])
            ("defalias" code nil nil [18687 18715])
            ("defalias" code nil nil [18716 18746])
            ("--remove" function (:arguments ("form" "list")) nil [18748 19122])
            ("-remove" function (:arguments ("pred" "list")) nil [19124 19427])
            ("defalias" code nil nil [19429 19457])
            ("defalias" code nil nil [19458 19488])
            ("--remove-first" function (:arguments ("form" "list")) nil [19490 20271])
            ("-remove-first" function (:arguments ("pred" "list")) nil [20273 20800])
            ("defalias" code nil nil [20849 20890])
            ("defalias" code nil nil [20891 20933])
            ("--remove-last" function (:arguments ("form" "list")) nil [20935 21322])
            ("-remove-last" function (:arguments ("pred" "list")) nil [21324 21720])
            ("defalias" code nil nil [21722 21760])
            ("defalias" code nil nil [21761 21801])
            ("defalias" code nil nil [21803 21954])
            ("--keep" function (:arguments ("form" "list")) nil [21956 22519])
            ("-keep" function (:arguments ("fn" "list")) nil [22521 22838])
            ("-non-nil" function (:arguments ("list")) nil [22840 22971])
            ("--map-indexed" function (:arguments ("form" "list")) nil [22973 23470])
            ("-map-indexed" function (:arguments ("fn" "list")) nil [23472 23900])
            ("--map-when" function (:arguments ("pred" "rep" "list")) nil [23902 24137])
            ("-map-when" function (:arguments ("pred" "rep" "list")) nil [24139 24507])
            ("defalias" code nil nil [24509 24546])
            ("defalias" code nil nil [24547 24586])
            ("-map-first" function (:arguments ("pred" "rep" "list")) nil [24588 25132])
            ("--map-first" function (:arguments ("pred" "rep" "list")) nil [25134 25368])
            ("-map-last" function (:arguments ("pred" "rep" "list")) nil [25370 25726])
            ("--map-last" function (:arguments ("pred" "rep" "list")) nil [25728 25957])
            ("-replace" function (:arguments ("old" "new" "list")) nil [25959 26178])
            ("-replace-first" function (:arguments ("old" "new" "list")) nil [26180 26419])
            ("-replace-last" function (:arguments ("old" "new" "list")) nil [26421 26656])
            ("--mapcat" function (:arguments ("form" "list")) nil [26658 26794])
            ("-mapcat" function (:arguments ("fn" "list")) nil [26796 27001])
            ("--iterate" function (:arguments ("form" "init" "n")) nil [27003 27395])
            ("-iterate" function (:arguments ("fun" "init" "n")) nil [27397 27675])
            ("-flatten" function (:arguments ("l")) nil [27677 28250])
            ("-flatten-n" function (:arguments ("num" "list")) nil [28252 28468])
            ("defalias" code nil nil [28470 28818])
            ("defalias" code nil nil [28820 28900])
            ("--splice" function (:arguments ("pred" "form" "list")) nil [28902 29737])
            ("-splice" function (:arguments ("pred" "fun" "list")) nil [29739 30453])
            ("-splice-list" function (:arguments ("pred" "new-list" "list")) nil [30455 30678])
            ("--splice-list" function (:arguments ("pred" "new-list" "list")) nil [30680 30870])
            ("-cons*" function (:arguments ("args")) nil [30872 31332])
            ("-snoc" function (:arguments ("list" "elem" "elements")) nil [31334 31601])
            ("--first" function (:arguments ("form" "list")) nil [31603 32090])
            ("-first" function (:arguments ("pred" "list")) nil [32092 32442])
            ("defalias" code nil nil [32444 32470])
            ("defalias" code nil nil [32471 32498])
            ("--some" function (:arguments ("form" "list")) nil [32500 32950])
            ("-some" function (:arguments ("pred" "list")) nil [32952 33199])
            ("defalias" code nil nil [33201 33224])
            ("defalias" code nil nil [33225 33250])
            ("--every" function (:arguments ("form" "list")) nil [33252 33927])
            ("-every" function (:arguments ("pred" "list")) nil [33929 34427])
            ("--last" function (:arguments ("form" "list")) nil [34429 34641])
            ("-last" function (:arguments ("pred" "list")) nil [34643 34808])
            ("defalias" code nil nil [34810 34957])
            ("put" code nil nil [35050 35091])
            ("put" code nil nil [35092 35146])
            ("put" code nil nil [35147 35173])
            ("put" code nil nil [35174 35212])
            ("defalias" code nil nil [35214 35368])
            ("put" code nil nil [35370 35397])
            ("put" code nil nil [35398 35437])
            ("defalias" code nil nil [35439 35662])
            ("put" code nil nil [35664 35690])
            ("put" code nil nil [35691 35729])
            ("defalias" code nil nil [35731 35957])
            ("put" code nil nil [35959 35986])
            ("put" code nil nil [35987 36026])
            ("-fifth-item" function (:arguments ("list")) nil [36028 36233])
            ("-last-item" function (:arguments ("list")) nil [36235 36412])
            ("with-no-warnings" code nil nil [36595 36777])
            ("-butlast" function (:arguments ("list")) nil [36779 36976])
            ("--count" function (:arguments ("pred" "list")) nil [36978 37192])
            ("-count" function (:arguments ("pred" "list")) nil [37194 37363])
            ("---truthy?" function (:arguments ("obj")) nil [37365 37500])
            ("--any?" function (:arguments ("form" "list")) nil [37502 37626])
            ("-any?" function (:arguments ("pred" "list")) nil [37628 37829])
            ("defalias" code nil nil [37831 37856])
            ("defalias" code nil nil [37857 37884])
            ("defalias" code nil nil [37885 37910])
            ("defalias" code nil nil [37911 37938])
            ("defalias" code nil nil [37939 37965])
            ("defalias" code nil nil [37966 37994])
            ("--all?" function (:arguments ("form" "list")) nil [37996 38611])
            ("-all?" function (:arguments ("pred" "list")) nil [38613 39129])
            ("defalias" code nil nil [39131 39157])
            ("defalias" code nil nil [39158 39186])
            ("defalias" code nil nil [39187 39212])
            ("defalias" code nil nil [39213 39240])
            ("defalias" code nil nil [39241 39268])
            ("defalias" code nil nil [39269 39298])
            ("--none?" function (:arguments ("form" "list")) nil [39300 39424])
            ("-none?" function (:arguments ("pred" "list")) nil [39426 39605])
            ("defalias" code nil nil [39607 39634])
            ("defalias" code nil nil [39635 39664])
            ("--only-some?" function (:arguments ("form" "list")) nil [39666 39976])
            ("-only-some?" function (:arguments ("pred" "list")) nil [39978 40359])
            ("defalias" code nil nil [40361 40398])
            ("defalias" code nil nil [40399 40438])
            ("-slice" function (:arguments ("list" "from" "to" "step")) nil [40440 41313])
            ("--take-while" function (:arguments ("form" "list")) nil [41315 41840])
            ("-take-while" function (:arguments ("pred" "list")) nil [41842 42261])
            ("--drop-while" function (:arguments ("form" "list")) nil [42263 42773])
            ("-drop-while" function (:arguments ("pred" "list")) nil [42775 43191])
            ("-take" function (:arguments ("n" "list")) nil [43193 43446])
            ("-take-last" function (:arguments ("n" "list")) nil [43448 43704])
            ("defalias" code nil nil [43706 43939])
            ("-drop-last" function (:arguments ("n" "list")) nil [43941 44199])
            ("-split-at" function (:arguments ("n" "list")) nil [44201 44725])
            ("-rotate" function (:arguments ("n" "list")) nil [44727 45153])
            ("-insert-at" function (:arguments ("n" "x" "list")) nil [45155 45420])
            ("-replace-at" function (:arguments ("n" "x" "list")) nil [45422 45692])
            ("-update-at" function (:arguments ("n" "func" "list")) nil [45694 46100])
            ("--update-at" function (:arguments ("n" "form" "list")) nil [46102 46275])
            ("-remove-at" function (:arguments ("n" "list")) nil [46277 46746])
            ("-remove-at-indices" function (:arguments ("indices" "list")) nil [46748 47480])
            ("--split-with" function (:arguments ("pred" "list")) nil [47482 47951])
            ("-split-with" function (:arguments ("pred" "list")) nil [47953 48400])
            ("-split-on" function (:arguments ("item" "list")) nil [48402 48735])
            ("--split-when" function (:arguments ("form" "list")) nil [48737 48903])
            ("-split-when" function (:arguments ("fn" "list")) nil [48905 49465])
            ("--separate" function (:arguments ("form" "list")) nil [49467 49754])
            ("-separate" function (:arguments ("pred" "list")) nil [49756 50043])
            ("dash--partition-all-in-steps-reversed" function (:arguments ("n" "step" "list")) nil [50045 50408])
            ("-partition-all-in-steps" function (:arguments ("n" "step" "list")) nil [50410 50739])
            ("-partition-in-steps" function (:arguments ("n" "step" "list")) nil [50741 51186])
            ("-partition-all" function (:arguments ("n" "list")) nil [51188 51420])
            ("-partition" function (:arguments ("n" "list")) nil [51422 51689])
            ("--partition-by" function (:arguments ("form" "list")) nil [51691 52508])
            ("-partition-by" function (:arguments ("fn" "list")) nil [52510 52702])
            ("--partition-by-header" function (:arguments ("form" "list")) nil [52704 53673])
            ("-partition-by-header" function (:arguments ("fn" "list")) nil [53675 54007])
            ("--partition-after-pred" function (:arguments ("form" "list")) nil [54009 54624])
            ("-partition-after-pred" function (:arguments ("pred" "list")) nil [54626 54894])
            ("-partition-before-pred" function (:arguments ("pred" "list")) nil [54896 55145])
            ("-partition-after-item" function (:arguments ("item" "list")) nil [55147 55379])
            ("-partition-before-item" function (:arguments ("item" "list")) nil [55381 55617])
            ("--group-by" function (:arguments ("form" "list")) nil [55619 56169])
            ("-group-by" function (:arguments ("fn" "list")) nil [56171 56387])
            ("-interpose" function (:arguments ("sep" "list")) nil [56389 56711])
            ("-interleave" function (:arguments ("lists")) nil [56713 57033])
            ("--zip-with" function (:arguments ("form" "list1" "list2")) nil [57035 57785])
            ("-zip-with" function (:arguments ("fn" "list1" "list2")) nil [57787 58286])
            ("-zip-lists" function (:arguments ("lists")) nil [58288 58982])
            ("-zip-lists-fill" function (:arguments ("fill-value" "lists")) nil [58984 59611])
            ("-unzip-lists" function (:arguments ("lists")) nil [59613 59971])
            ("defalias" code nil nil [59973 60355])
            ("dash--zip-lists-or-pair" function (:arguments ("_form" "lists")) nil [60357 60916])
            ("-zip" function (:arguments ("lists")) nil [60918 61843])
            ("-zip-pair" function (:arguments ("lists")) nil [61845 62354])
            ("-zip-fill" function (:arguments ("fill-value" "lists")) nil [62356 63385])
            ("-unzip" function (:arguments ("lists")) nil [63387 64035])
            ("-cycle" function (:arguments ("list")) nil [64037 64347])
            ("-pad" function (:arguments ("fill-value" "lists")) nil [64349 64795])
            ("--annotate" function (:arguments ("form" "list")) nil [64797 65177])
            ("-annotate" function (:arguments ("fn" "list")) nil [65179 65548])
            ("dash--table-carry" function (:arguments ("lists" "restore-lists" "re")) nil [65550 65985])
            ("-table" function (:arguments ("fn" "lists")) nil [65987 66766])
            ("-table-flat" function (:arguments ("fn" "lists")) nil [66768 67685])
            ("--find-index" function (:arguments ("form" "list")) nil [67687 68061])
            ("-find-index" function (:arguments ("pred" "list")) nil [68063 68498])
            ("-elem-index" function (:arguments ("elem" "list")) nil [68500 68799])
            ("--find-indices" function (:arguments ("form" "list")) nil [68801 69145])
            ("-find-indices" function (:arguments ("pred" "list")) nil [69147 69651])
            ("-elem-indices" function (:arguments ("elem" "list")) nil [69653 69944])
            ("--find-last-index" function (:arguments ("form" "list")) nil [69946 70415])
            ("-find-last-index" function (:arguments ("pred" "list")) nil [70417 70823])
            ("-select-by-indices" function (:arguments ("indices" "list")) nil [70825 71095])
            ("-select-columns" function (:arguments ("columns" "table")) nil [71097 71492])
            ("-select-column" function (:arguments ("column" "table")) nil [71494 71871])
            ("->" function (:arguments ("x" "form" "more")) nil [71873 72387])
            ("->>" function (:arguments ("x" "form" "more")) nil [72389 72842])
            ("-->" function (:arguments ("x" "forms")) nil [72844 73183])
            ("-as->" function (:arguments ("value" "variable" "forms")) nil [73185 73689])
            ("-some->" function (:arguments ("x" "form" "more")) nil [73691 74076])
            ("-some->>" function (:arguments ("x" "form" "more")) nil [74078 74468])
            ("-some-->" function (:arguments ("expr" "forms")) nil [74470 74973])
            ("-doto" function (:arguments ("init" "forms")) nil [74975 75455])
            ("--doto" function (:arguments ("init" "forms")) nil [75457 75758])
            ("-grade-up" function (:arguments ("comparator" "list")) nil [75760 76141])
            ("-grade-down" function (:arguments ("comparator" "list")) nil [76143 76527])
            ("dash--source-counter" variable nil nil [76529 76605])
            ("dash--match-make-source-symbol" function nil nil [76607 76871])
            ("dash--match-ignore-place-p" function (:arguments ("symbol")) nil [76873 77046])
            ("dash--match-cons-skip-cdr" function (:arguments ("skip-cdr" "source")) nil [77048 77338])
            ("dash--match-cons-get-car" function (:arguments ("skip-cdr" "source")) nil [77340 77576])
            ("dash--match-cons-get-cdr" function (:arguments ("skip-cdr" "source")) nil [77578 77808])
            ("dash--match-cons" function (:arguments ("match-form" "source")) nil [77810 78756])
            ("dash--get-expand-function" function (:arguments ("type")) nil [78758 78884])
            ("dash--match-cons-1" function (:arguments ("match-form" "source" "props")) nil [78886 80354])
            ("dash--match-vector" function (:arguments ("match-form" "source")) nil [80356 81293])
            ("dash--match-vector-1" function (:arguments ("match-form" "source")) nil [81295 82755])
            ("dash--match-kv-normalize-match-form" function (:arguments ("pattern")) nil [82757 84579])
            ("dash--match-kv" function (:arguments ("match-form" "source")) nil [84581 85228])
            ("dash-expand:&hash" function (:arguments ("key" "source")) nil [85230 85359])
            ("dash-expand:&plist" function (:arguments ("key" "source")) nil [85361 85494])
            ("dash-expand:&alist" function (:arguments ("key" "source")) nil [85496 85631])
            ("dash-expand:&hash?" function (:arguments ("key" "source")) nil [85633 85896])
            ("defalias" code nil nil [85898 85947])
            ("dash--match-kv-1" function (:arguments ("match-form" "source" "type")) nil [85949 86933])
            ("dash--match-symbol" function (:arguments ("match-form" "source")) nil [86935 87090])
            ("dash--match" function (:arguments ("match-form" "source")) nil [87092 88486])
            ("dash--normalize-let-varlist" function (:arguments ("varlist")) nil [88488 88937])
            ("-let*" function (:arguments ("varlist" "body")) nil [88939 89677])
            ("-let" function (:arguments ("varlist" "body")) nil [89679 96007])
            ("-lambda" function (:arguments ("match-form" "body")) nil [96009 97328])
            ("-setq" function (:arguments ("forms")) nil [97330 99554])
            ("-if-let*" function (:arguments ("vars-vals" "then" "else")) nil [99556 100202])
            ("-if-let" function (:arguments ("var-val" "then" "else")) nil [100204 100509])
            ("--if-let" function (:arguments ("val" "then" "else")) nil [100511 100735])
            ("-when-let*" function (:arguments ("vars-vals" "body")) nil [100737 101167])
            ("-when-let" function (:arguments ("var-val" "body")) nil [101169 101446])
            ("--when-let" function (:arguments ("val" "body")) nil [101448 101648])
            ("-compare-fn" variable nil nil [101731 102029])
            ("dash--member-fn" function nil nil [102031 102453])
            ("dash--assoc-fn" function nil nil [102455 103218])
            ("dash--hash-test-fn" function nil nil [103220 103672])
            ("dash--short-list-length" variable (:default-value 32) nil [103674 103959])
            ("-distinct" function (:arguments ("list")) nil [103961 104775])
            ("defalias" code nil nil [104777 104806])
            ("dash--size+" function (:arguments ("size1" "size2")) nil [104808 105194])
            ("-union" function (:arguments ("list1" "list2")) nil [105196 106225])
            ("-intersection" function (:arguments ("list1" "list2")) nil [106227 107299])
            ("-difference" function (:arguments ("list1" "list2")) nil [107301 108626])
            ("-powerset" function (:arguments ("list")) nil [108628 108878])
            ("-frequencies" function (:arguments ("list")) nil [108880 110181])
            ("dash--numbers<=" function (:arguments ("nums")) nil [110183 110471])
            ("dash--next-lex-perm" function (:arguments ("array" "n")) nil [110473 111642])
            ("dash--lex-perms" function (:arguments ("vec" "original")) nil [111644 112394])
            ("dash--uniq-perms" function (:arguments ("list")) nil [112396 112747])
            ("dash--multi-perms" function (:arguments ("list" "freqs")) nil [112749 113475])
            ("-permutations" function (:arguments ("list")) nil [113477 114143])
            ("-inits" function (:arguments ("list")) nil [114145 114364])
            ("-tails" function (:arguments ("list")) nil [114366 114501])
            ("-common-prefix" function (:arguments ("lists")) nil [114503 114708])
            ("-common-suffix" function (:arguments ("lists")) nil [114710 114898])
            ("-contains?" function (:arguments ("list" "element")) nil [114900 115257])
            ("defalias" code nil nil [115259 115295])
            ("-same-items?" function (:arguments ("list1" "list2")) nil [115297 116954])
            ("defalias" code nil nil [116956 116996])
            ("-is-prefix?" function (:arguments ("prefix" "list")) nil [116998 117255])
            ("-is-suffix?" function (:arguments ("suffix" "list")) nil [117257 117451])
            ("-is-infix?" function (:arguments ("infix" "list")) nil [117453 117749])
            ("defalias" code nil nil [117751 117788])
            ("defalias" code nil nil [117789 117826])
            ("defalias" code nil nil [117827 117862])
            ("-sort" function (:arguments ("comparator" "list")) nil [117864 118224])
            ("--sort" function (:arguments ("form" "list")) nil [118226 118383])
            ("-list" function (:arguments ("arg" "args")) nil [118385 118943])
            ("-repeat" function (:arguments ("n" "x")) nil [118945 119125])
            ("-sum" function (:arguments ("list")) nil [119127 119235])
            ("-running-sum" function (:arguments ("list")) nil [119237 119471])
            ("-product" function (:arguments ("list")) nil [119473 119589])
            ("-running-product" function (:arguments ("list")) nil [119591 119833])
            ("-max" function (:arguments ("list")) nil [119835 119979])
            ("-min" function (:arguments ("list")) nil [119981 120126])
            ("-max-by" function (:arguments ("comparator" "list")) nil [120128 120464])
            ("-min-by" function (:arguments ("comparator" "list")) nil [120466 120799])
            ("--max-by" function (:arguments ("form" "list")) nil [120801 121039])
            ("--min-by" function (:arguments ("form" "list")) nil [121041 121279])
            ("-iota" function (:arguments ("count" "start" "step")) nil [121281 121805])
            ("-fix" function (:arguments ("fn" "list")) nil [121807 122123])
            ("--fix" function (:arguments ("form" "list")) nil [122125 122267])
            ("-unfold" function (:arguments ("fun" "seed")) nil [122269 122825])
            ("--unfold" function (:arguments ("form" "seed")) nil [122827 122981])
            ("-cons-pair?" function (:arguments ("obj")) nil [122983 123203])
            ("defalias" code nil nil [123205 123242])
            ("-cons-to-list" function (:arguments ("con")) nil [123244 123423])
            ("-value-to-list" function (:arguments ("val")) nil [123425 123736])
            ("-tree-mapreduce-from" function (:arguments ("fn" "folder" "init-value" "tree")) nil [123738 124461])
            ("--tree-mapreduce-from" function (:arguments ("form" "folder" "init-value" "tree")) nil [124463 124814])
            ("-tree-mapreduce" function (:arguments ("fn" "folder" "tree")) nil [124816 125476])
            ("--tree-mapreduce" function (:arguments ("form" "folder" "tree")) nil [125478 125751])
            ("-tree-map" function (:arguments ("fn" "tree")) nil [125753 126053])
            ("--tree-map" function (:arguments ("form" "tree")) nil [126055 126212])
            ("-tree-reduce-from" function (:arguments ("fn" "init-value" "tree")) nil [126214 126817])
            ("--tree-reduce-from" function (:arguments ("form" "init-value" "tree")) nil [126819 127058])
            ("-tree-reduce" function (:arguments ("fn" "tree")) nil [127060 127602])
            ("--tree-reduce" function (:arguments ("form" "tree")) nil [127604 127778])
            ("-tree-map-nodes" function (:arguments ("pred" "fun" "tree")) nil [127780 128185])
            ("--tree-map-nodes" function (:arguments ("pred" "form" "tree")) nil [128187 128448])
            ("-tree-seq" function (:arguments ("branch" "children" "tree")) nil [128450 129030])
            ("--tree-seq" function (:arguments ("branch" "children" "tree")) nil [129032 129275])
            ("-clone" function (:arguments ("list")) nil [129277 129558])
            ("defalias" code nil nil [129578 129616])
            ("-rpartial" function (:arguments ("fn" "args")) nil [129618 130145])
            ("-juxt" function (:arguments ("fns")) nil [130147 130469])
            ("-compose" function (:arguments ("fns")) nil [130471 131146])
            ("-applify" function (:arguments ("fn")) nil [131148 131433])
            ("-on" function (:arguments ("op" "trans")) nil [131435 132357])
            ("-flip" function (:arguments ("fn")) nil [132359 132919])
            ("-rotate-args" function (:arguments ("n" "fn")) nil [132921 133722])
            ("-const" function (:arguments ("c")) nil [133724 133911])
            ("-cut" function (:arguments ("params")) nil [133913 134527])
            ("-not" function (:arguments ("pred")) nil [134529 134863])
            ("-orfn" function (:arguments ("preds")) nil [134865 135495])
            ("-andfn" function (:arguments ("preds")) nil [135497 136397])
            ("-iteratefn" function (:arguments ("fn" "n")) nil [136399 136918])
            ("-counter" function (:arguments ("beg" "end" "inc")) nil [136920 137523])
            ("-fixfn-max-iterations" variable (:default-value 1000) nil [137525 137657])
            ("-fixfn" function (:arguments ("fn" "equal-test" "halt-test")) nil [137659 139367])
            ("-prodfn" function (:arguments ("fns")) nil [139369 140390])
            ("dash--keywords" variable (:default-value `((,(rx symbol-start (| "acc" "it" "it-index" "other") symbol-end) 0 font-lock-variable-name-face) (,(rx 40 (group (| "defexamples" "def-example-group")) symbol-end (+ (in "	 ")) (group (* (| (syntax word) (syntax symbol) (: 92 nonl))))) (1 font-lock-keyword-face) (2 font-lock-function-name-face)) ,(rx symbol-start (| "=>" "~>" "!!>") symbol-end) ,@(when (< emacs-major-version 25) (let ((macs '("!cdr" "!cons" "-->" "--all-p" "--all?" "--annotate" "--any" "--any-p" "--any?" "--count" "--dotimes" "--doto" "--drop-while" "--each" "--each-indexed" "--each-r" "--each-r-while" "--each-while" "--every" "--every-p" "--every?" "--filter" "--find" "--find-index" "--find-indices" "--find-last-index" "--first" "--fix" "--group-by" "--if-let" "--iterate" "--keep" "--last" "--map" "--map-first" "--map-indexed" "--map-last" "--map-when" "--mapcat" "--max-by" "--min-by" "--none-p" "--none?" "--only-some-p" "--only-some?" "--partition-after-pred" "--partition-by" "--partition-by-header" "--reduce" "--reduce-from" "--reduce-r" "--reduce-r-from" "--reductions" "--reductions-from" "--reductions-r" "--reductions-r-from" "--reject" "--reject-first" "--reject-last" "--remove" "--remove-first" "--remove-last" "--replace-where" "--select" "--separate" "--some" "--some-p" "--some?" "--sort" "--splice" "--splice-list" "--split-when" "--split-with" "--take-while" "--tree-map" "--tree-map-nodes" "--tree-mapreduce" "--tree-mapreduce-from" "--tree-reduce" "--tree-reduce-from" "--tree-seq" "--unfold" "--update-at" "--when-let" "--zip-with" "->" "->>" "-as->" "-cut" "-doto" "-if-let" "-if-let*" "-lambda" "-let" "-let*" "-setq" "-some-->" "-some->" "-some->>" "-split-on" "-when-let" "-when-let*"))) `((,(concat "(" (regexp-opt macs 'symbols)) . 1)))))) nil [140408 144815])
            ("dash-fontify-mode-lighter" variable nil nil [144817 145161])
            ("define-minor-mode" code nil nil [145178 146285])
            ("dash--turn-on-fontify-mode" function nil nil [146287 146451])
            ("define-globalized-minor-mode" code nil nil [146468 146570])
            ("dash-enable-fontlock" variable nil nil [146572 146795])
            ("make-obsolete-variable" code nil nil [146797 146880])
            ("define-obsolete-function-alias" code nil nil [146882 146975])
            ("dash--info-doc-spec" variable (:default-value '("(dash) Index" nil "^ -+ .*: " "\\( \\|$\\)")) nil [146988 147161])
            ("dash--info-elisp-docs" function nil nil [147163 147469])
            ("dash-register-info-lookup" function (:user-visible-flag t) nil [147486 147822])
            ("dash-unload-function" function nil nil [147824 148165])
            ("dash" package nil nil [148167 148182]))          
      :file "dash.el"
      :pointmax 148205
      :fsize 148205
      :lastmodtime '(25869 48058 604528 549000)
      :unmatched-syntax '((close-paren 1693 . 1694) (symbol 1093 . 1110) (open-paren 1092 . 1093))))
  :file "!Users!parkergabel!.emacs.d!straight!repos!dash.el!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
