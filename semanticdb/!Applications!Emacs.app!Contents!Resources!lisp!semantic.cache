;; Object semanticdb-project-database-file-4638ea0a
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4638ea0a"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4b89a446"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1066 2727])
            ("defalias" code nil nil [2756 2778])
            ("defalias" code nil nil [2779 2812])
            ("noreturn" function (:arguments ("form")) nil [2814 3018])
            ("1value" function (:arguments ("form")) nil [3020 3221])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3223 3705])
            ("def-edebug-elem-spec" function (:arguments ("name" "spec")) nil [3707 4146])
            ("lambda" function (:arguments ("cdr")) nil [4149 5336])
            ("prog2" function (:arguments ("form1" "form2" "body")) nil [5338 5623])
            ("setq-default" function (:arguments ("args")) nil [5625 6356])
            ("setq-local" function (:arguments ("pairs")) nil [6358 7567])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [7569 8021])
            ("buffer-local-boundp" function (:arguments ("symbol" "buffer")) nil [8023 8249])
            ("buffer-local-set-state" function (:arguments ("pairs")) nil [8251 8777])
            ("buffer-local-set-state--get" function (:arguments ("pairs")) nil [8779 9162])
            ("buffer-local-restore-state" function (:arguments ("states")) nil [9164 9471])
            ("push" function (:arguments ("newelt" "place")) nil [9473 10067])
            ("pop" function (:arguments ("place")) nil [10069 10926])
            ("when" function (:arguments ("cond" "body")) nil [10928 11196])
            ("unless" function (:arguments ("cond" "body")) nil [11198 11464])
            ("subr-primitive-p" function (:arguments ("object")) nil [11466 11624])
            ("xor" function (:arguments ("cond1" "cond2")) nil [11626 11892])
            ("dolist" function (:arguments ("spec" "body")) nil [11894 12568])
            ("dotimes" function (:arguments ("spec" "body")) nil [12570 13475])
            ("declare" function (:arguments ("specs")) nil [13477 14512])
            ("ignore-errors" function (:arguments ("body")) nil [14514 14821])
            ("ignore-error" function (:arguments ("condition" "body")) nil [14823 15117])
            ("gensym-counter" variable nil nil [15148 15251])
            ("gensym" function (:arguments ("prefix")) nil [15253 15573])
            ("ignore" function (:arguments ("_arguments")) nil [15575 15791])
            ("always" function (:arguments ("_arguments")) nil [15793 15957])
            ("error" function (:arguments ("args")) nil [16014 16751])
            ("user-error" function (:arguments ("format" "args")) nil [16753 17655])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [17657 18570])
            ("frame-configuration-p" function (:arguments ("object")) nil [18684 18939])
            ("apply-partially" function (:arguments ("fun" "args")) nil [18941 19318])
            ("zerop" function (:arguments ("number")) nil [19320 19550])
            ("fixnump" function (:arguments ("object")) nil [19552 19699])
            ("bignump" function (:arguments ("object")) nil [19701 19810])
            ("lsh" function (:arguments ("value" "count")) nil [19812 20611])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [20805 21355])
            ("caar" function (:arguments ("x")) nil [21357 21484])
            ("cadr" function (:arguments ("x")) nil [21486 21613])
            ("cdar" function (:arguments ("x")) nil [21615 21742])
            ("cddr" function (:arguments ("x")) nil [21744 21871])
            ("caaar" function (:arguments ("x")) nil [21873 22024])
            ("caadr" function (:arguments ("x")) nil [22026 22177])
            ("cadar" function (:arguments ("x")) nil [22179 22330])
            ("caddr" function (:arguments ("x")) nil [22332 22483])
            ("cdaar" function (:arguments ("x")) nil [22485 22636])
            ("cdadr" function (:arguments ("x")) nil [22638 22789])
            ("cddar" function (:arguments ("x")) nil [22791 22942])
            ("cdddr" function (:arguments ("x")) nil [22944 23095])
            ("caaaar" function (:arguments ("x")) nil [23097 23268])
            ("caaadr" function (:arguments ("x")) nil [23270 23441])
            ("caadar" function (:arguments ("x")) nil [23443 23614])
            ("caaddr" function (:arguments ("x")) nil [23616 23787])
            ("cadaar" function (:arguments ("x")) nil [23789 23960])
            ("cadadr" function (:arguments ("x")) nil [23962 24133])
            ("caddar" function (:arguments ("x")) nil [24135 24306])
            ("cadddr" function (:arguments ("x")) nil [24308 24479])
            ("cdaaar" function (:arguments ("x")) nil [24481 24652])
            ("cdaadr" function (:arguments ("x")) nil [24654 24825])
            ("cdadar" function (:arguments ("x")) nil [24827 24998])
            ("cdaddr" function (:arguments ("x")) nil [25000 25171])
            ("cddaar" function (:arguments ("x")) nil [25173 25344])
            ("cddadr" function (:arguments ("x")) nil [25346 25517])
            ("cdddar" function (:arguments ("x")) nil [25519 25690])
            ("cddddr" function (:arguments ("x")) nil [25692 25863])
            ("last" function (:arguments ("list" "n")) nil [25865 26315])
            ("butlast" function (:arguments ("list" "n")) nil [26317 26646])
            ("nbutlast" function (:arguments ("list" "n")) nil [26648 26923])
            ("delete-dups" function (:arguments ("list")) nil [26925 27759])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [27826 28284])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [28286 30103])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [30105 30922])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [30962 31763])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [31765 32221])
            ("assoc-delete-all" function (:arguments ("key" "alist" "test")) nil [32223 32807])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [32809 33019])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [33021 33514])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [33516 34677])
            ("remove" function (:arguments ("elt" "seq")) nil [34679 35157])
            ("remq" function (:arguments ("elt" "list")) nil [35159 35523])
            ("kbd" function (:arguments ("keys")) nil [35548 37074])
            ("undefined" function nil nil [37076 37636])
            ("put" code nil nil [37731 37766])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [37768 38335])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [38337 38989])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [38991 41177])
            ("define-prefix-command" function (:arguments ("command" "mapvar" "name")) nil [41179 41904])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [41906 42586])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [42588 43058])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [43112 43712])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [43714 44180])
            ("keymap-canonicalize" function (:arguments ("map")) nil [44182 46597])
            ("put" code nil nil [46599 46656])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [46658 47126])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [47157 48180])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [48182 49082])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [49084 49379])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [49381 49708])
            ("local-key-binding" function (:arguments ("keys" "accept-default")) nil [49710 50281])
            ("global-key-binding" function (:arguments ("keys" "accept-default")) nil [50283 50907])
            ("key-substitution-in-progress" variable nil nil [50964 51057])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [51059 52537])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [52539 54202])
            ("esc-map" variable (:default-value (let ((map (make-keymap))) (define-key map "u" #'upcase-word) (define-key map "l" #'downcase-word) (define-key map "c" #'capitalize-word) (define-key map "x" #'execute-extended-command) (define-key map "X" #'execute-extended-command-for-buffer) map)) nil [54236 54648])
            ("fset" code nil nil [54649 54675])
            ("make-obsolete" code nil nil [54676 54719])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [54721 54799])
            ("defalias" code nil nil [54800 54838])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [54840 54912])
            ("defalias" code nil nil [54913 54951])
            ("tab-prefix-map" variable (:default-value (make-sparse-keymap)) nil [54953 55038])
            ("ctl-x-map" variable (:default-value (let ((map (make-keymap))) (define-key map "4" 'ctl-x-4-prefix) (define-key map "5" 'ctl-x-5-prefix) (define-key map "t" tab-prefix-map) (define-key map "b" #'switch-to-buffer) (define-key map "k" #'kill-buffer) (define-key map "" #'upcase-region) (put 'upcase-region 'disabled t) (define-key map "" #'downcase-region) (put 'downcase-region 'disabled t) (define-key map "<" #'scroll-left) (define-key map ">" #'scroll-right) map)) nil [55040 55656])
            ("fset" code nil nil [55657 55691])
            ("make-obsolete" code nil nil [55692 55743])
            ("global-map" variable (:default-value (let ((map (make-keymap))) (define-key map "" 'ESC-prefix) (define-key map "" 'Control-X-prefix) (define-key map "	" #'self-insert-command) (let* ((vec1 (make-vector 1 nil)) (f (lambda (from to) (while (< from to) (aset vec1 0 from) (define-key map vec1 #'self-insert-command) (setq from (1+ from)))))) (funcall f 32 127) (when (eq system-type 'ms-dos) (funcall f 128 160)) (funcall f 160 256)) (define-key map "" #'beginning-of-line) (define-key map "" #'backward-char) (define-key map "" #'end-of-line) (define-key map "" #'forward-char) (define-key map "" #'suspend-emacs) (define-key map "" #'suspend-emacs) (define-key map "" #'scroll-up-command) (define-key map "\366" #'scroll-down-command) (define-key map "\226" #'scroll-other-window) (define-key map "\203" #'exit-recursive-edit) (define-key map "" #'abort-recursive-edit) map)) nil [55745 57112])
            ("use-global-map" code nil nil [57113 57140])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [57180 57235])
            ("listify-key-sequence" function (:arguments ("key")) nil [57237 57497])
            ("eventp" function (:arguments ("object")) nil [57499 57768])
            ("event-modifiers" function (:arguments ("event")) nil [57770 59129])
            ("event-basic-type" function (:arguments ("event")) nil [59131 59947])
            ("mouse-movement-p" function (:arguments ("object")) nil [59949 60082])
            ("mouse-event-p" function (:arguments ("object")) nil [60084 60302])
            ("event--posn-at-point" function nil nil [60304 61148])
            ("event-start" function (:arguments ("event")) nil [61150 62327])
            ("event-end" function (:arguments ("event")) nil [62329 62605])
            ("event-click-count" function (:arguments ("event")) nil [62607 62817])
            ("event-line-count" function (:arguments ("event")) nil [62819 63018])
            ("posnp" function (:arguments ("obj")) nil [63075 63723])
            ("posn-window" function (:arguments ("position")) nil [63757 64031])
            ("posn-area" function (:arguments ("position")) nil [64033 64357])
            ("posn-point" function (:arguments ("position")) nil [64359 64825])
            ("posn-set-point" function (:arguments ("position")) nil [64827 65403])
            ("posn-x-y" function (:arguments ("position")) nil [65405 65658])
            ("declare-function" code nil nil [65660 65726])
            ("posn-col-row" function (:arguments ("position" "use-window")) nil [65728 67916])
            ("posn-actual-col-row" function (:arguments ("position")) nil [67918 68506])
            ("posn-timestamp" function (:arguments ("position")) nil [68508 68696])
            ("posn-string" function (:arguments ("position")) nil [68698 69057])
            ("posn-image" function (:arguments ("position")) nil [69059 69299])
            ("posn-object" function (:arguments ("position")) nil [69301 69670])
            ("posn-object-x-y" function (:arguments ("position")) nil [69672 70057])
            ("posn-object-width-height" function (:arguments ("position")) nil [70059 70319])
            ("values--store-value" function (:arguments ("value")) nil [70321 70488])
            ("make-obsolete" code nil nil [70531 70627])
            ("make-obsolete" code nil nil [70628 70704])
            ("make-obsolete" code nil nil [71347 71420])
            ("make-obsolete" code nil nil [71421 71496])
            ("make-obsolete" code nil nil [71497 71570])
            ("make-obsolete" code nil nil [71571 71646])
            ("log10" function (:arguments ("x")) nil [71648 71757])
            ("set-advertised-calling-convention" code nil nil [71759 71860])
            ("set-advertised-calling-convention" code nil nil [71861 71929])
            ("set-advertised-calling-convention" code nil nil [71930 72001])
            ("set-advertised-calling-convention" code nil nil [72002 72087])
            ("set-advertised-calling-convention" code nil nil [72088 72187])
            ("set-advertised-calling-convention" code nil nil [72188 72288])
            ("set-advertised-calling-convention" code nil nil [72289 72358])
            ("make-obsolete-variable" code nil nil [72420 72697])
            ("make-obsolete-variable" code nil nil [72698 72755])
            ("make-obsolete-variable" code nil nil [72756 72817])
            ("make-obsolete-variable" code nil nil [72818 72895])
            ("make-obsolete" code nil nil [72897 72961])
            ("make-obsolete-variable" code nil nil [72963 73087])
            ("make-obsolete-variable" code nil nil [73334 73398])
            ("make-obsolete-variable" code nil nil [73400 73458])
            ("defvaralias" code nil nil [73460 73517])
            ("define-obsolete-variable-alias" code nil nil [73518 73616])
            ("make-obsolete-variable" code nil nil [73617 73716])
            ("define-obsolete-function-alias" code nil nil [73718 73821])
            ("max-specpdl-size" variable (:default-value 2500) nil [74005 74363])
            ("make-obsolete-variable" code nil nil [74364 74417])
            ("make-obsolete-variable" code nil nil [74419 74565])
            ("make-obsolete-variable" code nil nil [74567 74709])
            ("defalias" code nil nil [74783 74828])
            ("defalias" code nil nil [74829 74874])
            ("defalias" code nil nil [74875 74909])
            ("defalias" code nil nil [74910 74944])
            ("defalias" code nil nil [74945 74982])
            ("defalias" code nil nil [74983 75019])
            ("defalias" code nil nil [75020 75047])
            ("defalias" code nil nil [75048 75075])
            ("defalias" code nil nil [75076 75099])
            ("defalias" code nil nil [75125 75165])
            ("defalias" code nil nil [75166 75221])
            ("defalias" code nil nil [75222 75292])
            ("defalias" code nil nil [75293 75365])
            ("defalias" code nil nil [75366 75410])
            ("defalias" code nil nil [75411 75456])
            ("defalias" code nil nil [75457 75491])
            ("defalias" code nil nil [75492 75526])
            ("defalias" code nil nil [75574 75618])
            ("make-obsolete" code nil nil [75619 75703])
            ("defalias" code nil nil [75704 75754])
            ("make-obsolete" code nil nil [75755 75845])
            ("define-obsolete-function-alias" code nil nil [75846 75929])
            ("make-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76142 76195])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76196 76251])
            ("add-hook" function (:arguments ("hook" "function" "depth" "local")) nil [76290 80506])
            ("remove-hook" function
               (:user-visible-flag t
                :arguments ("hook" "function" "local"))
                nil [80508 84243])
            ("letrec" function (:arguments ("binders" "body")) nil [84245 86186])
            ("dlet" function (:arguments ("binders" "body")) nil [86188 86775])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [86778 88188])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [88190 90070])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [90072 93506])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [93509 94753])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [94755 96164])
            ("delay-mode-hooks" variable nil nil [96186 96280])
            ("defvar-local" code nil nil [96281 96368])
            ("put" code nil nil [96369 96411])
            ("defvar-local" code nil nil [96413 96562])
            ("change-major-mode-after-body-hook" variable nil nil [96564 96678])
            ("after-change-major-mode-hook" variable nil nil [96680 96782])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [96784 98617])
            ("delay-mode-hooks" function (:arguments ("body")) nil [98619 99018])
            ("internal--build-binding" function (:arguments ("binding" "prev-var")) nil [99049 99546])
            ("internal--build-bindings" function (:arguments ("bindings")) nil [99548 99870])
            ("if-let*" function (:arguments ("varlist" "then" "else")) nil [99872 100364])
            ("when-let*" function (:arguments ("varlist" "body")) nil [100366 100663])
            ("and-let*" function (:arguments ("varlist" "body")) nil [100665 101138])
            ("if-let" function (:arguments ("spec" "then" "else")) nil [101140 102311])
            ("when-let" function (:arguments ("spec" "body")) nil [102313 102684])
            ("while-let" function (:arguments ("spec" "body")) nil [102686 103290])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [103351 103996])
            ("derived-mode-p" function (:arguments ("modes")) nil [103998 104229])
            ("defvar-local" code nil nil [104231 104271])
            ("put" code nil nil [104272 104319])
            ("major-mode-suspend" function nil nil [104321 104611])
            ("major-mode-restore" function (:arguments ("avoided-modes")) nil [104613 105442])
            ("minor-mode-list" variable (:default-value '(auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode)) nil [105633 105826])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [105828 108550])
            ("autoloadp" function (:arguments ("object")) nil [108572 108674])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [109158 109921])
            ("comp-native-version-dir" variable nil nil [109923 109955])
            ("native-comp-eln-load-path" variable nil nil [109956 109990])
            ("declare-function" code nil nil [109991 110038])
            ("declare-function" code nil nil [110039 110088])
            ("declare-function" code nil nil [110089 110138])
            ("declare-function" code nil nil [110139 110194])
            ("locate-eln-file" function (:arguments ("eln-file")) nil [110196 110738])
            ("symbol-file" function (:arguments ("symbol" "type" "native-p")) nil [110740 113898])
            ("declare-function" code nil nil [113900 113952])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [113954 115163])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [115188 116513])
            ("process-lines-handling-status" function (:arguments ("program" "status-handler" "args")) nil [116515 117402])
            ("process-lines" function (:arguments ("program" "args")) nil [117404 117685])
            ("process-lines-ignore-status" function (:arguments ("program" "args")) nil [117687 117948])
            ("process-live-p" function (:arguments ("process")) nil [117950 118262])
            ("process-kill-buffer-query-function" function nil nil [118264 118683])
            ("add-hook" code nil nil [118685 118761])
            ("process-get" function (:arguments ("process" "propname")) nil [118792 119004])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [119006 119245])
            ("memory-limit" function nil nil [119247 119460])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [119684 119769])
            ("read-key-full-map" variable
               (:constant-flag t
                :default-value (let ((map (make-sparse-keymap))) (define-key map [t] #'ignore) (define-key map [27] nil) map))
                nil [119771 120096])
            ("read-key-delay" variable (:default-value 0.01) nil [120098 120126])
            ("read-key" function (:arguments ("prompt" "disable-fallbacks")) nil [120175 124277])
            ("read--potential-mouse-event" function nil nil [124447 124988])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" #'delete-minibuffer-contents) map)) nil [124990 125327])
            ("read-password--hide-password" function nil nil [125329 125567])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [125569 128025])
            ("read-number-history" variable nil nil [128027 128115])
            ("read-number" function (:arguments ("prompt" "default" "hist")) nil [128117 129358])
            ("read-char-choice-use-read-key" variable nil nil [129360 129880])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [129882 130751])
            ("read-char-choice-with-read-key" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [130753 132740])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [132742 136415])
            ("goto-char--read-natnum-interactive" function (:arguments ("prompt")) nil [136417 136863])
            ("read-char-history" variable nil nil [136867 136967])
            ("read-char-from-minibuffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map [remap self-insert-command] #'read-char-from-minibuffer-insert-char) (define-key map [remap exit-minibuffer] #'read-char-from-minibuffer-insert-other) (define-key map [remap recenter-top-bottom] #'minibuffer-recenter-top-bottom) (define-key map [remap scroll-up-command] #'minibuffer-scroll-up-command) (define-key map [remap scroll-down-command] #'minibuffer-scroll-down-command) (define-key map [remap scroll-other-window] #'minibuffer-scroll-other-window) (define-key map [remap scroll-other-window-down] #'minibuffer-scroll-other-window-down) map)) nil [136969 137752])
            ("read-char-from-minibuffer-map-hash" variable
               (:constant-flag t
                :default-value (make-hash-table :test 'equal))
                nil [137754 137832])
            ("read-char-from-minibuffer-insert-char" function (:user-visible-flag t) nil [137834 138155])
            ("read-char-from-minibuffer-insert-other" function (:user-visible-flag t) nil [138157 138635])
            ("read-char-from-minibuffer" function (:arguments ("prompt" "chars" "history")) nil [138637 141499])
            ("declare-function" code nil nil [141541 141620])
            ("y-or-n-p-history-variable" variable nil nil [141622 141714])
            ("y-or-n-p-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (dolist (symbol '(act act-and-show act-and-exit automatic)) (define-key map (vector 'remap symbol) #'y-or-n-p-insert-y)) (define-key map [remap skip] #'y-or-n-p-insert-n) (dolist (symbol '(backup undo undo-all edit edit-replacement delete-and-edit ignore self-insert-command)) (define-key map (vector 'remap symbol) #'y-or-n-p-insert-other)) (define-key map [remap recenter] #'minibuffer-recenter-top-bottom) (define-key map [remap scroll-up] #'minibuffer-scroll-up-command) (define-key map [remap scroll-down] #'minibuffer-scroll-down-command) (define-key map [remap scroll-other-window] #'minibuffer-scroll-other-window) (define-key map [remap scroll-other-window-down] #'minibuffer-scroll-other-window-down) (define-key map [remap exit] #'y-or-n-p-insert-other) (dolist (symbol '(exit-prefix quit)) (define-key map (vector 'remap symbol) #'abort-recursive-edit)) (define-key map [escape] #'abort-recursive-edit) map)) nil [141716 143021])
            ("y-or-n-p-insert-y" function (:user-visible-flag t) nil [143023 143301])
            ("y-or-n-p-insert-n" function (:user-visible-flag t) nil [143303 143581])
            ("y-or-n-p-insert-other" function (:user-visible-flag t) nil [143583 143965])
            ("y-or-n-p-use-read-key" variable nil nil [143967 144489])
            ("from--tty-menu-p" variable nil nil [144491 144587])
            ("use-dialog-box-p" function nil nil [144588 144996])
            ("y-or-n-p" function (:arguments ("prompt")) nil [144998 150957])
            ("atomic-change-group" function (:arguments ("body")) nil [150988 152237])
            ("with-undo-amalgamate" function (:arguments ("body")) nil [152239 153218])
            ("prepare-change-group" function (:arguments ("buffer")) nil [153220 154696])
            ("activate-change-group" function (:arguments ("handle")) nil [154698 155758])
            ("accept-change-group" function (:arguments ("handle")) nil [155760 156051])
            ("cancel-change-group" function (:arguments ("handle")) nil [156053 157672])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [157708 159260])
            ("copy-overlay" function (:arguments ("o")) nil [159289 159871])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [159873 161272])
            ("suspend-hook" variable nil nil [161294 161378])
            ("suspend-resume-hook" variable nil nil [161380 161478])
            ("after-pdump-load-hook" variable nil nil [161480 161564])
            ("temp-buffer-show-hook" variable nil nil [161566 161782])
            ("temp-buffer-setup-hook" variable nil nil [161784 162015])
            ("user-emacs-directory" variable nil nil [162017 162350])
            ("buffer-narrowed-p" function nil nil [162383 162517])
            ("with-restriction" function (:arguments ("start" "end" "rest")) nil [162519 163293])
            ("internal--with-restriction" function (:arguments ("start" "end" "body" "label")) nil [163295 163568])
            ("without-restriction" function (:arguments ("rest")) nil [163570 164103])
            ("internal--without-restriction" function (:arguments ("body" "label")) nil [164105 164328])
            ("find-tag-default-bounds" function nil nil [164330 164584])
            ("find-tag-default" function nil nil [164586 164852])
            ("find-tag-default-as-regexp" function nil nil [164854 165290])
            ("find-tag-default-as-symbol-regexp" function nil nil [165292 165853])
            ("play-sound" function (:arguments ("sound")) nil [165855 166674])
            ("declare-function" code nil nil [166676 166732])
            ("shell-quote-argument" function (:arguments ("argument" "posix")) nil [166734 169240])
            ("string-to-list" function (:arguments ("string")) nil [169242 169341])
            ("string-to-vector" function (:arguments ("string")) nil [169343 169443])
            ("string-or-null-p" function (:arguments ("object")) nil [169445 169582])
            ("list-of-strings-p" function (:arguments ("object")) nil [169584 169822])
            ("booleanp" function (:arguments ("object")) nil [169824 169982])
            ("special-form-p" function (:arguments ("object")) nil [169984 170227])
            ("plistp" function (:arguments ("object")) nil [170229 170375])
            ("macrop" function (:arguments ("object")) nil [170377 170607])
            ("compiled-function-p" function (:arguments ("object")) nil [170609 170845])
            ("field-at-pos" function (:arguments ("pos")) nil [170847 171117])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [171119 171658])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [171660 172466])
            ("yank-handled-properties" variable nil nil [172573 172605])
            ("yank-excluded-properties" variable nil nil [172606 172639])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [172641 173514])
            ("yank-undo-function" variable nil nil [173516 173543])
            ("insert-for-yank" function (:arguments ("string")) nil [173545 174241])
            ("insert-for-yank-1" function (:arguments ("string")) nil [174243 175415])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [175417 175902])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [175904 176590])
            ("insert-into-buffer" function (:arguments ("buffer" "start" "end")) nil [176592 176945])
            ("replace-string-in-region" function (:arguments ("string" "replacement" "start" "end")) nil [176947 177939])
            ("replace-regexp-in-region" function (:arguments ("regexp" "replacement" "start" "end")) nil [177941 179176])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [179178 179490])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [179619 180057])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "command")) nil [180095 180811])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "command")) nil [180813 181210])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [181212 182854])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [182856 183414])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [183416 184606])
            ("track-mouse" function (:arguments ("body")) nil [184661 184976])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [184978 185366])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [185368 185888])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [185890 186450])
            ("generate-new-buffer" function (:arguments ("name" "inhibit-buffer-hooks")) nil [186452 186774])
            ("with-selected-window" function (:arguments ("window" "body")) nil [186776 187914])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [187916 188657])
            ("save-window-excursion" function (:arguments ("body")) nil [188659 189478])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [189480 190875])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [190928 193484])
            ("with-temp-file" function (:arguments ("file" "body")) nil [193486 194276])
            ("with-temp-message" function (:arguments ("message" "body")) nil [194278 195205])
            ("with-temp-buffer" function (:arguments ("body")) nil [195207 195879])
            ("with-silent-modifications" function (:arguments ("body")) nil [195881 196930])
            ("with-output-to-string" function (:arguments ("body")) nil [196932 197351])
            ("with-local-quit" function (:arguments ("body")) nil [197353 198110])
            ("while-no-input" function (:arguments ("body")) nil [198112 199750])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [199752 200305])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [200307 201371])
            ("combine-after-change-calls" function (:arguments ("body")) nil [201373 202068])
            ("undo--combining-change-calls" variable nil nil [202151 202246])
            ("combine-change-calls-1" function (:arguments ("beg" "end" "body")) nil [202248 205749])
            ("combine-change-calls" function (:arguments ("beg" "end" "body")) nil [205751 206905])
            ("undo--wrap-and-run-primitive-undo" function (:arguments ("beg" "end" "list")) nil [206907 207630])
            ("with-case-table" function (:arguments ("table" "body")) nil [207714 208235])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [208237 208662])
            ("with-existing-directory" function (:arguments ("body")) nil [208664 209433])
            ("save-match-data" function (:arguments ("body")) nil [209466 210312])
            ("match-string" function (:arguments ("num" "string")) nil [210314 211502])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [211504 212261])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [212264 212835])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [212838 214109])
            ("looking-at-p" function (:arguments ("regexp")) nil [214111 214247])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [214249 214427])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [214429 216339])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [216361 216714])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [216976 220091])
            ("defalias" code nil nil [220093 220132])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [220134 220814])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [220816 221453])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [221487 221891])
            ("string-replace" function (:arguments ("from-string" "to-string" "in-string")) nil [221893 222700])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [222702 225406])
            ("string-equal-ignore-case" function (:arguments ("string1" "string2")) nil [225409 225754])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [225756 226193])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [226195 226646])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [226648 227430])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [227432 227667])
            ("load-history-regexp" function (:arguments ("file")) nil [227708 228346])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [228348 228784])
            ("eval-after-load" function (:arguments ("file" "form")) nil [228786 232764])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [232766 233155])
            ("after-load-functions" variable nil nil [233157 233330])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [233332 234984])
            ("display-delayed-warnings" function nil nil [234988 235256])
            ("collapse-delayed-warnings" function nil nil [235258 235937])
            ("delayed-warnings-hook" variable (:default-value '(collapse-delayed-warnings display-delayed-warnings)) nil [236057 236397])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [236399 236654])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [236683 237304])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [237306 237790])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [237814 238450])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [238452 238771])
            ("syntax-after" function (:arguments ("pos")) nil [238773 239146])
            ("syntax-class" function (:arguments ("syntax")) nil [239148 239499])
            ("word-move-empty-char-table" variable nil nil [239530 239700])
            ("forward-word-strictly" function (:arguments ("arg")) nil [239702 240440])
            ("backward-word-strictly" function (:arguments ("arg")) nil [240442 241024])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241042 241625])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241640 242189])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242210 242692])
            ("text-clone--maintaining" variable nil nil [242714 242750])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [242752 244818])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [244820 247068])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [247176 248782])
            ("backtrace-frames" function (:arguments ("base")) nil [248786 249138])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [249140 249940])
            ("called-interactively-p-functions" variable nil nil [249944 250361])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function 'funcall-interactively))
                nil [250363 250448])
            ("called-interactively-p" function (:arguments ("kind")) nil [250450 254641])
            ("interactive-p" function nil nil [254643 255835])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [255837 256182])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [256184 256492])
            ("define-obsolete-function-alias" code nil nil [256494 256582])
            ("set-transient-map-timeout" variable nil nil [256584 256876])
            ("set-transient-map-timer" variable nil nil [256878 256957])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit" "message" "timeout")) nil [256959 261815])
            ("progress-reporter-update" function (:arguments ("reporter" "value" "suffix")) nil [262462 263389])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [263391 265204])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message" "suffix")) nil [265206 265723])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [265725 265842])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value" "suffix")) nil [265844 268015])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [268017 268172])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "reporter-or-message" "body")) nil [268174 269470])
            ("dolist-with-progress-reporter" function (:arguments ("spec" "reporter-or-message" "body")) nil [269472 270716])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [270753 270912])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value '(("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?unknown$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1)))
                nil [270915 272560])
            ("version-to-list" function (:arguments ("ver")) nil [272563 275346])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [275348 276179])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [276182 276981])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [276984 277769])
            ("version-list-not-zero" function (:arguments ("lst")) nil [277771 278081])
            ("version<" function (:arguments ("v1" "v2")) nil [278084 278588])
            ("version<=" function (:arguments ("v1" "v2")) nil [278590 279108])
            ("version=" function (:arguments ("v1" "v2")) nil [279110 279604])
            ("package--builtin-versions" variable (:default-value (purecopy `((emacs \, (version-to-list emacs-version))))) nil [279606 279945])
            ("package--description-file" function (:arguments ("dir")) nil [279947 280336])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [280361 280711])
            ("apropos-internal" function (:arguments ("regexp" "predicate")) nil [280729 281317])
            ("definition-prefixes" variable (:default-value (make-hash-table :test 'equal)) nil [281332 282033])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [282035 282257])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value '("--"))
                nil [282259 282321])
            ("when" code nil nil [282473 282598])
            ("unmsys--file-name" function (:arguments ("file")) nil [282731 283218])
            ("flatten-tree" function (:arguments ("tree")) nil [283220 283790])
            ("defalias" code nil nil [283885 283924])
            ("string-trim-left" function (:arguments ("string" "regexp")) nil [283926 284196])
            ("string-trim-right" function (:arguments ("string" "regexp")) nil [284198 284498])
            ("string-trim" function (:arguments ("string" "trim-left" "trim-right")) nil [284500 284767])
            ("regexp-unmatchable" variable
               (:constant-flag t
                :default-value "\\`a\\`")
                nil [284842 284944])
            ("run-hook-query-error-with-timeout" function (:arguments ("hook")) nil [284946 285559])
            ("internal--fill-string-single-line" function (:arguments ("str")) nil [285561 286457])
            ("internal--format-docstring-line" function (:arguments ("string" "objects")) nil [286459 287003])
            ("json-available-p" function nil nil [287005 287148])
            ("ensure-list" function (:arguments ("object")) nil [287150 287377])
            ("with-delayed-message" function (:arguments ("args" "body")) nil [287379 287853])
            ("function-alias-p" function (:arguments ("func" "noerror")) nil [287855 288627])
            ("readablep" function (:arguments ("object")) nil [288629 289125])
            ("delete-line" function nil nil [289127 289218])
            ("ensure-empty-lines" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [289220 290155])
            ("string-lines" function (:arguments ("string" "omit-nulls" "keep-newlines")) nil [290157 291486])
            ("buffer-match-p" function (:arguments ("condition" "buffer-or-name" "arg")) nil [291488 293924])
            ("match-buffers" function (:arguments ("condition" "buffers" "arg")) nil [293926 294503])
            ("with-memoization" function (:arguments ("place" "code")) nil [294505 294948]))          
      :file "subr.el.gz"
      :pointmax 294972
      :fsize 84278
      :lastmodtime '(25787 50587 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4f10951c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [1252 1269])
            ("cl-lib" include nil nil [1290 1307])
            ("dired-loaddefs" include nil nil [1370 1401])
            ("dnd" include nil nil [1402 1416])
            ("dired" customgroup (:user-visible-flag t) nil [1448 1547])
            ("dired-mark" customgroup (:user-visible-flag t) nil [1549 1638])
            ("dired-guess" customgroup (:user-visible-flag t) nil [1640 1735])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [1752 2602])
            ("dired-subdir-switches" variable nil nil [2604 2875])
            ("dired-maybe-use-globstar" variable nil nil [2877 3343])
            ("dired-enable-globstar-in-shell" variable
               (:constant-flag t
                :default-value '(("ksh" . "set -G") ("bash" . "shopt -s globstar")))
                nil [3345 3652])
            ("dired-chown-program" variable (:default-value (cond ((executable-find "chown") "chown") ((file-executable-p "/usr/sbin/chown") "/usr/sbin/chown") ((file-executable-p "/etc/chown") "/etc/chown") (t "chown"))) nil [3654 3947])
            ("dired-use-ls-dired" variable (:default-value 'unspecified) nil [3949 5192])
            ("dired-chmod-program" variable (:default-value "chmod") nil [5194 5275])
            ("make-obsolete-variable" code nil nil [5276 5332])
            ("dired-touch-program" variable (:default-value "touch") nil [5334 5448])
            ("dired-ls-F-marks-symlinks" variable nil nil [5450 6143])
            ("dired-trivial-filenames" variable (:default-value "\\`\\.\\.?\\'\\|\\`\\.?#") nil [6145 6472])
            ("dired-keep-marker-rename" variable (:default-value t) nil [6474 7075])
            ("dired-keep-marker-copy" variable (:default-value 67) nil [7077 7396])
            ("dired-keep-marker-hardlink" variable (:default-value 72) nil [7398 7713])
            ("dired-keep-marker-symlink" variable (:default-value 89) nil [7715 8033])
            ("dired-keep-marker-relsymlink" variable (:default-value 83) nil [8035 8274])
            ("dired-free-space" variable (:default-value 'first) nil [8276 8797])
            ("dired-dwim-target" variable nil nil [8799 10089])
            ("dired-mouse-drag-files" variable nil nil [10092 11705])
            ("dired-copy-preserve-time" variable (:default-value t) nil [11707 11885])
            ("dired-copy-dereference" variable nil nil [11887 12088])
            ("define-obsolete-variable-alias" code nil nil [12211 12308])
            ("define-obsolete-variable-alias" code nil nil [12309 12400])
            ("dired-load-hook" variable nil nil [12402 12553])
            ("make-obsolete-variable" code nil nil [12554 12664])
            ("dired-mode-hook" variable nil nil [12666 12768])
            ("dired-before-readin-hook" variable nil nil [12770 12917])
            ("dired-after-readin-hook" variable nil nil [12919 13156])
            ("dired-make-directory-clickable" variable (:default-value t) nil [13295 13455])
            ("dired-initial-position-hook" variable nil nil [13457 13645])
            ("dired-dnd-protocol-alist" variable (:default-value '(("^file:///" . dired-dnd-handle-local-file) ("^file://" . dired-dnd-handle-file) ("^file:" . dired-dnd-handle-local-file))) nil [13647 14171])
            ("dired-hide-details-hide-symlink-targets" variable (:default-value t) nil [14173 14350])
            ("dired-hide-details-hide-information-lines" variable (:default-value t) nil [14352 14539])
            ("dired-always-read-filesystem" variable nil nil [14541 15092])
            ("dired-mark-region" variable (:default-value 'file) nil [15094 16514])
            ("dired-kill-when-opening-new-dired-buffer" variable nil nil [16516 16679])
            ("dired-guess-shell-case-fold-search" variable (:default-value t) nil [16681 16903])
            ("dired-guess-shell-alist-user" variable nil nil [16905 18021])
            ("dired-guess-shell-gnutar" variable (:default-value (catch 'found (dolist (exe '("tar" "gtar")) (if (with-temp-buffer (ignore-errors (call-process exe nil t nil "--version")) (and (re-search-backward "GNU tar" nil t) t)) (throw 'found exe))))) nil [18023 18776])
            ("dired-guess-shell-gzip-quiet" variable (:default-value t) nil [18778 18947])
            ("dired-guess-shell-znew-switches" variable nil nil [18949 19195])
            ("dired-marker-char" variable (:default-value 42) nil [19223 19758])
            ("dired-del-marker" variable (:default-value 68) nil [19760 19835])
            ("dired-file-version-alist" variable nil nil [19837 19870])
            ("defvar-local" code nil nil [19887 20196])
            ("dired-safe-switches-p" function (:arguments ("switches")) nil [20243 20520])
            ("dired-actual-switches" variable nil nil [20522 20631])
            ("put" code nil nil [20633 20705])
            ("dired-re-inode-size" variable (:default-value "[0-9 	]*[.,0-9]*[BkKMGTPEZY]?[ 	]*") nil [20707 20849])
            ("dired-re-mark" variable (:default-value "^[^ 
]") nil [21048 21080])
            ("dired-re-maybe-mark" variable (:default-value "^. ") nil [21169 21203])
            ("dired-re-dir" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "d[^:]")) nil [21343 21421])
            ("dired-re-sym" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "l[^:]")) nil [21422 21500])
            ("dired-re-special" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "[bcsp][^:]")) nil [21501 21621])
            ("dired-re-exe" variable (:default-value (mapconcat (lambda (x) (concat dired-re-maybe-mark dired-re-inode-size x)) '("-[-r][-w][xs][-r][-w].[-r][-w]." "-[-r][-w].[-r][-w][xs][-r][-w]." "-[-r][-w].[-r][-w].[-r][-w][xst]") "\\|")) nil [21622 21920])
            ("dired-re-perms" variable (:default-value "[-bcdlps][-r][-w].[-r][-w].[-r][-w].") nil [21921 21983])
            ("dired-re-dot" variable (:default-value "^.* \\.\\.?/?$") nil [21984 22022])
            ("defvar-local" code nil nil [22086 22512])
            ("defvar-local" code nil nil [22514 22673])
            ("defvaralias" code nil nil [22675 22763])
            ("dired-subdir-regexp" variable (:default-value "^. \\(.+\\)\\(:\\)
") nil [22765 23081])
            ("dired-faces" customgroup (:user-visible-flag t) nil [23096 23179])
            ("dired-header" variable
               (:default-value '((t (:inherit font-lock-type-face)))
                :type "face")
                nil [23181 23320])
            ("dired-header-face" variable (:default-value 'dired-header) nil [23321 23403])
            ("dired-mark" variable
               (:default-value '((t (:inherit font-lock-constant-face)))
                :type "face")
                nil [23405 23540])
            ("dired-mark-face" variable (:default-value 'dired-mark) nil [23541 23613])
            ("dired-marked" variable
               (:default-value '((t (:inherit warning)))
                :type "face")
                nil [23615 23737])
            ("dired-marked-face" variable (:default-value 'dired-marked) nil [23738 23815])
            ("dired-flagged" variable
               (:default-value '((t (:inherit error)))
                :type "face")
                nil [23817 23952])
            ("dired-flagged-face" variable (:default-value 'dired-flagged) nil [23953 24046])
            ("dired-warning" variable
               (:default-value '((t (:inherit font-lock-warning-face)))
                :type "face")
                nil [24048 24345])
            ("dired-warning-face" variable (:default-value 'dired-warning) nil [24346 24457])
            ("dired-perm-write" variable
               (:default-value '((((type w32 pc)) :inherit default) (t (:inherit font-lock-comment-delimiter-face)))
                :type "face")
                nil [24459 24855])
            ("dired-perm-write-face" variable (:default-value 'dired-perm-write) nil [24856 24975])
            ("dired-set-id" variable
               (:default-value '((((type w32 pc)) :inherit default) (t (:inherit font-lock-warning-face)))
                :type "face")
                nil [24977 25215])
            ("dired-directory" variable
               (:default-value '((t (:inherit font-lock-function-name-face)))
                :type "face")
                nil [25217 25365])
            ("dired-directory-face" variable (:default-value 'dired-directory) nil [25366 25451])
            ("dired-symlink" variable
               (:default-value '((t (:inherit font-lock-keyword-face)))
                :type "face")
                nil [25453 25593])
            ("dired-symlink-face" variable (:default-value 'dired-symlink) nil [25594 25675])
            ("dired-broken-symlink" variable
               (:default-value '((((class color)) :foreground "yellow1" :background "red1" :weight bold) (t :weight bold :slant italic :underline t))
                :type "face")
                nil [25677 25918])
            ("dired-special" variable
               (:default-value '((t (:inherit font-lock-variable-name-face)))
                :type "face")
                nil [25920 26098])
            ("dired-ignored" variable
               (:default-value '((t (:inherit shadow)))
                :type "face")
                nil [26100 26261])
            ("dired-ignored-face" variable (:default-value 'dired-ignored) nil [26262 26380])
            ("dired-font-lock-keywords" variable (:default-value (list (list dired-re-mark '(0 dired-mark-face)) (list (concat "^[" (char-to-string dired-marker-char) "]") '(".+" (dired-move-to-filename) nil (0 dired-marked-face))) (list (concat "^[" (char-to-string dired-del-marker) "]") '(".+" (dired-move-to-filename) nil (0 dired-flagged-face))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d]....\\(w\\)....") '(1 dired-perm-write-face)) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d].......\\(w\\).") '(1 dired-perm-write-face)) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d]..\\(s\\)......") '(1 'dired-set-id)) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d].....\\([sS]\\)...") '(1 'dired-set-id)) (list dired-re-dir '(".+" (dired-move-to-filename) nil (0 dired-directory-face))) '(eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\|\\.#.+\\)$") '(".+" (dired-move-to-filename) nil (0 dired-ignored-face))) '(eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\|\\.#.+\\)[*=|]$") '(".+" (progn (end-of-line) (unless (get-text-property (1- (point)) 'mouse-face) (dired-move-to-filename))) nil (0 dired-ignored-face))) (list dired-re-sym (list (lambda (end) (let* ((file (dired-file-name-at-point)) (truename (ignore-errors (file-truename file)))) (and (not (and truename (file-exists-p truename))) (search-forward-regexp "\\(.+\\) \\(->\\) ?\\(.+\\)" end t)))) '(dired-move-to-filename) nil '(1 'dired-broken-symlink) '(2 dired-symlink-face) '(3 '(face dired-broken-symlink dired-symlink-filename t)))) (list dired-re-sym (list (lambda (end) (when-let* ((file (dired-file-name-at-point)) (truename (ignore-errors (file-truename file)))) (and (file-directory-p truename) (search-forward-regexp "\\(.+-> ?\\)\\(.+\\)" end t)))) '(dired-move-to-filename) nil '(1 dired-symlink-face) '(2 `(face ,dired-directory-face dired-symlink-filename t)))) (list dired-re-sym (list (lambda (end) (when-let ((file (dired-file-name-at-point))) (let ((truename (ignore-errors (file-truename file)))) (and (or (not truename) (not (file-directory-p truename))) (search-forward-regexp "\\(.+-> ?\\)\\(.+\\)" end t))))) '(dired-move-to-filename) nil '(1 dired-symlink-face) '(2 '(face default dired-symlink-filename t)))) (list dired-re-special '(".+" (dired-move-to-filename) nil (0 'dired-special))) (list (concat dired-re-maybe-mark dired-re-inode-size dired-re-perms ".*:$") '(".+" (dired-move-to-filename) nil (0 'default))) (list dired-subdir-regexp '(1 dired-header-face)))) nil [26399 31899])
            ("dnd-protocol-alist" variable nil nil [31901 31928])
            ("dired-mark-if" function (:arguments ("predicate" "msg")) nil [32016 33877])
            ("dired-map-over-marks" function (:arguments ("body" "arg" "show-progress" "distinguish-one-marked")) nil [33879 36858])
            ("dired-get-marked-files" function (:arguments ("localp" "arg" "filter" "distinguish-one-marked" "error")) nil [36860 38565])
            ("dired-mark--region-use-p" function nil nil [38567 38753])
            ("dired-mark--region-beginning" function nil nil [38755 39014])
            ("dired-mark--region-end" function nil nil [39016 39430])
            ("dired-read-dir-and-switches" function (:arguments ("str")) nil [39457 40228])
            ("dired-file-name-at-point" function nil nil [43017 43481])
            ("dired-grep-read-files" function nil nil [43483 43781])
            ("dired" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [43847 45147])
            ("dired-other-window" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [45228 45492])
            ("dired-other-frame" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [45572 45825])
            ("dired-other-tab" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [45906 46151])
            ("dired-noselect" function (:arguments ("dir-or-list" "switches")) nil [46168 47444])
            ("dired-directory-changed-p" function (:arguments ("dirname")) nil [47651 47943])
            ("auto-revert-remote-files" variable nil nil [47945 47978])
            ("dired-buffer-stale-p" function (:arguments ("noconfirm")) nil [47980 48689])
            ("dired-auto-revert-buffer" variable nil nil [48691 49820])
            ("dired--need-align-p" function nil nil [49822 50584])
            ("dired--align-all-files" function nil nil [50586 51501])
            ("dired-internal-noselect" function (:arguments ("dir-or-list" "switches" "mode")) nil [51503 54873])
            ("dired-buffers" variable nil nil [54875 55122])
            ("dired-find-subdir" variable nil nil [55124 55150])
            ("dired-find-buffer-nocreate" function (:arguments ("dirname" "mode")) nil [55212 57154])
            ("dired-readin" function nil nil [57190 59572])
            ("dired-readin-insert" function nil nil [59606 60570])
            ("dired-align-file" function (:arguments ("beg" "end")) nil [60572 65170])
            ("ls-lisp-use-insert-directory-program" variable nil nil [65173 65218])
            ("dired-check-switches" function (:arguments ("switches" "short" "long")) nil [65220 65530])
            ("dired-switches-escape-p" function (:arguments ("switches")) nil [65532 65761])
            ("dired-switches-recursive-p" function (:arguments ("switches")) nil [65763 65928])
            ("dired-insert-directory" function (:arguments ("dir" "switches" "file-list" "wildcard" "hdr")) nil [65930 72392])
            ("dired--insert-disk-space" function (:arguments ("beg" "file")) nil [72394 73763])
            ("declare-function" code nil nil [73765 73805])
            ("dired-mouse-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [73807 77750])
            ("dired-mouse-drag-files-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [down-mouse-1] #'dired-mouse-drag) (define-key keymap [C-down-mouse-1] #'dired-mouse-drag) (define-key keymap [S-down-mouse-1] #'dired-mouse-drag) (define-key keymap [M-down-mouse-1] #'dired-mouse-drag) keymap)) nil [77752 78314])
            ("dired-insert-set-properties" function (:arguments ("beg" "end")) nil [78316 79905])
            ("dired--make-directory-clickable" function nil nil [79907 81194])
            ("dired-revert" function (:arguments ("_arg" "_noconfirm")) nil [81228 83238])
            ("dired-save-positions" function nil nil [83327 85220])
            ("dired-restore-positions" function (:arguments ("positions")) nil [85222 86617])
            ("dired-remember-marks" function (:arguments ("beg" "end")) nil [86619 87097])
            ("dired-mark-remembered" function (:arguments ("alist")) nil [87099 87472])
            ("dired-remember-hidden" function nil nil [87474 87737])
            ("dired-insert-old-subdirs" function (:arguments ("old-subdir-alist")) nil [87739 88185])
            ("dired-uncache" function (:arguments ("dir")) nil [88187 88384])
            ("defvar-keymap" code nil nil [88427 93812])
            ("put" code nil nil [93814 93868])
            ("easy-menu-define" code nil nil [93870 94972])
            ("easy-menu-define" code nil nil [94974 97130])
            ("easy-menu-define" code nil nil [97132 98710])
            ("easy-menu-define" code nil nil [98712 100168])
            ("easy-menu-define" code nil nil [100170 103461])
            ("dired-context-menu" function (:arguments ("menu" "click")) nil [103463 104199])
            ("put" code nil nil [104280 104318])
            ("grep-read-files-function" variable nil nil [104320 104353])
            ("dired-mode" function (:arguments ("dirname" "switches")) nil [104409 109050])
            ("dired-summary" function (:user-visible-flag t) nil [109115 109423])
            ("dired-undo" function (:user-visible-flag t) nil [109425 109794])
            ("dired-toggle-read-only" function (:user-visible-flag t) nil [109796 110481])
            ("dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [110483 110939])
            ("dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [110941 111145])
            ("dired-next-dirline" function
               (:user-visible-flag t
                :arguments ("arg" "opoint"))
                nil [111147 111550])
            ("dired-prev-dirline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [111552 111680])
            ("dired-up-directory" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [111682 112408])
            ("dired-get-file-for-visit" function (:user-visible-flag t) nil [112410 113098])
            ("define-obsolete-function-alias" code nil nil [113164 113251])
            ("dired-find-file" function (:user-visible-flag t) nil [113252 113425])
            ("dired--find-possibly-alternative-file" function (:arguments ("file")) nil [113427 113834])
            ("dired--find-file" function (:arguments ("find-file-function" "file")) nil [113836 114589])
            ("dired-find-alternate-file" function (:user-visible-flag t) nil [114591 114884])
            ("dired-mouse-find-file" function
               (:user-visible-flag t
                :arguments ("event" "find-file-func" "find-dir-func"))
                nil [114989 116416])
            ("dired-mouse-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [116418 116643])
            ("dired-mouse-find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [116645 116866])
            ("dired-view-file" function (:user-visible-flag t) nil [116868 117275])
            ("dired-find-file-other-window" function (:user-visible-flag t) nil [117277 117467])
            ("dired-display-file" function (:user-visible-flag t) nil [117469 117651])
            ("dired-unhide-subdir" function nil nil [117730 117848])
            ("dired-subdir-hidden-p" function (:arguments ("dir")) nil [117850 117954])
            ("dired-subdir-min" function nil nil [117956 118085])
            ("dired-get-filename" function (:arguments ("localp" "no-error-if-not-filep")) nil [118087 122019])
            ("dired-string-replace-match" function (:arguments ("regexp" "string" "newtext" "literal" "global")) nil [122021 122736])
            ("dired-make-absolute" function (:arguments ("file" "dir")) nil [122738 123166])
            ("dired-make-relative" function (:arguments ("file" "dir")) nil [123168 123718])
            ("define-minor-mode" code nil nil [123748 124431])
            ("dired-hide-details-update-invisibility-spec" function nil nil [124433 125067])
            ("dired--find-hidden-pos" function (:arguments ("start" "end")) nil [125106 125198])
            ("dired--hidden-p" function (:arguments ("pos")) nil [125200 125301])
            ("dired--hide" function (:arguments ("start" "end")) nil [125303 125714])
            ("dired--unhide" function (:arguments ("start" "end")) nil [125716 126194])
            ("dired-permission-flags-regexp" variable (:default-value "\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)") nil [126260 126432])
            ("dired-move-to-filename" function (:arguments ("raise-error" "eol")) nil [126547 127661])
            ("dired-move-to-end-of-filename" function (:arguments ("no-error")) nil [127663 130048])
            ("dired-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [130099 131795])
            ("dired-buffers-for-dir" function (:arguments ("dir" "file")) nil [131874 133024])
            ("dired-buffers-for-dir-or-subdir" function (:arguments ("dir")) nil [133026 133563])
            ("dired-glob-regexp" function (:arguments ("pattern")) nil [133565 134759])
            ("dired-advertise" function nil nil [134761 135201])
            ("dired-unadvertise" function (:arguments ("dir")) nil [135203 135593])
            ("dired-in-this-tree-p" function (:arguments ("file" "dir")) nil [135620 135802])
            ("define-obsolete-function-alias" code nil nil [135804 135887])
            ("dired-normalize-subdir" function (:arguments ("dir")) nil [135889 136208])
            ("dired-get-subdir" function nil nil [136210 136638])
            ("define-obsolete-function-alias" code nil nil [136640 136706])
            ("dired-get-subdir-max" function (:arguments ("elt")) nil [136708 136810])
            ("dired-clear-alist" function nil nil [136812 136976])
            ("dired-subdir-index" function (:arguments ("dir")) nil [136978 137314])
            ("dired-next-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [137316 138106])
            ("dired-build-subdir-alist" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [138108 140905])
            ("dired-alist-add-1" function (:arguments ("dir" "new-marker")) nil [140907 141103])
            ("dired-goto-next-nontrivial-file" function nil nil [141105 141559])
            ("dired-goto-next-file" function nil nil [141561 141720])
            ("dired-goto-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [141722 143656])
            ("dired-goto-file-1" function (:arguments ("file" "full-name" "limit")) nil [143658 145006])
            ("dired-find-subdir" variable nil nil [145008 145034])
            ("dired-initial-position" function (:arguments ("dirname")) nil [145081 145489])
            ("dired-current-directory" function (:arguments ("localp")) nil [145924 146760])
            ("dired-subdir-max" function nil nil [146900 147051])
            ("dired-buffer-more-recently-used-p" function (:arguments ("buffer1" "buffer2")) nil [147081 147403])
            ("dired-recursive-deletes" variable (:default-value 'top) nil [147427 148111])
            ("define-obsolete-variable-alias" code nil nil [148113 148208])
            ("dired-delete-file" function (:arguments ("file" "recursive" "trash")) nil [148405 150457])
            ("dired-do-flagged-delete" function
               (:user-visible-flag t
                :arguments ("nomessage"))
                nil [150459 151406])
            ("dired-do-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [151408 152107])
            ("dired-deletion-confirmer" variable (:default-value 'yes-or-no-p) nil [152109 152155])
            ("dired-internal-do-deletions" function (:arguments ("l" "arg" "trash")) nil [152172 154407])
            ("dired-fun-in-all-buffers" function (:arguments ("directory" "file" "fun" "args")) nil [154409 155028])
            ("dired-remove-entry" function (:arguments ("file")) nil [155064 155418])
            ("dired-delete-entry" function (:arguments ("file")) nil [155420 155739])
            ("dired-clean-up-buffers-too" variable (:default-value t) nil [155741 155896])
            ("dired-clean-confirm-killing-deleted-buffers" variable (:default-value t) nil [155898 156076])
            ("dired-clean-up-after-deletion" function (:arguments ("fn")) nil [156078 157884])
            ("dired-marker-regexp" function nil nil [157906 158001])
            ("dired-plural-s" function (:arguments ("count")) nil [158003 158059])
            ("dired-mark-prompt" function (:arguments ("arg" "files")) nil [158061 158852])
            ("dired-no-confirm" variable nil nil [158854 159933])
            ("dired-mark-pop-up" function (:arguments ("buffer-or-name" "op-symbol" "files" "function" "args")) nil [159935 162227])
            ("dired-format-columns-of-files" function (:arguments ("files")) nil [162229 162389])
            ("dired-repeat-over-lines" function (:arguments ("arg" "function")) nil [162455 163328])
            ("dired-between-files" function nil nil [163330 163592])
            ("dired-next-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap" "opoint"))
                nil [163594 164577])
            ("dired-prev-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap"))
                nil [164579 164961])
            ("dired-file-marker" function (:arguments ("file")) nil [164963 165197])
            ("dired-mark-files-in-region" function (:arguments ("start" "end")) nil [165199 165733])
            ("dired-mark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [165735 167319])
            ("dired-unmark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [167321 167807])
            ("dired-flag-file-deletion" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [167809 168322])
            ("dired-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168324 168642])
            ("dired-toggle-marks" function (:user-visible-flag t) nil [168644 169802])
            ("dired-regexp-history" variable nil nil [169882 169979])
            ("dired-read-regexp" function (:arguments ("prompt" "default" "history")) nil [169981 170188])
            ("dired-mark-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [170190 171609])
            ("dired-number-of-marked-files" function (:user-visible-flag t) nil [171611 172449])
            ("dired-mark-files-containing-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [172451 174074])
            ("dired-flag-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [174076 174535])
            ("dired-mark-symlinks" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [174537 174930])
            ("dired-mark-directories" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [174932 175403])
            ("dired-mark-executables" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [175405 175805])
            ("dired-flag-auto-save-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [175916 177218])
            ("dired-garbage-files-regexp" variable (:default-value (concat (regexp-opt '(".log" ".toc" ".dvi" ".bak" ".orig" ".rej" ".aux")) "\\'")) nil [177220 177570])
            ("dired-flag-garbage-files" function (:user-visible-flag t) nil [177572 177751])
            ("dired-flag-backup-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [177753 178805])
            ("dired-change-marks" function (:arguments ("old" "new")) nil [178807 179778])
            ("dired-unmark-all-marks" function (:user-visible-flag t) nil [179780 179917])
            ("dired-unmark-all-files-query" variable nil nil [179954 179991])
            ("dired-unmark-all-files" function
               (:user-visible-flag t
                :arguments ("mark" "arg"))
                nil [179993 181197])
            ("dired-log-buffer" variable (:default-value "*Dired log*") nil [181267 181306])
            ("dired-why" function (:user-visible-flag t) nil [181308 181861])
            ("dired-log" function (:arguments ("log" "args")) nil [181863 182797])
            ("dired-log-summary" function (:arguments ("string" "failures")) nil [182799 183505])
            ("dired-ls-sorting-switches" variable (:default-value "SXU") nil [183731 184169])
            ("dired-sort-by-date-regexp" variable (:default-value (concat "\\(\\`\\| \\)-[^- ]*t" "[^ " dired-ls-sorting-switches "]*" "\\(\\(\\`\\| +\\)\\(--[^ ]+\\|-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [184171 184477])
            ("dired-sort-by-name-regexp" variable (:default-value (concat "\\`\\(\\(\\`\\| +\\)\\(--[^ ]+\\|" "-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [184479 184667])
            ("dired-sort-inhibit" variable nil nil [184669 184819])
            ("dired-switches-in-mode-line" variable nil nil [184821 185533])
            ("dired-sort-set-mode-line" function nil nil [185535 187050])
            ("dired-sort-toggle-or-edit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [187052 187455])
            ("dired-sort-toggle" function nil nil [187457 188843])
            ("dired-replace-in-string" function (:arguments ("regexp" "newtext" "string")) nil [188845 189367])
            ("dired-sort-other" function (:arguments ("switches" "no-revert")) nil [189369 189837])
            ("defvar-local" code nil nil [189839 189940])
            ("dired-sort-R-check" function (:arguments ("switches")) nil [189942 191185])
            ("dired-recursive-copies" variable (:default-value 'top) nil [191216 191743])
            ("dired-dnd-popup-notice" function nil nil [191745 191890])
            ("declare-function" code nil nil [191892 191948])
            ("dired-dnd-do-ask-action" function (:arguments ("uri")) nil [191950 192376])
            ("declare-function" code nil nil [192378 192434])
            ("declare-function" code nil nil [192435 192483])
            ("declare-function" code nil nil [192520 192595])
            ("declare-function" code nil nil [192596 192649])
            ("dired-overwrite-confirmed" variable nil nil [192651 192685])
            ("dired-dnd-handle-local-file" function (:arguments ("uri" "action")) nil [192715 194546])
            ("dired-dnd-handle-file" function (:arguments ("uri" "action")) nil [194548 194992])
            ("desktop" include nil nil [195036 195054])
            ("declare-function" code nil nil [195056 195121])
            ("dired-desktop-buffer-misc-data" function (:arguments ("dirname")) nil [195123 195721])
            ("dired-restore-desktop-buffer" function (:arguments ("_file-name" "_buffer-name" "misc-data")) nil [195723 196690])
            ("add-to-list" code nil nil [196692 196786])
            ("archive-superior-buffer" variable nil nil [196809 196841])
            ("tar-superior-buffer" variable nil nil [196842 196870])
            ("declare-function" code nil nil [196871 196931])
            ("dired-jump" function
               (:user-visible-flag t
                :arguments ("other-window" "file-name"))
                nil [196948 199267])
            ("dired-jump-other-window" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [199284 199522])
            ("defvar-keymap" code nil nil [199524 199672])
            ("declare-function" code nil nil [199704 199762])
            ("manual-program" variable nil nil [199763 199786])
            ("dired-do-man" function (:user-visible-flag t) nil [199802 200184])
            ("dired-do-info" function (:user-visible-flag t) nil [200186 200316])
            ("dired-do-eww" function (:user-visible-flag t) nil [200318 200450])
            ("dired" package nil nil [200452 200468])
            ("run-hooks" code nil nil [200470 200498]))          
      :file "dired.el.gz"
      :pointmax 200550
      :fsize 55212
      :lastmodtime '(25769 11936 0 0)
      :unmatched-syntax '((close-paren 195054 . 195055) (symbol 195018 . 195035) (open-paren 195017 . 195018) (close-paren 1307 . 1308) (symbol 1272 . 1289) (open-paren 1271 . 1272) (close-paren 1269 . 1270) (symbol 1234 . 1251) (open-paren 1233 . 1234)))
    (semanticdb-table "semanticdb-table-bc1c181a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1282 1299])
            ("dired" include nil nil [1300 1316])
            ("dired-create-files-failures" variable nil nil [1318 1557])
            ("dired-star-subst-regexp" variable
               (:constant-flag t
                :default-value "\\(^\\|[ 	]\\)\\*\\([ 	]\\|$\\)")
                nil [1590 1660])
            ("dired-quark-subst-regexp" variable
               (:constant-flag t
                :default-value "\\(^\\|[ 	]\\)\\?\\([ 	]\\|$\\)")
                nil [1661 1732])
            ("make-obsolete-variable" code nil nil [1733 1793])
            ("make-obsolete-variable" code nil nil [1794 1855])
            ("dired-isolated-string-re" function (:arguments ("string")) nil [1857 2246])
            ("dired--star-or-qmark-p" function (:arguments ("string" "match" "keep" "start")) nil [2248 3158])
            ("dired--need-confirm-positions" function (:arguments ("command" "string")) nil [3160 4201])
            ("dired--mark-positions" function (:arguments ("positions")) nil [4203 4423])
            ("dired--highlight-no-subst-chars" function (:arguments ("positions" "command" "mark")) nil [4425 4710])
            ("dired--no-subst-explain" function (:arguments ("buf" "char-positions" "command" "mark-positions")) nil [4712 5542])
            ("dired--no-subst-ask" function (:arguments ("char" "nb-occur" "details")) nil [5544 6009])
            ("dired--no-subst-confirm" function (:arguments ("char-positions" "command")) nil [6011 7125])
            ("dired-diff" function
               (:user-visible-flag t
                :arguments ("file" "switches"))
                nil [7142 11561])
            ("dired-backup-diff" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [11578 12174])
            ("dired-compare-directories" function
               (:user-visible-flag t
                :arguments ("dir2" "predicate"))
                nil [12191 15484])
            ("dired-file-set-difference" function (:arguments ("list1" "list2" "predicate")) nil [15486 17124])
            ("dired-files-attributes" function (:arguments ("dir")) nil [17126 17508])
            ("dired-do-chxxx" function (:arguments ("attribute-name" "program" "op-symbol" "arg")) nil [17540 20202])
            ("dired-do-chmod" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20219 22012])
            ("dired-do-chgrp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22029 22481])
            ("dired-do-chown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22498 22962])
            ("dired-do-touch" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22979 23319])
            ("dired-bunch-files" function (:arguments ("max" "function" "args" "files")) nil [23574 24940])
            ("lpr-printer-switch" variable nil nil [24942 24969])
            ("dired-do-print" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [24986 25762])
            ("dired-mark-read-string" function (:arguments ("prompt" "initial" "op-symbol" "arg" "files" "default-value" "collection")) nil [25764 26679])
            ("dired-file-version-alist" variable nil nil [26745 26778])
            ("dired-clean-directory" function
               (:user-visible-flag t
                :arguments ("keep"))
                nil [26795 28537])
            ("dired-map-dired-file-lines" function (:arguments ("fun")) nil [28583 29074])
            ("backup-extract-version-start" variable nil nil [29076 29113])
            ("dired-collect-file-versions" function (:arguments ("fn")) nil [29149 29970])
            ("dired-trample-file-versions" function (:arguments ("fn")) nil [29972 30475])
            ("declare-function" code nil nil [30499 30565])
            ("dired-aux-files" variable nil nil [30567 30591])
            ("dired-minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [30593 31131])
            ("dired-read-shell-command" function (:arguments ("prompt" "arg" "files")) nil [31212 31986])
            ("dired-confirm-shell-command" variable (:default-value t) nil [32003 32298])
            ("dired-do-async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "arg" "file-list"))
                nil [32315 33559])
            ("dired-do-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "arg" "file-list"))
                nil [33576 37862])
            ("dired-mark-prefix" variable nil nil [37898 37982])
            ("dired-mark-postfix" variable nil nil [37983 38067])
            ("dired-mark-separator" variable (:default-value " ") nil [38068 38153])
            ("dired-shell-stuff-it" function (:arguments ("command" "file-list" "on-each" "_raw-arg")) nil [38155 41799])
            ("dired-run-shell-command" function (:arguments ("command")) nil [41886 42189])
            ("dired-check-process" function (:arguments ("msg" "program" "arguments")) nil [42193 43370])
            ("dired-shell-command" function (:arguments ("cmd")) nil [43372 44094])
            ("dired-shell-command-history" variable nil nil [45002 45104])
            ("Man-support-local-filenames" function (:prototype-flag t) nil [45253 45298])
            ("vc-responsible-backend" function (:prototype-flag t) nil [45299 45338])
            ("dired-guess-shell-alist-default" variable (:default-value (list (list "\\.tar\\'" '(if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " xvf") "tar xvf") '(if dired-guess-shell-gnutar (concat "mkdir " (file-name-sans-extension file) "; " dired-guess-shell-gnutar " -C " (file-name-sans-extension file) " -xvf") (concat "mkdir " (file-name-sans-extension file) "; tar -C " (file-name-sans-extension file) " -xvf")) '(if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " tvf") "tar tvf")) (list "\\.tar\\.Z\\'" '(if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " zxvf") (concat "zcat * | tar xvf -")) '(concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches)) (list "\\.t\\(ar\\.\\)?gz\\'" '(if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " zxvf") (concat "gunzip -qc * | tar xvf -")) '(if dired-guess-shell-gnutar (concat "mkdir " (file-name-sans-extension file) "; " dired-guess-shell-gnutar " -C " (file-name-sans-extension file) " -zxvf") (concat "mkdir " (file-name-sans-extension file) "; gunzip -qc * | tar -C " (file-name-sans-extension file) " -xvf -")) '(concat "gunzip" (if dired-guess-shell-gzip-quiet " -q" "")) '(if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " ztvf") (concat "gunzip -qc * | tar tvf -"))) (list "\\.t\\(ar\\.bz2\\|bz\\)\\'" "bunzip2 -c * | tar xvf -" '(concat "mkdir " (file-name-sans-extension file) "; bunzip2 -c * | tar -C " (file-name-sans-extension file) " -xvf -") "bunzip2") (list "\\.t\\(ar\\.\\)?xz\\'" "unxz -c * | tar xvf -" '(concat "mkdir " (file-name-sans-extension file) "; unxz -c * | tar -C " (file-name-sans-extension file) " -xvf -") "unxz") `(,(rx (or ".tar.zst" ".tzst") eos) "unzstd -c %i | tar -xf -") `(,(rx ".zst" eos) "unzstd --rm") '("\\.shar\\.Z\\'" "zcat * | unshar") '("\\.shar\\.g?z\\'" "gunzip -qc * | unshar") '("\\.e?ps\\'" "ghostview" "xloadimage" "lpr") (list "\\.e?ps\\.g?z\\'" "gunzip -qc * | ghostview -" '(concat "gunzip" (if dired-guess-shell-gzip-quiet " -q"))) (list "\\.e?ps\\.Z\\'" "zcat * | ghostview -" '(concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches)) (list "\\.patch\\'" '(if (eq (ignore-errors (vc-responsible-backend default-directory)) 'Git) "cat * | git apply" "cat * | patch")) (list "\\.patch\\.g?z\\'" "gunzip -qc * | patch" '(concat "gunzip" (if dired-guess-shell-gzip-quiet " -q"))) (list "\\.patch\\.Z\\'" "zcat * | patch" '(concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches)) (list "\\.\\(?:[0-9]\\|man\\)\\'" '(let ((loc (Man-support-local-filenames))) (cond ((eq loc 'man-db) "man -l") ((eq loc 'man) "man ./") (t "cat * | tbl | nroff -man -h | col -b")))) (list "\\.\\(?:[0-9]\\|man\\)\\.g?z\\'" '(let ((loc (Man-support-local-filenames))) (cond ((eq loc 'man-db) "man -l") ((eq loc 'man) "man ./") (t "gunzip -qc * | tbl | nroff -man -h | col -b"))) '(concat "gunzip" (if dired-guess-shell-gzip-quiet " -q"))) (list "\\.[0-9]\\.Z\\'" '(let ((loc (Man-support-local-filenames))) (cond ((eq loc 'man-db) "man -l") ((eq loc 'man) "man ./") (t "zcat * | tbl | nroff -man -h | col -b"))) '(concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches)) '("\\.pod\\'" "perldoc" "pod2man * | nroff -man") '("\\.dvi\\'" "xdvi" "dvips") '("\\.au\\'" "play") '("\\.mpe?g\\'\\|\\.avi\\'" "xine -p") '("\\.ogg\\'" "ogg123") '("\\.mp3\\'" "mpg123") '("\\.wav\\'" "play") '("\\.uu\\'" "uudecode") '("\\.hqx\\'" "mcvert") '("\\.sh\\'" "sh") '("\\.xbm\\'" "bitmap") '("\\.gp\\'" "gnuplot") '("\\.p[bgpn]m\\'" "xloadimage") '("\\.gif\\'" "xloadimage") '("\\.tif\\'" "xloadimage") '("\\.png\\'" "display") '("\\.jpe?g\\'" "xloadimage") '("\\.fig\\'" "xfig") '("\\.out\\'" "xgraph") '("\\.tex\\'" "latex" "tex") '("\\.texi\\(nfo\\)?\\'" "makeinfo" "texi2dvi") '("\\.pdf\\'" "xpdf") '("\\.doc\\'" "antiword" "strings") '("\\.rpm\\'" "rpm -qilp" "rpm -ivh") '("\\.dia\\'" "dia") '("\\.mgp\\'" "mgp") (list "\\.zip\\'" "unzip" "unzip -l" '(concat "unzip" (if dired-guess-shell-gzip-quiet " -q") " -d " (file-name-sans-extension file))) '("\\.zoo\\'" "zoo x//") '("\\.lzh\\'" "lharc x") '("\\.arc\\'" "arc x") '("\\.shar\\'" "unshar") '("\\.rar\\'" "unrar x") '("\\.7z\\'" "7z x") (list "\\.g?z\\'" '(concat "gunzip" (if dired-guess-shell-gzip-quiet " -q"))) (list "\\.dz\\'" "dictunzip") (list "\\.bz2\\'" "bunzip2") (list "\\.xz\\'" "unxz") (list "\\.Z\\'" "uncompress" '(concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches)) '("\\.sign?\\'" "gpg --verify"))) nil [45340 52716])
            ("dired-guess-default" function (:arguments ("files")) nil [52718 53645])
            ("dired-guess-shell-command" function (:arguments ("prompt" "files")) nil [53662 54817])
            ("dired-kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54885 55591])
            ("dired-do-kill-lines" function
               (:user-visible-flag t
                :arguments ("arg" "fmt" "init-count"))
                nil [55608 57202])
            ("dired-compress" function nil nil [57223 58153])
            ("dired-compress-file-suffixes" variable (:default-value '(("\\.tar\\.gz\\'" "" "gzip -dc %i | tar -xf -") ("\\.tar\\.xz\\'" "" "xz -dc %i | tar -xf -") ("\\.tgz\\'" "" "gzip -dc %i | tar -xf -") ("\\.gz\\'" "" "gzip -d") ("\\.lz\\'" "" "lzip -d") ("\\.Z\\'" "" "uncompress") ("\\.z\\'" "" "gzip -d") ("\\.dz\\'" "" "dictunzip") ("\\.tbz\\'" ".tar" "bunzip2") ("\\.bz2\\'" "" "bunzip2") ("\\.xz\\'" "" "unxz") ("\\.zip\\'" "" "unzip -o -d %o %i") ("\\.tar\\.zst\\'" "" "unzstd -c %i | tar -xf -") ("\\.tzst\\'" "" "unzstd -c %i | tar -xf -") ("\\.zst\\'" "" "unzstd --rm") ("\\.7z\\'" "" "7z x -aoa -o%o %i") ("\\.tar\\'" ".tgz" nil))) nil [58155 59890])
            ("dired-compress-file-default-suffix" variable nil nil [59892 60104])
            ("dired-compress-file-alist" variable (:default-value '(("\\.gz\\'" . "gzip -9f %i") ("\\.bz2\\'" . "bzip2 -9f %i") ("\\.xz\\'" . "xz -9f %i") ("\\.zst\\'" . "zstd -qf -19 --rm -o %o %i"))) nil [60106 60625])
            ("dired-compress-directory-default-suffix" variable nil nil [60627 60850])
            ("dired-compress-files-alist" variable (:default-value '(("\\.tar\\.gz\\'" . "tar -cf - %i | gzip -c9 > %o") ("\\.tar\\.bz2\\'" . "tar -cf - %i | bzip2 -c9 > %o") ("\\.tar\\.xz\\'" . "tar -cf - %i | xz -c9 > %o") ("\\.tar\\.zst\\'" . "tar -cf - %i | zstd -19 -o %o") ("\\.tar\\.lz\\'" . "tar -cf - %i | lzip -c9 > %o") ("\\.tar\\.lzo\\'" . "tar -cf - %i | lzop -c9 > %o") ("\\.zip\\'" . "zip %o -r --filesync %i") ("\\.pax\\'" . "pax -wf %o %i"))) nil [60852 61645])
            ("dired-do-compress-to" function (:user-visible-flag t) nil [61662 63370])
            ("dired-compress-file" function (:arguments ("file")) nil [63387 69173])
            ("dired-mark-confirm" function (:arguments ("op-symbol" "arg")) nil [69176 70092])
            ("dired-map-over-marks-check" function (:arguments ("fun" "arg" "op-symbol" "show-progress")) nil [70094 71573])
            ("dired-query" function (:arguments ("sym" "prompt" "args")) nil [71590 72632])
            ("dired-do-compress" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [72651 73083])
            ("dired-byte-compile" function nil nil [73146 73787])
            ("dired-do-byte-compile" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73804 73997])
            ("dired-load" function nil nil [73999 74328])
            ("dired-do-load" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74345 74510])
            ("dired-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [74527 76257])
            ("dired-reset-subdir-switches" function (:user-visible-flag t) nil [76259 76428])
            ("dired-update-file-line" function (:arguments ("file")) nil [76432 77267])
            ("dired-add-file" function (:arguments ("filename" "marker-char")) nil [77284 77478])
            ("dired-omit-mode" variable nil nil [77480 77504])
            ("declare-function" code nil nil [77505 77554])
            ("dired-omit-localp" variable nil nil [77555 77581])
            ("dired-add-entry" function (:arguments ("filename" "marker-char" "relative")) nil [77583 81680])
            ("dired-after-subdir-garbage" function (:arguments ("dir")) nil [81682 82133])
            ("dired-remove-file" function (:arguments ("file")) nil [82150 82441])
            ("dired-relist-file" function (:arguments ("file")) nil [82458 82696])
            ("dired-relist-entry" function (:arguments ("file")) nil [82698 83340])
            ("dired-backup-overwrite" variable nil nil [83399 83679])
            ("dired-overwrite-confirmed" variable nil nil [83847 83881])
            ("dired-handle-overwrite" function (:arguments ("to")) nil [83883 84473])
            ("dired-copy-file" function (:arguments ("from" "to" "ok-flag")) nil [84490 84709])
            ("declare-function" code nil nil [84711 84759])
            ("dired-create-destination-dirs" variable nil nil [84761 85258])
            ("dired-create-destination-dirs-on-trailing-dirsep" variable nil nil [85260 86521])
            ("dired-maybe-create-dirs" function (:arguments ("dir")) nil [86523 86874])
            ("dired-copy-file-recursive" function (:arguments ("from" "to" "ok-flag" "preserve-time" "top" "recursive" "dereference")) nil [86876 87966])
            ("dired-vc-rename-file" variable nil nil [87968 88348])
            ("dired-rename-file" function (:arguments ("file" "newname" "ok-if-already-exists")) nil [88365 89333])
            ("dired-rename-subdir" function (:arguments ("from-dir" "to-dir")) nil [89335 90119])
            ("dired-rename-subdir-1" function (:arguments ("dir" "to")) nil [90121 91592])
            ("dired-rename-subdir-2" function (:arguments ("elt" "dir" "to")) nil [91594 92709])
            ("overwrite-query" variable nil nil [92743 92767])
            ("overwrite-backup-query" variable nil nil [92768 92799])
            ("dired-create-files" function (:arguments ("file-creator" "operation" "fn-list" "name-constructor" "marker-char")) nil [92873 99169])
            ("dired-do-revert-buffer" variable nil nil [99173 100082])
            ("dired-do-create-files" function (:arguments ("op-symbol" "file-creator" "operation" "arg" "marker-char" "op1" "how-to")) nil [100084 105819])
            ("dired-mark-read-file-name" function (:arguments ("prompt" "dir" "op-symbol" "arg" "files" "default")) nil [106343 106559])
            ("dired-dwim-target-directories" function nil nil [106561 106701])
            ("dired-dwim-target-next" function (:arguments ("all-frames")) nil [106703 107178])
            ("dired-dwim-target-next-visible" function nil nil [107180 107336])
            ("dired-dwim-target-recent" function nil nil [107338 107998])
            ("dired-dwim-target-directory" function nil nil [108000 108508])
            ("dired-dwim-target-defaults" function (:arguments ("fn-list" "target-dir")) nil [108510 110507])
            ("dired--find-topmost-parent-dir" function (:arguments ("filename")) nil [110663 110986])
            ("dired-create-directory" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [111003 111612])
            ("dired-create-empty-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [111629 112233])
            ("dired-into-dir-with-symlinks" function (:arguments ("target")) nil [112235 112351])
            ("dired-copy-how-to-fn" variable nil nil [112970 113145])
            ("dired-do-copy" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [113162 114922])
            ("dired-do-symlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114939 115624])
            ("dired-do-relsymlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [115641 116173])
            ("dired-make-relative-symlink" function
               (:user-visible-flag t
                :arguments ("file1" "file2" "ok-if-already-exists"))
                nil [116175 118262])
            ("dired-do-hardlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [118279 118907])
            ("dired-hardlink" function (:arguments ("file" "newname" "ok-if-already-exists")) nil [118909 119159])
            ("dired-do-rename" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [119176 119941])
            ("rename-regexp-query" variable nil nil [119985 120013])
            ("dired-do-create-files-regexp" function (:arguments ("file-creator" "operation" "arg" "regexp" "newname" "whole-name" "marker-char")) nil [120015 122344])
            ("dired-mark-read-regexp" function (:arguments ("operation")) nil [122346 122889])
            ("dired-do-rename-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [122906 123780])
            ("dired-do-copy-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [123797 124261])
            ("dired-do-hardlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [124278 124648])
            ("dired-do-symlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [124665 125032])
            ("dired-do-relsymlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [125049 125462])
            ("rename-non-directory-query" variable nil nil [125497 125532])
            ("dired-create-files-non-directory" function (:arguments ("file-creator" "basename-constructor" "operation" "arg")) nil [125534 126667])
            ("dired-rename-non-directory" function (:arguments ("basename-constructor" "operation" "arg")) nil [126669 126838])
            ("dired-upcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [126855 127028])
            ("dired-downcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [127045 127224])
            ("dired-maybe-insert-subdir" function
               (:user-visible-flag t
                :arguments ("dirname" "switches" "no-error-if-not-dir-p"))
                nil [127268 128987])
            ("dired-insert-subdir" function
               (:user-visible-flag t
                :arguments ("dirname" "switches" "no-error-if-not-dir-p"))
                nil [129004 131579])
            ("dired-insert-subdir-validate" function (:arguments ("dirname" "switches")) nil [131581 132305])
            ("dired-alist-add" function (:arguments ("dir" "new-marker")) nil [132307 132450])
            ("dired-alist-sort" function nil nil [132452 132670])
            ("dired-kill-tree" function
               (:user-visible-flag t
                :arguments ("dirname" "remember-marks" "kill-root"))
                nil [132672 133532])
            ("dired-insert-subdir-newpos" function (:arguments ("new-dir")) nil [133534 134068])
            ("dired-insert-subdir-del" function (:arguments ("element")) nil [134070 134598])
            ("dired-insert-subdir-doinsert" function (:arguments ("dirname" "switches")) nil [134600 135228])
            ("dired-insert-subdir-doupdate" function (:arguments ("dirname" "elt" "beg-end")) nil [135230 136041])
            ("dired-tree-lessp" function (:arguments ("dir1" "dir2")) nil [136043 137245])
            ("dired-split" function (:arguments ("pat" "str" "limit")) nil [137247 138197])
            ("dired-prev-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [138246 138714])
            ("dired-goto-subdir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [138731 139573])
            ("dired-mark-subdir-files" function (:user-visible-flag t) nil [139591 139922])
            ("dired-kill-subdir" function
               (:user-visible-flag t
                :arguments ("remember-marks"))
                nil [139939 140779])
            ("dired-unsubdir" function (:arguments ("dir")) nil [140781 140926])
            ("dired-tree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140943 141304])
            ("dired-tree-down" function (:user-visible-flag t) nil [141321 141803])
            ("dired-hide-subdir" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141834 142530])
            ("dired-hide-all" function
               (:user-visible-flag t
                :arguments ("_ignored"))
                nil [142547 143356])
            ("dired-isearch-filenames" variable nil nil [143439 143940])
            ("define-minor-mode" code nil nil [143942 144658])
            ("dired-isearch-filenames-setup" function nil nil [144675 145132])
            ("dired-isearch-filenames-end" function nil nil [145134 145471])
            ("dired-isearch-search-filenames" function (:arguments ("orig-fun")) nil [145473 145881])
            ("dired-isearch-filenames" function (:user-visible-flag t) nil [145898 146093])
            ("dired-isearch-filenames-regexp" function (:user-visible-flag t) nil [146110 146319])
            ("dired-do-isearch" function (:user-visible-flag t) nil [146400 146596])
            ("dired-do-isearch-regexp" function (:user-visible-flag t) nil [146613 146822])
            ("declare-function" code nil nil [146824 146874])
            ("dired-do-search" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [146891 147332])
            ("dired-do-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("from" "to" "delimited"))
                nil [147349 148523])
            ("declare-function" code nil nil [148525 148580])
            ("declare-function" code nil nil [148581 148637])
            ("dired-do-find-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [148654 150253])
            ("dired-do-find-regexp-and-replace" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [150270 151670])
            ("dired-nondirectory-p" function (:arguments ("file")) nil [151672 151739])
            ("dired-show-file-type" function
               (:user-visible-flag t
                :arguments ("file" "deref-symlinks"))
                nil [151757 152371])
            ("declare-function" code nil nil [152407 152458])
            ("declare-function" code nil nil [152459 152504])
            ("dired-vc-next-action" function
               (:user-visible-flag t
                :arguments ("verbose"))
                nil [152521 154273])
            ("declare-function" code nil nil [154275 154318])
            ("dired-vc-deduce-fileset" function (:arguments ("state-model-only-files" "not-state-changing")) nil [154335 155617])
            ("define-obsolete-function-alias" code nil nil [155619 155751])
            ("dired-aux" package nil nil [155755 155775]))          
      :file "dired-aux.el.gz"
      :pointmax 155881
      :fsize 41733
      :lastmodtime '(25603 26496 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4b45afba"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1521])
            ("cl-defmethod" code nil nil [1523 1922])
            ("window-system-default-frame-alist" variable nil nil [1924 2371])
            ("display-format-alist" variable nil nil [2373 2625])
            ("initial-frame-alist" variable nil nil [2817 4057])
            ("minibuffer-frame-alist" variable (:default-value '((width . 80) (height . 2))) nil [4059 4764])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4766 5513])
            ("frame-focus-state" function (:arguments ("frame")) nil [5515 6491])
            ("after-focus-change-function" variable (:default-value nil) nil [6493 7798])
            ("focus-in-hook" variable nil nil [7800 8305])
            ("make-obsolete-variable" code nil nil [8306 8388])
            ("focus-out-hook" variable nil nil [8390 8641])
            ("make-obsolete-variable" code nil nil [8642 8725])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8727 9353])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [9355 9988])
            ("handle-move-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [9990 10240])
            ("frame-initial-frame" variable nil nil [10736 10768])
            ("frame-initial-frame-alist" variable nil nil [10847 10881])
            ("frame-initial-geometry-arguments" variable nil nil [10883 10928])
            ("frame-initialize" function nil nil [11117 12649])
            ("frame-notice-user-settings" variable (:default-value t) nil [12651 12760])
            ("declare-function" code nil nil [12762 12821])
            ("declare-function" code nil nil [12822 12894])
            ("defalias" code nil nil [12896 12947])
            ("frame-notice-user-settings" function nil nil [13144 26863])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [26865 27066])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [27133 28308])
            ("get-other-frame" function nil nil [28310 28568])
            ("next-window-any-frame" function (:user-visible-flag t) nil [28570 28827])
            ("previous-window-any-frame" function (:user-visible-flag t) nil [28829 29092])
            ("defalias" code nil nil [29094 29152])
            ("defalias" code nil nil [29153 29219])
            ("window-system-for-display" function (:arguments ("display")) nil [29221 29716])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [29718 30339])
            ("make-frame-on-current-monitor" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [30341 30857])
            ("make-frame-on-monitor" function
               (:user-visible-flag t
                :arguments ("monitor" "display" "parameters"))
                nil [30859 31929])
            ("declare-function" code nil nil [31931 31988])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [31990 33335])
            ("make-frame-command" function (:user-visible-flag t) nil [33337 33647])
            ("clone-frame" function
               (:user-visible-flag t
                :arguments ("frame" "no-windows"))
                nil [33649 34593])
            ("before-make-frame-hook" variable nil nil [34595 34818])
            ("after-make-frame-functions" variable nil nil [34820 35112])
            ("after-setting-font-hook" variable nil nil [35114 35210])
            ("frame-inherited-parameters" variable (:default-value 'nil) nil [35212 35322])
            ("x-display-name" variable nil nil [35324 35347])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [35349 40330])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [40332 40631])
            ("minibuffer-frame-list" function nil nil [40633 40826])
            ("get-device-terminal" function (:arguments ("device")) nil [40878 41631])
            ("frames-on-display-list" function (:arguments ("device")) nil [41633 42075])
            ("framep-on-display" function (:arguments ("terminal")) nil [42077 42516])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [42518 43379])
            ("declare-function" code nil nil [43381 43452])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [43454 44596])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44598 45708])
            ("other-frame-prefix" function (:user-visible-flag t) nil [45710 46409])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [46411 46641])
            ("suspend-frame" function (:user-visible-flag t) nil [46643 47105])
            ("make-frame-names-alist" function nil nil [47107 47513])
            ("frame-name-history" variable nil nil [47515 47546])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [47547 48384])
            ("frame-background-mode" variable nil nil [48411 49089])
            ("declare-function" code nil nil [49091 49185])
            ("declare-function" code nil nil [49230 49300])
            ("inhibit-frame-set-background-mode" variable nil nil [49302 49348])
            ("frame--current-backround-mode" function (:arguments ("frame")) nil [49350 50093])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [50095 52936])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [52938 53454])
            ("current-frame-configuration" function nil nil [54402 54998])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [55000 56995])
            ("frame-height" function (:arguments ("frame")) nil [57090 57756])
            ("frame-width" function (:arguments ("frame")) nil [57758 57963])
            ("defalias" code nil nil [57965 58025])
            ("defalias" code nil nil [58026 58076])
            ("defalias" code nil nil [58077 58129])
            ("frame-inner-width" function (:arguments ("frame")) nil [58131 58381])
            ("frame-inner-height" function (:arguments ("frame")) nil [58383 58699])
            ("frame-outer-width" function (:arguments ("frame")) nil [58701 58958])
            ("frame-outer-height" function (:arguments ("frame")) nil [58960 59219])
            ("declare-function" code nil nil [59221 59326])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames" "inhibit-customize"))
                nil [59328 62808])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [62810 63061])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [63063 63808])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [63810 64569])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [64571 65057])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [65059 65525])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [65527 65909])
            ("define-minor-mode" code nil nil [65911 66887])
            ("define-minor-mode" code nil nil [66889 67569])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [67571 68093])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [68095 68817])
            ("declare-function" code nil nil [68819 68881])
            ("declare-function" code nil nil [68882 68948])
            ("declare-function" code nil nil [68949 69013])
            ("declare-function" code nil nil [69014 69082])
            ("declare-function" code nil nil [69083 69153])
            ("frame-geometry" function (:arguments ("frame")) nil [69155 71791])
            ("frame--size-history" function (:arguments ("frame")) nil [71793 76763])
            ("declare-function" code nil nil [76765 76829])
            ("declare-function" code nil nil [76830 76898])
            ("declare-function" code nil nil [76899 76965])
            ("declare-function" code nil nil [76966 77036])
            ("declare-function" code nil nil [77037 77109])
            ("frame-edges" function (:arguments ("frame" "type")) nil [77111 78229])
            ("declare-function" code nil nil [78231 78294])
            ("declare-function" code nil nil [78295 78354])
            ("declare-function" code nil nil [78355 78416])
            ("declare-function" code nil nil [78417 78482])
            ("declare-function" code nil nil [78483 78550])
            ("mouse-absolute-pixel-position" function nil nil [78552 79248])
            ("declare-function" code nil nil [79250 79325])
            ("declare-function" code nil nil [79326 79397])
            ("declare-function" code nil nil [79398 79471])
            ("declare-function" code nil nil [79472 79541])
            ("declare-function" code nil nil [79542 79619])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [79621 80284])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [80286 81088])
            ("frame-monitor-attribute" function (:arguments ("attribute" "frame" "x" "y")) nil [81090 82432])
            ("frame-monitor-geometry" function (:arguments ("frame" "x" "y")) nil [82434 83245])
            ("frame-monitor-workarea" function (:arguments ("frame" "x" "y")) nil [83247 84052])
            ("declare-function" code nil nil [84054 84122])
            ("declare-function" code nil nil [84123 84195])
            ("declare-function" code nil nil [84196 84266])
            ("declare-function" code nil nil [84378 84454])
            ("frame-list-z-order" function (:arguments ("display")) nil [84456 85451])
            ("declare-function" code nil nil [85453 85528])
            ("declare-function" code nil nil [85529 85608])
            ("declare-function" code nil nil [85609 85686])
            ("declare-function" code nil nil [85687 85768])
            ("declare-function" code nil nil [85769 85852])
            ("frame-restack" function (:arguments ("frame1" "frame2" "above")) nil [85854 87384])
            ("frame-size-changed-p" function (:arguments ("frame")) nil [87386 88419])
            ("declare-function" code nil nil [88907 88950])
            ("display-mouse-p" function (:arguments ("display")) nil [88952 89838])
            ("display-popup-menus-p" function (:arguments ("display")) nil [89840 90126])
            ("display-graphic-p" function (:arguments ("display")) nil [90128 90596])
            ("display-images-p" function (:arguments ("display")) nil [90598 90876])
            ("defalias" code nil nil [90878 90932])
            ("defalias" code nil nil [90933 90986])
            ("defalias" code nil nil [90987 91039])
            ("tty-select-active-regions" variable nil nil [91041 91459])
            ("display-selections-p" function (:arguments ("display")) nil [91461 92199])
            ("display-symbol-keys-p" function (:arguments ("display")) nil [92201 92663])
            ("declare-function" code nil nil [92665 92731])
            ("display-screens" function (:arguments ("display")) nil [92733 93133])
            ("declare-function" code nil nil [93135 93206])
            ("display-pixel-height" function (:arguments ("display")) nil [93208 93952])
            ("declare-function" code nil nil [93954 94024])
            ("display-pixel-width" function (:arguments ("display")) nil [94026 94765])
            ("display-mm-dimensions-alist" variable nil nil [94767 95385])
            ("declare-function" code nil nil [95387 95455])
            ("display-mm-height" function (:arguments ("display")) nil [95457 96347])
            ("declare-function" code nil nil [96349 96416])
            ("display-mm-width" function (:arguments ("display")) nil [96418 97304])
            ("declare-function" code nil nil [97306 97378])
            ("display-backing-store" function (:arguments ("display")) nil [97483 98012])
            ("declare-function" code nil nil [98014 98083])
            ("display-save-under" function (:arguments ("display")) nil [98085 98493])
            ("declare-function" code nil nil [98495 98560])
            ("display-planes" function (:arguments ("display")) nil [98562 99002])
            ("declare-function" code nil nil [99004 99074])
            ("display-color-cells" function (:arguments ("display")) nil [99076 99532])
            ("declare-function" code nil nil [99534 99605])
            ("display-visual-class" function (:arguments ("display")) nil [99607 100208])
            ("declare-function" code nil nil [100210 100296])
            ("declare-function" code nil nil [100297 100386])
            ("declare-function" code nil nil [100387 100475])
            ("declare-function" code nil nil [100476 100568])
            ("declare-function" code nil nil [100569 100663])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [100665 103414])
            ("declare-function" code nil nil [103416 103472])
            ("declare-function" code nil nil [103473 103535])
            ("device-class" function (:arguments ("frame" "name")) nil [103537 105639])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [105671 107541])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [107543 108799])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame" "iconify"))
                nil [108802 110603])
            ("undelete-frame--deleted-frames" variable nil nil [110605 110716])
            ("undelete-frame--save-deleted-frame" function (:arguments ("frame")) nil [110718 111947])
            ("define-minor-mode" code nil nil [111949 112325])
            ("undelete-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [112327 113918])
            ("window-divider" customgroup (:user-visible-flag t) nil [113942 114045])
            ("window-divider-default-places" variable (:default-value 'right-only) nil [114047 114912])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [114914 115044])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [115046 115697])
            ("window-divider-default-right-width" variable (:default-value 6) nil [115699 116341])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [116343 117635])
            ("define-minor-mode" code nil nil [117637 118052])
            ("blink-cursor-idle-timer" variable nil nil [118075 118250])
            ("blink-cursor-timer" variable nil nil [118252 118414])
            ("cursor" customgroup (:user-visible-flag t) nil [118416 118501])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [118503 118825])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [118827 119075])
            ("blink-cursor-blinks" variable (:default-value 10) nil [119077 119286])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [119288 119401])
            ("blink-cursor--start-idle-timer" function nil nil [119403 119951])
            ("blink-cursor--start-timer" function nil nil [119953 120238])
            ("blink-cursor-start" function nil nil [120240 120902])
            ("blink-cursor-timer-function" function nil nil [120904 121561])
            ("blink-cursor-end" function nil nil [121563 121959])
            ("blink-cursor-suspend" function nil nil [121961 122316])
            ("blink-cursor--should-blink" function nil nil [122318 122823])
            ("blink-cursor-check" function nil nil [122825 123298])
            ("blink-cursor--rescan-frames" function (:arguments ("_ign")) nil [123300 123488])
            ("define-minor-mode" code nil nil [123490 124503])
            ("toggle-frame-maximized" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [124541 125781])
            ("toggle-frame-fullscreen" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [125783 127019])
            ("define-key" code nil nil [127042 127091])
            ("define-key" code nil nil [127092 127142])
            ("define-key" code nil nil [127143 127186])
            ("define-key" code nil nil [127187 127229])
            ("define-key" code nil nil [127230 127279])
            ("define-key" code nil nil [127280 127322])
            ("define-key" code nil nil [127323 127368])
            ("define-key" code nil nil [127369 127424])
            ("define-key" code nil nil [127425 127486])
            ("define-key" code nil nil [127487 127548])
            ("make-variable-buffer-local" code nil nil [127562 127616])
            ("set-frame-property--interactive" function (:arguments ("prompt" "number")) nil [127618 128063])
            ("mapc" code nil nil [128464 129520])
            ("frame-hide-title-bar-when-maximized" function (:arguments ("frame")) nil [129522 129779])
            ("frame" package nil nil [129781 129797]))          
      :file "frame.el.gz"
      :pointmax 129822
      :fsize 32259
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table-4a84c6da"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [964 1997])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1999 2296])
            ("save-selected-window" function (:arguments ("body")) nil [2298 3336])
            ("temp-buffer-window-setup-hook" variable nil nil [3338 3539])
            ("temp-buffer-window-show-hook" variable nil nil [3541 3762])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3764 4378])
            ("resize-temp-buffer-window-inhibit" variable nil nil [4403 4445])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4447 5826])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5828 8421])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8423 9324])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9326 11792])
            ("with-window-non-dedicated" function (:arguments ("window" "body")) nil [11794 12633])
            ("window-right" function (:arguments ("window")) nil [12940 13152])
            ("window-left" function (:arguments ("window")) nil [13154 13364])
            ("window-child" function (:arguments ("window")) nil [13366 13521])
            ("window-child-count" function (:arguments ("window")) nil [13523 13819])
            ("window-last-child" function (:arguments ("window")) nil [13821 14088])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [14090 14862])
            ("window-normalize-frame" function (:arguments ("frame")) nil [14864 15294])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [15296 16003])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [16042 16814])
            ("ignore-window-parameters" variable nil nil [16816 17160])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [17210 17334])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [17336 17532])
            ("window-min-height" variable (:default-value 4) nil [17534 18236])
            ("window-min-pixel-height" function (:arguments ("window")) nil [18238 18471])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [18521 18644])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [18646 18841])
            ("window-min-width" variable (:default-value 10) nil [18843 19541])
            ("window-min-pixel-width" function (:arguments ("window")) nil [19543 19728])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [19730 20047])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [20049 20333])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [20335 20967])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [20969 21395])
            ("window-combinations" function (:arguments ("window" "horizontal" "ignore-fixed")) nil [21397 22777])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [22779 23491])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [23493 24721])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [24723 25374])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [25376 26336])
            ("window-atom-root" function (:arguments ("window")) nil [26358 26778])
            ("window-make-atom" function (:arguments ("window")) nil [26780 27168])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [27170 29931])
            ("window--atom-check-1" function (:arguments ("window")) nil [29933 30821])
            ("window--atom-check" function (:arguments ("frame")) nil [30823 31211])
            ("window-sides-vertical" variable nil nil [31230 31526])
            ("window-sides-reversed" variable nil nil [31528 32429])
            ("window-sides-slots" variable (:default-value '(nil nil nil nil)) nil [32431 34080])
            ("defvar-local" code nil nil [34082 34531])
            ("window--sides-inhibit-check" variable nil nil [34533 34627])
            ("window--sides-reverse-on-frame-p" function (:arguments ("frame")) nil [34629 36197])
            ("window-main-window" function (:arguments ("frame")) nil [36199 37187])
            ("window--make-major-side-window-next-to" function (:arguments ("side")) nil [37189 39030])
            ("window--make-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [39032 41418])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [41420 48200])
            ("window-toggle-side-windows" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [48202 49754])
            ("window--sides-reverse-all" function nil nil [49756 49953])
            ("window--sides-reverse-frame" function (:arguments ("frame")) nil [49955 50412])
            ("window--sides-reverse-side" function (:arguments ("frame" "side")) nil [50414 51346])
            ("window--sides-reverse" function (:arguments ("symbol" "value")) nil [51348 51929])
            ("window--sides-verticalize-frame" function (:arguments ("frame")) nil [51931 53261])
            ("window--sides-verticalize" function (:arguments ("symbol" "value")) nil [53263 53477])
            ("window--sides-check-failed" function (:arguments ("frame")) nil [53479 55181])
            ("window--sides-check" function (:arguments ("frame")) nil [55183 56119])
            ("window--check" function (:arguments ("frame")) nil [56121 56301])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [56337 58300])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [58302 60008])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [60028 60976])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [60978 61782])
            ("defvar-local" code nil nil [61784 62227])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [62229 63630])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [63632 64101])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [64103 64457])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [64459 65164])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [65166 65734])
            ("window--min-size-ignore-p" function (:arguments ("window" "ignore")) nil [65736 65956])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [65958 69692])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69694 71157])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [71159 71664])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [71666 72991])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [72993 73641])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [73643 74985])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [74987 76770])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [76772 77381])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [77383 78683])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [78685 80131])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [80179 81988])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [81990 82648])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [82650 84162])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [84164 84720])
            ("defalias" code nil nil [84767 84813])
            ("defalias" code nil nil [84814 84857])
            ("defalias" code nil nil [84858 84931])
            ("defalias" code nil nil [84932 85007])
            ("window-full-height-p" function (:arguments ("window")) nil [85009 85547])
            ("window-full-width-p" function (:arguments ("window")) nil [85549 85981])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [85983 86514])
            ("declare-function" code nil nil [86516 86576])
            ("window-font-width" function (:arguments ("window" "face")) nil [86578 87208])
            ("window-font-height" function (:arguments ("window" "face")) nil [87210 87773])
            ("overflow-newline-into-fringe" variable nil nil [87775 87812])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [87814 89218])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [89220 90191])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [90193 92232])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [92234 92811])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [92813 93331])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [93333 93723])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "minibuf")) nil [94018 99710])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [99712 101333])
            ("defalias" code nil nil [101335 101385])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected" "no-other")) nil [101387 103291])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected" "no-other")) nil [103293 104806])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected" "no-other")) nil [104808 106330])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [106332 107900])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [107902 108081])
            ("count-windows" function (:arguments ("minibuf" "all-frames")) nil [108083 108499])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [108524 109474])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [109476 111100])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [111102 113017])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [113019 113455])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [113457 113979])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [114252 115472])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [115474 115884])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [115886 119727])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [119729 120206])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [120208 120385])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [120387 123905])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [123907 130548])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [130550 134346])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [134348 136251])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [136253 137086])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [137088 139009])
            ("window--resize-mini-frame" function (:arguments ("frame")) nil [139011 139208])
            ("window--sanitize-window-sizes" function (:arguments ("horizontal")) nil [139210 140196])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [140198 147398])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [147400 149234])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [149236 151087])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [151089 151685])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [151687 152297])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [152317 155369])
            ("window-body-edges" function (:arguments ("window")) nil [155371 155579])
            ("defalias" code nil nil [155580 155630])
            ("window-pixel-edges" function (:arguments ("window")) nil [155632 155853])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [155855 156096])
            ("defalias" code nil nil [156097 156159])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [156161 156388])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [156390 156642])
            ("defalias" code nil nil [156643 156723])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [156725 157625])
            ("frame-root-window-p" function (:arguments ("window")) nil [157628 157761])
            ("window--subtree" function (:arguments ("window" "next")) nil [157763 158486])
            ("window-tree" function (:arguments ("frame")) nil [158488 159383])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames" "interactive"))
                nil [159386 162263])
            ("other-window-prefix" function (:user-visible-flag t) nil [162265 163130])
            ("same-window-prefix" function (:user-visible-flag t) nil [163132 163970])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [164106 165379])
            ("window-deletable-p" function (:arguments ("window")) nil [165404 167148])
            ("window-at-x-y" function (:arguments ("x" "y" "frame" "no-other")) nil [167150 168528])
            ("delete-window-choose-selected" variable (:default-value 'mru) nil [168530 169461])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [169463 175587])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window" "interactive"))
                nil [175589 179604])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [179606 180232])
            ("push-window-buffer-onto-prev" function (:arguments ("window")) nil [181968 183195])
            ("record-window-buffer" function (:arguments ("window")) nil [183197 183791])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [183793 184292])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [184294 185348])
            ("switch-to-visible-buffer" variable (:default-value t) nil [185350 185805])
            ("make-obsolete-variable" code nil nil [185807 185916])
            ("switch-to-prev-buffer-skip" variable nil nil [185918 187847])
            ("switch-to-prev-buffer-skip-regexp" variable nil nil [187849 188278])
            ("switch-to-prev-buffer-skip-p" function (:arguments ("skip" "window" "buffer" "bury-or-kill")) nil [188280 189352])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [189354 195876])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [195878 200401])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [200403 201399])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [201401 202033])
            ("frame-auto-hide-function" variable (:default-value nil) nil [202035 202621])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [202623 203605])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [203607 204902])
            ("unbury-buffer" function (:user-visible-flag t) nil [204904 205029])
            ("next-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [205031 205673])
            ("previous-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [205675 206329])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [206331 209862])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [209864 211269])
            ("quit-window-hook" variable nil nil [211271 211432])
            ("window--quit-restore-select-window" function (:arguments ("window")) nil [211434 211750])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [211752 217971])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [217973 218683])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [218685 219649])
            ("window--combination-resizable" function (:arguments ("parent" "horizontal")) nil [219652 220444])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [220446 232620])
            ("split-window-no-error" function (:arguments ("window" "size" "side" "pixelwise")) nil [232622 232989])
            ("split-window-keep-point" variable (:default-value t) nil [233066 233440])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size" "window-to-split"))
                nil [233442 236069])
            ("defalias" code nil nil [236071 236126])
            ("split-root-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [236128 236456])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size" "window-to-split"))
                nil [236458 237907])
            ("defalias" code nil nil [237909 237966])
            ("split-root-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [237968 238351])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [238854 241655])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [241657 242083])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [242085 243240])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [243242 243646])
            ("defvar-local" code nil nil [243693 243868])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [243870 244524])
            ("balance-windows-area" function (:user-visible-flag t) nil [244526 248882])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [248952 253293])
            ("window-state-get" function (:arguments ("window" "writable")) nil [253295 255384])
            ("window-state-put-list" variable nil nil [255386 255464])
            ("window-state-put-stale-windows" variable nil nil [255466 255553])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [255555 258273])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [258275 263703])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [263705 268460])
            ("window-state-buffers" function (:arguments ("state")) nil [268462 268900])
            ("window-swap-states" function
               (:user-visible-flag t
                :arguments ("window-1" "window-2" "size"))
                nil [268902 272317])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [272320 275126])
            ("pop-up-frame-alist" variable nil nil [275128 275980])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [275982 276311])
            ("special-display-buffer-names" variable nil nil [276313 278903])
            ("make-obsolete-variable" code nil nil [278904 278987])
            ("put" code nil nil [278988 279047])
            ("special-display-regexps" variable nil nil [279049 281691])
            ("make-obsolete-variable" code nil nil [281692 281770])
            ("put" code nil nil [281771 281825])
            ("special-display-p" function (:arguments ("buffer-name")) nil [281827 282722])
            ("special-display-frame-alist" variable (:default-value '((height . 14) (width . 80) (unsplittable . t))) nil [282724 283342])
            ("make-obsolete-variable" code nil nil [283343 283425])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [283427 285447])
            ("special-display-function" variable (:default-value 'special-display-popup-frame) nil [285449 286247])
            ("make-obsolete-variable" code nil nil [286248 286327])
            ("same-window-buffer-names" variable nil nil [286329 287129])
            ("same-window-regexps" variable nil nil [287131 287947])
            ("same-window-p" function (:arguments ("buffer-name")) nil [287949 288912])
            ("pop-up-frames" variable nil nil [288914 289613])
            ("display-buffer-reuse-frames" variable nil nil [289615 289844])
            ("make-obsolete-variable" code nil nil [289846 289974])
            ("pop-up-windows" variable (:default-value t) nil [289976 290386])
            ("split-window-preferred-function" variable (:default-value 'split-window-sensibly) nil [290388 291771])
            ("split-height-threshold" variable (:default-value 80) nil [291773 292336])
            ("split-width-threshold" variable (:default-value 160) nil [292338 292726])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [292728 295069])
            ("split-window-sensibly" function (:arguments ("window")) nil [295071 297954])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [297956 299066])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [299068 300010])
            ("defvaralias" code nil nil [300012 300065])
            ("even-window-sizes" variable (:default-value t) nil [300066 300589])
            ("window--even-window-sizes" function (:arguments ("window")) nil [300591 301596])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist")) nil [301598 309614])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [309616 310196])
            ("display-buffer-mark-dedicated" variable nil nil [310535 310744])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value '(choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-full-frame) (const display-buffer-in-child-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-least-recent-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function")))
                nil [310746 311474])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value `(cons :tag "Action" (choice :tag "Action functions" ,display-buffer--action-function-custom-type (repeat :tag "List of functions" ,display-buffer--action-function-custom-type)) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value"))))
                nil [311476 311851])
            ("display-buffer-overriding-action" variable (:default-value '(nil)) nil [311853 312625])
            ("put" code nil nil [312626 312689])
            ("display-buffer-alist" variable nil nil [312691 314004])
            ("display-buffer-base-action" variable (:default-value '(nil)) nil [314006 314655])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value '((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame)))
                nil [314657 315323])
            ("put" code nil nil [315324 315385])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [315387 315955])
            ("display-buffer--same-window-action" variable (:default-value '(display-buffer-same-window (inhibit-same-window))) nil [315957 316177])
            ("put" code nil nil [316178 316243])
            ("display-buffer--other-frame-action" variable (:default-value '((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t))) nil [316245 316579])
            ("put" code nil nil [316580 316645])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [316647 325523])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [325525 326033])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [326075 327715])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [327717 328581])
            ("display-buffer-full-frame" function (:arguments ("buffer" "alist")) nil [328583 329372])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [329374 329857])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [329859 332613])
            ("display-buffer-reuse-mode-window" function (:arguments ("buffer" "alist")) nil [332615 335824])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [335826 336572])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [336574 337878])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [337880 339510])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [339512 340132])
            ("display-buffer--maybe-pop-up-frame" function (:arguments ("buffer" "alist")) nil [340134 340641])
            ("display-buffer--maybe-pop-up-window" function (:arguments ("buffer" "alist")) nil [340643 340901])
            ("display-buffer-in-child-frame" function (:arguments ("buffer" "alist")) nil [340903 342982])
            ("windows-sharing-edge" function (:arguments ("window" "edge" "within")) nil [342984 344798])
            ("window--try-to-split-window-in-direction" function (:arguments ("window" "direction" "alist")) nil [344800 345754])
            ("display-buffer-in-direction" function (:arguments ("buffer" "alist")) nil [345756 349126])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [349233 351708])
            ("display-buffer--maybe-at-bottom" function (:arguments ("buffer" "alist")) nil [351710 352291])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [352399 353866])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [353868 357205])
            ("display-buffer--lru-window" function (:arguments ("alist")) nil [357207 360035])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [360037 362342])
            ("display-buffer-use-least-recent-window" function (:arguments ("buffer" "alist")) nil [362344 365569])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [365571 366379])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "norecord"))
                nil [366415 368292])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [368294 369209])
            ("display-comint-buffer-action" variable (:default-value display-buffer--same-window-action) nil [369211 369452])
            ("display-tex-shell-buffer-action" variable (:default-value '(display-buffer-in-previous-window)) nil [369454 369704])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [369706 370854])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [370856 371473])
            ("switch-to-buffer-preserve-window-point" variable (:default-value t) nil [371475 372444])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [372446 373236])
            ("switch-to-buffer-obey-display-actions" variable nil nil [373238 373706])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [373708 378986])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [378988 380092])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [380094 381406])
            ("display-buffer-override-next-command" function (:arguments ("pre-function" "post-function" "echo")) nil [381408 384524])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [384528 385501])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [385503 385718])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [385720 385939])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [385941 387956])
            ("window-buffer-height" function (:arguments ("window")) nil [387958 388436])
            ("window-default-font-height" function (:arguments ("window")) nil [388438 389282])
            ("window-default-line-height" function (:arguments ("window")) nil [389284 390084])
            ("fit-window-to-buffer-horizontally" variable nil nil [390149 390543])
            ("fit-frame-to-buffer" variable nil nil [390657 391106])
            ("fit-frame-to-buffer-margins" variable (:default-value '(nil nil nil nil)) nil [391108 392322])
            ("fit-frame-to-buffer-sizes" variable (:default-value '(nil nil nil nil)) nil [392324 393673])
            ("declare-function" code nil nil [393675 393746])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [393748 393983])
            ("declare-function" code nil nil [393985 394057])
            ("fit-mini-frame-to-buffer" function (:arguments ("frame")) nil [394059 394402])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [394404 395504])
            ("fit-frame-to-buffer-1" function (:arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only" "from" "to")) nil [395506 405042])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [405044 411865])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [411867 412248])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [412250 413358])
            ("window-largest-empty-rectangle--maximums-1" function (:arguments ("quad" "maximums")) nil [413360 413693])
            ("window-largest-empty-rectangle--maximums" function (:arguments ("quad" "maximums" "count")) nil [413695 413975])
            ("window-largest-empty-rectangle--disjoint-maximums" function (:arguments ("maximums" "count")) nil [413977 414746])
            ("window-largest-empty-rectangle" function (:arguments ("window" "count" "min-width" "min-height" "positions" "left")) nil [414748 419509])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [419512 420334])
            ("defvar-local" code nil nil [420754 420800])
            ("put" code nil nil [420801 420854])
            ("window-group-start" function (:arguments ("window")) nil [420855 421354])
            ("defvar-local" code nil nil [421356 421400])
            ("put" code nil nil [421401 421452])
            ("window-group-end" function (:arguments ("window" "update")) nil [421453 422259])
            ("defvar-local" code nil nil [422261 422311])
            ("put" code nil nil [422312 422369])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [422370 423011])
            ("defvar-local" code nil nil [423013 423062])
            ("put" code nil nil [423063 423119])
            ("recenter-window-group" function (:arguments ("arg")) nil [423120 424309])
            ("defvar-local" code nil nil [424311 424368])
            ("put" code nil nil [424369 424433])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [424434 425910])
            ("defvar-local" code nil nil [425912 425961])
            ("put" code nil nil [425962 426018])
            ("selected-window-group" function nil nil [426019 426369])
            ("defvar-local" code nil nil [426371 426424])
            ("put" code nil nil [426425 426485])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [426486 427080])
            ("recenter-last-op" variable nil nil [427084 427309])
            ("recenter-positions" variable (:default-value '(middle top bottom)) nil [427311 428171])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [428173 429588])
            ("define-key" code nil nil [429590 429642])
            ("recenter-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [429644 430077])
            ("define-key" code nil nil [430079 430139])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [430141 431275])
            ("define-key" code nil nil [431277 431340])
            ("scroll-error-top-bottom" variable nil nil [431510 431954])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [431956 433516])
            ("scroll-command--goto-goal-column" function nil nil [433518 434003])
            ("put" code nil nil [434005 434047])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [434049 435611])
            ("put" code nil nil [435613 435657])
            ("scroll-other-window" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [435659 436004])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [436006 436364])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [436434 436717])
            ("put" code nil nil [436719 436758])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [436760 437045])
            ("put" code nil nil [437047 437088])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [437092 437531])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [437533 437923])
            ("mouse-autoselect-window-timer" variable nil nil [437926 438016])
            ("mouse-autoselect-window-position-1" variable nil nil [438018 438132])
            ("mouse-autoselect-window-position" variable nil nil [438134 438245])
            ("mouse-autoselect-window-window" variable nil nil [438247 438348])
            ("mouse-autoselect-window-state" variable nil nil [438350 438647])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [438649 439420])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [439422 440250])
            ("mouse-autoselect-window-select" function nil nil [440252 444252])
            ("declare-function" code nil nil [444254 444322])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [444324 447016])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [447018 447709])
            ("window-adjust-process-window-size-function" variable (:default-value 'window-adjust-process-window-size-smallest) nil [447778 449220])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "windows")) nil [449222 449962])
            ("window-adjust-process-window-size-smallest" function (:arguments ("_process" "windows")) nil [449964 450255])
            ("window-adjust-process-window-size-largest" function (:arguments ("_process" "windows")) nil [450257 450546])
            ("window--process-window-list" function nil nil [450548 451761])
            ("window--adjust-process-windows" function nil nil [451763 452459])
            ("add-hook" code nil nil [452461 452537])
            ("define-key" code nil nil [452627 452668])
            ("define-key" code nil nil [452669 452717])
            ("define-key" code nil nil [452718 452764])
            ("define-key" code nil nil [452765 452811])
            ("define-key" code nil nil [452812 452852])
            ("define-key" code nil nil [452853 452895])
            ("define-key" code nil nil [452896 452951])
            ("define-key" code nil nil [452952 453006])
            ("define-key" code nil nil [453007 453070])
            ("define-key" code nil nil [453071 453114])
            ("define-key" code nil nil [453115 453167])
            ("define-key" code nil nil [453168 453216])
            ("define-key" code nil nil [453217 453266])
            ("defvar-keymap" code nil nil [453268 453523])
            ("defvar-keymap" code nil nil [453525 453945])
            ("defvar-keymap" code nil nil [453947 454234])
            ("define-key" code nil nil [454235 454279])
            ("window" package nil nil [454281 454298]))          
      :file "window.el.gz"
      :pointmax 454324
      :fsize 99500
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-469952f2"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [6535 6552])
            ("dired" include nil nil [6553 6569])
            ("image-mode" include nil nil [6570 6591])
            ("jka-compr" include nil nil [6592 6612])
            ("filenotify" include nil nil [6613 6634])
            ("subr-x" include nil nil [6654 6671])
            ("doc-view" customgroup (:user-visible-flag t) nil [6702 7069])
            ("doc-view-ghostscript-program" variable (:default-value (cond ((memq system-type '(windows-nt ms-dos)) (cond ((executable-find "gswin64c") "gswin64c") ((executable-find "gswin32c") "gswin32c") ((executable-find "rungs") "rungs") ((and (executable-find "mgs") (= 0 (shell-command "mgs -q -dNODISPLAY -c quit"))) "mgs"))) (t "gs"))) nil [7071 7789])
            ("doc-view-pdfdraw-program" variable (:default-value (cond ((executable-find "pdfdraw") "pdfdraw") ((executable-find "mudraw") "mudraw") ((executable-find "mutool") "mutool") (t "mudraw"))) nil [7791 8066])
            ("doc-view-pdftotext-program-args" variable (:default-value '("-raw")) nil [8068 8213])
            ("doc-view-pdf->png-converter-function" variable (:default-value (if (executable-find doc-view-pdfdraw-program) #'doc-view-pdf->png-converter-mupdf #'doc-view-pdf->png-converter-ghostscript)) nil [8215 8731])
            ("doc-view-mupdf-use-svg" variable nil nil [8733 8851])
            ("doc-view-imenu-enabled" variable (:default-value (and (executable-find "mutool") t)) nil [8853 9028])
            ("doc-view-imenu-title-format" variable (:default-value "%t (%p)") nil [9030 9431])
            ("doc-view-imenu-flatten" variable nil nil [9433 9581])
            ("doc-view-svg-background" variable (:default-value "white") nil [9583 9726])
            ("doc-view-svg-foreground" variable (:default-value "black") nil [9728 9871])
            ("doc-view-ghostscript-options" variable (:default-value '("-dSAFER" "-dNOPAUSE" "-dTextAlphaBits=4" "-dBATCH" "-dGraphicsAlphaBits=4" "-dQUIET")) nil [9873 10162])
            ("doc-view-ghostscript-device" variable (:default-value "png16m") nil [10164 10288])
            ("doc-view-resolution" variable (:default-value 100) nil [10290 10439])
            ("doc-view-doc-type" variable nil nil [10441 10600])
            ("doc-view--epub-stylesheet-watcher" variable nil nil [10602 10702])
            ("doc-view--epub-reconvert" function (:arguments ("_event")) nil [10704 10984])
            ("doc-view-custom-set-epub-user-stylesheet" function (:arguments ("option-name" "new-value")) nil [10986 11496])
            ("doc-view-epub-user-stylesheet" variable nil nil [11498 11745])
            ("defvar-local" code nil nil [11747 11819])
            ("doc-view-custom-set-epub-font-size" function (:arguments ("option-name" "new-value")) nil [11821 11954])
            ("doc-view-current-page" function (:arguments ("win")) nil [12092 12178])
            ("doc-view-current-info" function nil nil [12179 12245])
            ("doc-view-current-overlay" function nil nil [12246 12318])
            ("doc-view-current-image" function nil nil [12319 12387])
            ("doc-view-current-slice" function nil nil [12388 12456])
            ("defvar-local" code nil nil [12458 12530])
            ("doc-view-epub-font-size" variable nil nil [12532 12712])
            ("doc-view-scale-internally" variable (:default-value t) nil [12714 13004])
            ("doc-view-image-width" variable (:default-value 850) nil [13006 13210])
            ("doc-view-dvipdfm-program" variable (:default-value "dvipdfm") nil [13212 13487])
            ("doc-view-dvipdf-program" variable (:default-value "dvipdf") nil [13489 13763])
            ("define-obsolete-variable-alias" code nil nil [13765 13867])
            ("doc-view-odf->pdf-converter-program" variable (:default-value (cond ((executable-find "soffice") "soffice") ((executable-find "unoconv") "unoconv") (t "soffice"))) nil [13869 14190])
            ("doc-view-odf->pdf-converter-function" variable (:default-value (cond ((string-match "unoconv\\'" doc-view-odf->pdf-converter-program) #'doc-view-odf->pdf-converter-unoconv) ((string-match "soffice\\'" doc-view-odf->pdf-converter-program) #'doc-view-odf->pdf-converter-soffice))) nil [14192 14801])
            ("doc-view-ps2pdf-program" variable (:default-value "ps2pdf") nil [14803 14966])
            ("doc-view-pdftotext-program" variable (:default-value "pdftotext") nil [14968 15103])
            ("doc-view-cache-directory" variable (:default-value (expand-file-name (format "docview%d" (user-uid)) temporary-file-directory)) nil [15105 15304])
            ("doc-view-conversion-buffer" variable (:default-value " *doc-view conversion output*") nil [15306 15438])
            ("doc-view-conversion-refresh-interval" variable (:default-value 1) nil [15440 15858])
            ("doc-view-continuous" variable nil nil [15860 16187])
            ("defvar-local" code nil nil [16214 16296])
            ("doc-view-new-window-function" function (:arguments ("winprops")) nil [16298 17682])
            ("defvar-local" code nil nil [17684 17752])
            ("defvar-local" code nil nil [17754 17822])
            ("defvar-local" code nil nil [17824 17901])
            ("doc-view--pending-cache-flush" variable nil nil [17903 17971])
            ("doc-view--buffer-file-name" variable nil nil [17973 18288])
            ("doc-view-single-page-converter-function" variable nil nil [18290 18515])
            ("defvar-local" code nil nil [18517 18625])
            ("defvar-local" code nil nil [18627 18747])
            ("defvar-keymap" code nil nil [18771 20864])
            ("define-obsolete-function-alias" code nil nil [20866 20945])
            ("revert-buffer-preserve-modes" variable nil nil [20946 20983])
            ("doc-view--revert-buffer" function (:arguments ("orig-fun" "args")) nil [20984 22632])
            ("easy-menu-define" code nil nil [22635 26182])
            ("defvar-keymap" code nil nil [26184 26362])
            ("easy-menu-define" code nil nil [26364 26832])
            ("doc-view-last-page-number" function nil nil [26860 26931])
            ("doc-view-goto-page" function
               (:user-visible-flag t
                :arguments ("page"))
                nil [26933 29260])
            ("doc-view-next-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29262 29416])
            ("doc-view-previous-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29418 29577])
            ("doc-view-first-page" function (:user-visible-flag t) nil [29579 29675])
            ("doc-view-last-page" function (:user-visible-flag t) nil [29677 29797])
            ("doc-view-scroll-up-or-next-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29799 30472])
            ("doc-view-scroll-down-or-previous-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30474 31174])
            ("doc-view-next-line-or-next-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31176 31783])
            ("doc-view-previous-line-or-previous-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31785 32421])
            ("doc-view-kill-proc" function (:user-visible-flag t) nil [32447 32918])
            ("define-obsolete-function-alias" code nil nil [32920 33012])
            ("doc-view-make-safe-dir" function (:arguments ("dir")) nil [33014 34064])
            ("doc-view--current-cache-dir" function nil nil [34066 35272])
            ("doc-view-mode-p" function (:arguments ("type")) nil [35289 36629])
            ("doc-view-shrink-factor" variable (:default-value 1.125) nil [36658 36695])
            ("doc-view-enlarge" function
               (:user-visible-flag t
                :arguments ("factor"))
                nil [36697 37322])
            ("doc-view-shrink" function
               (:user-visible-flag t
                :arguments ("factor"))
                nil [37324 37473])
            ("doc-view-scale-reset" function (:user-visible-flag t) nil [37475 37855])
            ("doc-view-scale-adjust" function
               (:user-visible-flag t
                :arguments ("factor"))
                nil [37857 38544])
            ("doc-view-fit-width-to-window" function (:user-visible-flag t) nil [38546 39379])
            ("doc-view-fit-height-to-window" function (:user-visible-flag t) nil [39381 40452])
            ("doc-view-fit-page-to-window" function (:user-visible-flag t) nil [40454 41924])
            ("doc-view-fit-window-to-page" function (:user-visible-flag t) nil [41926 43856])
            ("doc-view-center-page-horizontally" function (:user-visible-flag t) nil [43858 44554])
            ("doc-view-center-page-vertically" function (:user-visible-flag t) nil [44556 45059])
            ("doc-view-reconvert-doc" function (:user-visible-flag t) nil [45061 45461])
            ("doc-view-sentinel" function (:arguments ("proc" "event")) nil [45463 46225])
            ("doc-view-start-process" function (:arguments ("name" "program" "args" "callback")) nil [46227 46932])
            ("doc-view-dvi->pdf" function (:arguments ("dvi" "pdf" "callback")) nil [46934 47469])
            ("doc-view-pdf-password-protected-ghostscript-p" function (:arguments ("pdf")) nil [47471 47945])
            ("doc-view-pdf->png-converter-ghostscript" function (:arguments ("pdf" "png" "page" "callback")) nil [47947 48631])
            ("defalias" code nil nil [48633 48726])
            ("doc-view-djvu->tiff-converter-ddjvu" function (:arguments ("djvu" "tiff" "page" "callback")) nil [48728 49291])
            ("doc-view-pdfdraw-program-subcommand" function nil nil [49293 49535])
            ("doc-view-pdf-password-protected-pdfdraw-p" function (:arguments ("pdf")) nil [49537 50087])
            ("doc-view-pdf->png-converter-mupdf" function (:arguments ("pdf" "png" "page" "callback")) nil [50089 51127])
            ("doc-view-odf->pdf-converter-unoconv" function (:arguments ("odf" "callback")) nil [51129 51526])
            ("doc-view-odf->pdf-converter-soffice" function (:arguments ("odf" "callback")) nil [51528 52864])
            ("doc-view-pdf/ps->png" function (:arguments ("pdf-ps" "png")) nil [52866 54155])
            ("declare-function" code nil nil [54157 54222])
            ("doc-view-document->bitmap" function (:arguments ("pdf" "png" "pages")) nil [54224 55656])
            ("doc-view-pdf->txt" function (:arguments ("pdf" "txt" "callback")) nil [55658 56115])
            ("doc-view-current-cache-doc-pdf" function nil nil [56117 56358])
            ("doc-view-doc->txt" function (:arguments ("txt" "callback")) nil [56360 57390])
            ("doc-view-ps->pdf" function (:arguments ("ps" "pdf" "callback")) nil [57392 58000])
            ("doc-view-active-pages" function nil nil [58002 58247])
            ("doc-view-convert-current-doc" function nil nil [58249 60592])
            ("declare-function" code nil nil [60608 60677])
            ("doc-view-set-slice" function
               (:user-visible-flag t
                :arguments ("x" "y" "width" "height"))
                nil [60679 61605])
            ("doc-view-set-slice-using-mouse" function (:user-visible-flag t) nil [61607 62360])
            ("doc-view-get-bounding-box" function nil nil [62362 63252])
            ("doc-view-paper-sizes" variable (:default-value '((a4 595 842) (a4-landscape 842 595) (letter 612 792) (letter-landscape 792 612) (legal 612 1008) (legal-landscape 1008 612) (a3 842 1191) (a3-landscape 1191 842) (tabloid 792 1224) (ledger 1224 792))) nil [63254 63573])
            ("doc-view-guess-paper-size" function (:arguments ("iw" "ih")) nil [63575 63887])
            ("doc-view-scale-bounding-box" function (:arguments ("ps" "iw" "ih" "bb")) nil [63889 64198])
            ("doc-view-set-slice-from-bounding-box" function
               (:user-visible-flag t
                :arguments ("force-paper-size"))
                nil [64200 65206])
            ("doc-view-reset-slice" function (:user-visible-flag t) nil [65208 65447])
            ("doc-view-insert-image" function (:arguments ("file" "args")) nil [65463 68347])
            ("doc-view-sort" function (:arguments ("a" "b")) nil [68349 68572])
            ("doc-view-display" function (:arguments ("buffer" "force")) nil [68574 69808])
            ("doc-view-buffer-message" function nil nil [69810 70756])
            ("declare-function" code nil nil [70758 70900])
            ("doc-view-show-tooltip" function nil nil [70902 70991])
            ("define-derived-mode" code nil nil [71200 71326])
            ("doc-view-open-text" function (:user-visible-flag t) nil [71328 72954])
            ("defvar-local" code nil nil [72998 73094])
            ("put" code nil nil [73095 73144])
            ("doc-view-toggle-display" function (:user-visible-flag t) nil [73146 74087])
            ("doc-view-search-internal" function (:arguments ("regexp" "file")) nil [74106 75118])
            ("doc-view-search-no-of-matches" function (:arguments ("list")) nil [75120 75312])
            ("doc-view-search-backward" function
               (:user-visible-flag t
                :arguments ("new-query"))
                nil [75314 75510])
            ("doc-view-search" function
               (:user-visible-flag t
                :arguments ("new-query" "backward"))
                nil [75512 76635])
            ("doc-view-search-next-match" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76637 77155])
            ("doc-view-search-previous-match" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77157 77701])
            ("doc-view--outline-rx" variable
               (:constant-flag t
                :default-value "[^	]+\\(	+\\)\"\\(.+\\)\"	#\\(?:page=\\)?\\([0-9]+\\)")
                nil [77722 77814])
            ("defvar-local" code nil nil [77816 77923])
            ("doc-view--pdf-outline" function (:arguments ("file-name")) nil [77925 78972])
            ("doc-view--imenu-subtree" function (:arguments ("outline" "act")) nil [78974 80157])
            ("doc-view-imenu-index" function (:arguments ("file-name" "goto-page-fn")) nil [80159 80706])
            ("doc-view-imenu-setup" function nil nil [80708 81141])
            ("put" code nil nil [81186 81227])
            ("doc-view-already-converted-p" function nil nil [81229 81794])
            ("doc-view-initiate-display" function nil nil [81796 83327])
            ("bookmark-make-record-function" variable nil nil [83329 83367])
            ("doc-view-clone-buffer-hook" function nil nil [83369 84131])
            ("doc-view-set-doc-type" function nil nil [84133 86272])
            ("doc-view-set-up-single-converter" function nil nil [86274 87106])
            ("doc-view-desktop-save-buffer" function (:arguments ("_desktop-dirname")) nil [87135 87455])
            ("declare-function" code nil nil [87457 87573])
            ("doc-view-restore-desktop-buffer" function (:arguments ("file" "name" "misc")) nil [87575 88323])
            ("add-to-list" code nil nil [88325 88425])
            ("doc-view-mode" function (:user-visible-flag t) nil [88442 93023])
            ("doc-view-fallback-mode" function nil nil [93025 93525])
            ("doc-view-mode-maybe" function nil nil [93542 93886])
            ("define-minor-mode" code nil nil [93903 94355])
            ("doc-view-clear-cache" function (:user-visible-flag t) nil [94357 94516])
            ("doc-view-dired-cache" function (:user-visible-flag t) nil [94518 94648])
            ("defvar-keymap" code nil nil [94674 94837])
            ("defvar-local" code nil nil [94839 94889])
            ("doc-view-presentation-exit" function (:user-visible-flag t) nil [94891 95018])
            ("define-minor-mode" code nil nil [95020 95710])
            ("doc-view-presentation--propagate-pn" function (:arguments ("src-data" "pn")) nil [95712 96035])
            ("doc-view-presentation" function (:user-visible-flag t) nil [96037 97634])
            ("declare-function" code nil nil [97664 97776])
            ("declare-function" code nil nil [97777 97840])
            ("declare-function" code nil nil [97841 97901])
            ("doc-view-bookmark-make-record" function nil nil [97903 98081])
            ("doc-view-bookmark-jump" function (:arguments ("bmk")) nil [98098 98773])
            ("put" code nil nil [98775 98837])
            ("doc-view-intersection" function (:arguments ("l1" "l2")) nil [98853 98980])
            ("doc-view" package nil nil [98982 99001]))          
      :file "doc-view.el.gz"
      :pointmax 99090
      :fsize 26587
      :lastmodtime '(25539 41967 0 0)
      :unmatched-syntax '((close-paren 6671 . 6672) (symbol 6636 . 6653) (open-paren 6635 . 6636)))
    (semanticdb-table "semanticdb-table-4637bac0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [935 952])
            ("subr-x" include nil nil [972 989])
            ("dom-tag" function (:arguments ("node")) nil [992 1138])
            ("dom-attributes" function (:arguments ("node")) nil [1140 1301])
            ("dom-children" function (:arguments ("node")) nil [1303 1460])
            ("dom-non-text-children" function (:arguments ("node")) nil [1462 1635])
            ("dom-set-attributes" function (:arguments ("node" "attributes")) nil [1637 1797])
            ("dom-set-attribute" function (:arguments ("node" "attribute" "value")) nil [1799 2100])
            ("dom-remove-attribute" function (:arguments ("node" "attribute")) nil [2102 2314])
            ("dom-attr" function (:arguments ("node" "attr")) nil [2316 2464])
            ("dom-text" function (:arguments ("node")) nil [2466 2630])
            ("dom-texts" function (:arguments ("node" "separator")) nil [2632 3036])
            ("dom-child-by-tag" function (:arguments ("dom" "tag")) nil [3038 3160])
            ("dom-by-tag" function (:arguments ("dom" "tag")) nil [3162 3517])
            ("dom-search" function (:arguments ("dom" "predicate")) nil [3519 3918])
            ("dom-strings" function (:arguments ("dom")) nil [3920 4115])
            ("dom-by-class" function (:arguments ("dom" "match")) nil [4117 4260])
            ("dom-by-style" function (:arguments ("dom" "match")) nil [4262 4400])
            ("dom-by-id" function (:arguments ("dom" "match")) nil [4402 4532])
            ("dom-elements" function (:arguments ("dom" "attribute" "match")) nil [4534 5013])
            ("dom-remove-node" function (:arguments ("dom" "node")) nil [5015 5293])
            ("dom-parent" function (:arguments ("dom" "node")) nil [5295 5582])
            ("dom-previous-sibling" function (:arguments ("dom" "node")) nil [5584 5903])
            ("dom-node" function (:arguments ("tag" "attributes" "children")) nil [5905 6043])
            ("dom-append-child" function (:arguments ("node" "child")) nil [6045 6195])
            ("dom-add-child-before" function (:arguments ("node" "child" "before")) nil [6197 6669])
            ("dom-ensure-node" function (:arguments ("node")) nil [6671 6900])
            ("dom-pp" function (:arguments ("dom" "remove-empty")) nil [6902 8092])
            ("dom-print" function (:arguments ("dom" "pretty" "xml")) nil [8094 9638])
            ("dom" package nil nil [9640 9654]))          
      :file "dom.el.gz"
      :pointmax 9677
      :fsize 3133
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 989 . 990) (symbol 954 . 971) (open-paren 953 . 954)))
    (semanticdb-table "semanticdb-table-4f742554"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [1140 1157])
            ("display-time" customgroup (:user-visible-flag t) nil [1160 1271])
            ("display-time-mail-file" variable nil nil [1273 1616])
            ("display-time-mail-directory" variable nil nil [1618 1933])
            ("display-time-mail-function" variable nil nil [1935 2286])
            ("display-time-default-load-average" variable nil nil [2288 2836])
            ("display-time-load-average" variable nil nil [2838 3047])
            ("display-time-load-average-threshold" variable (:default-value 0.1) nil [3049 3190])
            ("display-time-day-and-date" variable nil nil [3207 3345])
            ("display-time-timer" variable nil nil [3347 3378])
            ("display-time-interval" variable (:default-value 60) nil [3380 3486])
            ("display-time-24hr-format" variable nil nil [3488 3682])
            ("display-time-string" variable nil nil [3684 3858])
            ("display-time-hook" variable nil nil [3925 4050])
            ("display-time-server-down-time" variable nil nil [4052 4212])
            ("display-time" function (:user-visible-flag t) nil [4229 4566])
            ("display-time-mail-face" variable nil nil [4792 5164])
            ("display-time-mail-icon" variable (:default-value (find-image '((:type xpm :file "letter.xpm" :ascent center) (:type pbm :file "letter.pbm" :ascent center)))) nil [5166 5449])
            ("display-time-use-mail-icon" variable nil nil [5499 5761])
            ("display-time-mail-string" variable (:default-value "Mail") nil [5831 6198])
            ("display-time-format" variable nil nil [6200 6547])
            ("display-time-string-forms" variable (:default-value '((if (and (not display-time-format) display-time-day-and-date) (format-time-string "%a %b %e " now) "") (propertize (format-time-string (or display-time-format (if display-time-24hr-format "%H:%M" "%-I:%M%p")) now) 'help-echo (format-time-string "%a %b %e, %Y" now)) load (if mail (concat " " (propertize display-time-mail-string 'display `(when (and display-time-use-mail-icon (display-graphic-p)) ,@display-time-mail-icon ,@(if (and display-time-mail-face (memq (plist-get (cdr display-time-mail-icon) :type) '(pbm xbm))) (let ((bg (face-attribute display-time-mail-face :background))) (if (stringp bg) (list :background bg))))) 'face display-time-mail-face 'help-echo "You have new mail; mouse-2: Read mail" 'mouse-face 'mode-line-highlight 'local-map (make-mode-line-mouse-map 'mouse-2 read-mail-command))) "") " ")) nil [6549 8465])
            ("display-time-event-handler" function nil nil [8467 9164])
            ("display-time-next-load-average" function (:user-visible-flag t) nil [9166 9498])
            ("display-time-mail-check-directory" function nil nil [9500 9937])
            ("with-no-warnings" code nil nil [9939 10319])
            ("display-time-update--load" function nil nil [10321 11551])
            ("display-time-update--mail" function nil nil [11553 12653])
            ("display-time-update" function nil nil [12655 14084])
            ("display-time-file-nonempty-p" function (:arguments ("file")) nil [14086 14311])
            ("define-minor-mode" code nil nil [14328 15619])
            ("define-obsolete-variable-alias" code nil nil [15643 15727])
            ("define-obsolete-variable-alias" code nil nil [15728 15826])
            ("define-obsolete-variable-alias" code nil nil [15827 15925])
            ("define-obsolete-variable-alias" code nil nil [15926 16026])
            ("define-obsolete-variable-alias" code nil nil [16027 16127])
            ("define-obsolete-function-alias" code nil nil [16129 16214])
            ("define-obsolete-function-alias" code nil nil [16215 16306])
            ("define-obsolete-function-alias" code nil nil [16307 16395])
            ("world-clock" customgroup (:user-visible-flag t) nil [16416 16492])
            ("zoneinfo-style-world-list" variable (:default-value '(("America/Los_Angeles" "Seattle") ("America/New_York" "New York") ("Europe/London" "London") ("Europe/Paris" "Paris") ("Asia/Calcutta" "Bangalore") ("Asia/Tokyo" "Tokyo"))) nil [16494 17162])
            ("legacy-style-world-list" variable (:default-value '(("PST8PDT" "Seattle") ("EST5EDT" "New York") ("GMT0BST" "London") ("CET-1CDT" "Paris") ("IST-5:30" "Bangalore") ("JST-9" "Tokyo"))) nil [17164 17812])
            ("world-clock-list" variable (:default-value t) nil [17814 18544])
            ("time--display-world-list" function nil nil [18546 18991])
            ("world-clock-time-format" variable (:default-value "%A %d %B %R %Z") nil [18993 19140])
            ("world-clock-buffer-name" variable (:default-value "*wclock*") nil [19142 19260])
            ("world-clock-timer-enable" variable (:default-value t) nil [19262 19397])
            ("world-clock-timer-second" variable (:default-value 60) nil [19399 19535])
            ("world-clock-label" variable
               (:default-value '((t :inherit font-lock-variable-name-face))
                :type "face")
                nil [19537 19665])
            ("defvar-keymap" code nil nil [19667 19781])
            ("world-clock-copy-time-as-kill" function (:user-visible-flag t) nil [19783 20013])
            ("define-derived-mode" code nil nil [20015 20284])
            ("world-clock--timer" variable nil nil [20286 20352])
            ("world-clock-display" function (:arguments ("alist")) nil [20354 21171])
            ("define-obsolete-function-alias" code nil nil [21188 21263])
            ("world-clock" function (:user-visible-flag t) nil [21280 21972])
            ("world-clock-cancel-timer" function nil nil [21974 22143])
            ("world-clock-update" function (:arguments ("_arg" "_noconfirm")) nil [22145 22489])
            ("emacs-uptime" function
               (:user-visible-flag t
                :arguments ("format" "here"))
                nil [22506 23106])
            ("emacs-init-time" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [23123 23624])
            ("time" package nil nil [23626 23641]))          
      :file "time.el.gz"
      :pointmax 23665
      :fsize 7403
      :lastmodtime '(25521 36547 0 0)
      :unmatched-syntax '((close-paren 1157 . 1158) (symbol 1122 . 1139) (open-paren 1121 . 1122)))
    (semanticdb-table "semanticdb-table-4b4be65a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("directory-abbrev-alist" variable nil nil [1372 2383])
            ("directory-abbrev-make-regexp" function (:arguments ("directory")) nil [2385 3082])
            ("directory-abbrev-apply" function (:arguments ("filename")) nil [3084 3536])
            ("make-backup-files" variable (:default-value t) nil [3538 4461])
            ("backup-inhibited" variable nil nil [4562 4754])
            ("put" code nil nil [4755 4797])
            ("backup-by-copying" variable nil nil [4799 4977])
            ("backup-by-copying-when-linked" variable nil nil [4979 5272])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [5274 5761])
            ("put" code nil nil [5762 5819])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [5821 6476])
            ("backup-enable-predicate" variable (:default-value 'normal-backup-enable-predicate) nil [6478 6697])
            ("buffer-offer-save" variable nil nil [6699 7320])
            ("make-variable-buffer-local" code nil nil [7321 7368])
            ("put" code nil nil [7369 7412])
            ("find-file-existing-other-name" variable (:default-value t) nil [7414 7707])
            ("find-file-visit-truename" variable nil nil [7709 8081])
            ("revert-without-query" variable nil nil [8083 8448])
            ("defvar-local" code nil nil [8450 8799])
            ("put" code nil nil [8800 8844])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type '(windows-nt)))) nil [8846 8991])
            ("defvar-local" code nil nil [8993 9089])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type 'ms-dos) (getenv "TMPDIR"))) nil [9091 9535])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [9603 9672])
            ("declare-function" code nil nil [9674 9724])
            ("declare-function" code nil nil [9725 9774])
            ("declare-function" code nil nil [9775 9861])
            ("declare-function" code nil nil [9862 9929])
            ("declare-function" code nil nil [9930 10002])
            ("declare-function" code nil nil [10003 10059])
            ("declare-function" code nil nil [10060 10119])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type 'ms-dos) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type '(ms-dos windows-nt cygwin)) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [10121 10793])
            ("file-precious-flag" variable nil nil [10795 11672])
            ("break-hardlink-on-save" variable nil nil [11674 12429])
            ("version-control" variable nil nil [12431 12841])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [12843 12987])
            ("dired-kept-versions" variable (:default-value 2) nil [12989 13128])
            ("delete-old-versions" variable nil nil [13130 13396])
            ("kept-old-versions" variable (:default-value 2) nil [13398 13554])
            ("kept-new-versions" variable (:default-value 2) nil [13556 13762])
            ("require-final-newline" variable nil nil [13764 14730])
            ("mode-require-final-newline" variable (:default-value t) nil [14732 15867])
            ("auto-save-default" variable (:default-value t) nil [15869 16011])
            ("auto-save-file-name-transforms" variable (:default-value `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,(concat temporary-file-directory "\\2") t))) nil [16013 18021])
            ("auto-save--timer" variable nil nil [18023 18090])
            ("auto-save-visited-interval" variable (:default-value 5) nil [18092 18573])
            ("auto-save-visited-predicate" variable nil nil [18575 19591])
            ("remote-file-name-inhibit-auto-save-visited" variable nil nil [19593 19814])
            ("define-minor-mode" code nil nil [19816 21453])
            ("make-obsolete-variable" code nil nil [21648 21767])
            ("save-abbrevs" variable (:default-value t) nil [21769 21980])
            ("lock-file-name-transforms" variable nil nil [21982 22796])
            ("remote-file-name-inhibit-locks" variable nil nil [22798 22943])
            ("define-minor-mode" code nil nil [22945 23116])
            ("find-file-run-dired" variable (:default-value t) nil [23118 23315])
            ("find-directory-functions" variable (:default-value '(cvs-dired-noselect dired-noselect)) nil [23317 23645])
            ("file-name-at-point-functions" variable (:default-value '(ffap-guess-file-name-at-point)) nil [23706 24034])
            ("find-file-not-found-functions" variable nil nil [24146 24447])
            ("define-obsolete-variable-alias" code nil nil [24614 24686])
            ("find-file-hook" variable nil nil [24687 25040])
            ("define-obsolete-variable-alias" code nil nil [25112 25191])
            ("write-file-functions" variable nil nil [25192 25996])
            ("put" code nil nil [25997 26043])
            ("defvar-local" code nil nil [26106 26147])
            ("put" code nil nil [26148 26196])
            ("make-obsolete-variable" code nil nil [26197 26274])
            ("define-obsolete-variable-alias" code nil nil [26337 26428])
            ("defvar-local" code nil nil [26429 27322])
            ("enable-local-variables" variable (:default-value t) nil [27324 28638])
            ("enable-dir-local-variables" variable (:default-value t) nil [28640 28861])
            ("local-enable-local-variables" variable (:default-value t) nil [30208 30685])
            ("enable-local-eval" variable (:default-value 'maybe) nil [30687 31078])
            ("view-read-only" variable nil nil [31080 31430])
            ("file-name-history" variable nil nil [31432 31615])
            ("save-silently" variable nil nil [31617 31772])
            ("put" code nil nil [31776 31830])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [31831 32437])
            ("declare-function" code nil nil [32439 32511])
            ("declare-function" code nil nil [32512 32584])
            ("convert-standard-filename" function (:arguments ("filename")) nil [32586 33742])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [33744 34865])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [34869 35137])
            ("cd-path" variable nil nil [35139 35269])
            ("parse-colon-path" function (:arguments ("search-path")) nil [35271 36541])
            ("cd-absolute" function (:arguments ("dir")) nil [36543 37470])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [37472 39628])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories" "predicate" "follow-symlinks")) nil [39630 42325])
            ("directory-empty-p" function (:arguments ("dir")) nil [42327 42761])
            ("module-file-suffix" variable nil nil [42763 42790])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [42792 43260])
            ("comp-eln-to-el-h" variable nil nil [43262 43287])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [43289 44666])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [44668 47634])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [47636 48242])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [48244 49657])
            ("user-emacs-directory-warning" variable (:default-value t) nil [49659 49982])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [49984 52054])
            ("exec-path" function nil nil [52056 52524])
            ("executable-find" function (:arguments ("command" "remote")) nil [52526 53339])
            ("declare-function" code nil nil [53341 53393])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [53395 53833])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [53835 55587])
            ("remote-shell-program" variable (:default-value (or (executable-find "ssh") "ssh")) nil [55886 56114])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [56116 57368])
            ("file-local-name" function (:arguments ("file")) nil [57370 57786])
            ("file-local-copy" function (:arguments ("file")) nil [57788 58177])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [58179 58460])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [58462 59251])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [59253 64077])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [64079 65500])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor" "space" "unit")) nil [65633 67793])
            ("file-size-human-readable-iec" function (:arguments ("size")) nil [67795 67943])
            ("byte-count-to-string-function" variable (:default-value nil) nil [67945 68426])
            ("mounted-file-systems" variable (:default-value (if (memq system-type '(windows-nt cygwin)) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [68428 68858])
            ("temporary-file-directory" function nil nil [68860 69636])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [69638 70691])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [70693 71633])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [71635 72523])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [72525 74785])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value 'after-completion) nil [74788 75401])
            ("confirm-nonexistent-file-or-buffer" function nil nil [75403 75844])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [75846 77301])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [77303 77417])
            ("file-name-history--add" function (:arguments ("file")) nil [77419 77559])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [77561 79313])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [79315 80723])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [80725 82127])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [82129 82564])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [82566 82991])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [82993 83374])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [83376 83827])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [83829 84275])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [84277 85226])
            ("kill-buffer-hook" variable nil nil [85287 85683])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [85685 89084])
            ("create-file-buffer" function (:arguments ("filename")) nil [89209 89992])
            ("abbreviated-home-dir" variable nil nil [89994 90168])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [90170 93159])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [93161 95217])
            ("find-file-wildcards" variable (:default-value t) nil [95220 95467])
            ("find-file-suppress-same-file-warnings" variable nil nil [95469 95795])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [95797 96076])
            ("out-of-memory-warning-percentage" variable nil nil [96078 96461])
            ("query-about-changed-file" variable (:default-value t) nil [96463 96925])
            ("declare-function" code nil nil [96927 97006])
            ("files--ask-user-about-large-file-help-text" function (:arguments ("op-type" "size")) nil [97008 98114])
            ("files--ask-user-about-large-file" function (:arguments ("size" "op-type" "filename" "offer-raw")) nil [98116 99128])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename" "offer-raw")) nil [99130 99985])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [99987 100930])
            ("files--message" function (:arguments ("format" "args")) nil [100932 101203])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [101205 109511])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [109513 111985])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [111988 113427])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [113429 114141])
            ("insert-file-literally" function (:arguments ("filename")) nil [114143 114626])
            ("find-file-literally" variable nil nil [114628 114835])
            ("put" code nil nil [114836 114881])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [114883 116211])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [116214 119503])
            ("define-obsolete-function-alias" code nil nil [119505 119580])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [119582 121729])
            ("auto-mode-case-fold" variable (:default-value t) nil [121731 122169])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) `(("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.webp\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.dir-locals\\(?:-2\\)?\\.el\\'" . lisp-data-mode) ("\\.eld\\'" . lisp-data-mode) ("eww-bookmarks\\'" . lisp-data-mode) ("tramp\\'" . lisp-data-mode) ("/archive-contents\\'" . lisp-data-mode) ("places\\'" . lisp-data-mode) ("\\.emacs-places\\'" . lisp-data-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|sls\\|sld\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) ,@(if (memq system-type '(berkeley-unix darwin)) '(("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode)) '(("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("/PKGBUILD\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\(acinclude\\|aclocal\\|acsite\\)\\.m4\\'" . autoconf-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|squashfs\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\|SQUASHFS\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js[mx]?\\'" . javascript-mode) ("\\.har\\'" . javascript-mode) ("\\.json\\'" . js-json-mode) ("\\.[ds]?va?h?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("\\.erts\\'" . erts-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|EPUB\\|CBZ\\|FB2\\|O?XPS\\|DVI\\|OD[FGPST]\\|DOCX\\|XLSX?\\|PPTX?\\|pdf\\|epub\\|cbz\\|fb2\\|o?xps\\|djvu\\|dvi\\|od[fgpst]\\|docx\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("/\\.\\(authinfo\\|netrc\\)\\'" . authinfo-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("/\\.redshift\\.conf\\'" . conf-windows-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.mailmap\\'" . conf-unix-mode) ("/\\.\\(?:asound\\|enigma\\|fetchmail\\|gltron\\|gtk\\|hxplayer\\|mairix\\|mbsync\\|msmtp\\|net\\|neverball\\|nvidia-settings-\\|offlineimap\\|qt/.+\\|realplayer\\|reportbug\\|rtorrent\\.\\|screen\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|mpdconf\\|notmuch-config\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode) ("\\.art\\'" . image-mode) ("\\.avs\\'" . image-mode) ("\\.bmp\\'" . image-mode) ("\\.cmyk\\'" . image-mode) ("\\.cmyka\\'" . image-mode) ("\\.crw\\'" . image-mode) ("\\.dcr\\'" . image-mode) ("\\.dcx\\'" . image-mode) ("\\.dng\\'" . image-mode) ("\\.dpx\\'" . image-mode) ("\\.fax\\'" . image-mode) ("\\.heic\\'" . image-mode) ("\\.hrz\\'" . image-mode) ("\\.icb\\'" . image-mode) ("\\.icc\\'" . image-mode) ("\\.icm\\'" . image-mode) ("\\.ico\\'" . image-mode) ("\\.icon\\'" . image-mode) ("\\.jbg\\'" . image-mode) ("\\.jbig\\'" . image-mode) ("\\.jng\\'" . image-mode) ("\\.jnx\\'" . image-mode) ("\\.miff\\'" . image-mode) ("\\.mng\\'" . image-mode) ("\\.mvg\\'" . image-mode) ("\\.otb\\'" . image-mode) ("\\.p7\\'" . image-mode) ("\\.pcx\\'" . image-mode) ("\\.pdb\\'" . image-mode) ("\\.pfa\\'" . image-mode) ("\\.pfb\\'" . image-mode) ("\\.picon\\'" . image-mode) ("\\.pict\\'" . image-mode) ("\\.rgb\\'" . image-mode) ("\\.rgba\\'" . image-mode) ("\\.tga\\'" . image-mode) ("\\.wbmp\\'" . image-mode) ("\\.webp\\'" . image-mode) ("\\.wmf\\'" . image-mode) ("\\.wpg\\'" . image-mode) ("\\.xcf\\'" . image-mode) ("\\.xmp\\'" . image-mode) ("\\.xwd\\'" . image-mode) ("\\.yuv\\'" . image-mode)))) nil [122171 136227])
            ("put" code nil nil [136228 136274])
            ("conf-mode-maybe" function nil nil [136276 136526])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) '(("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode)))) nil [136528 137835])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar 'purecopy '("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'"))) nil [138034 138894])
            ("inhibit-local-variables-suffixes" variable nil nil [138896 139172])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [139244 139350])
            ("inhibit-local-variables-p" function nil nil [139352 140162])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [140164 140682])
            ("magic-mode-alist" variable nil nil [140684 141237])
            ("put" code nil nil [141238 141285])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy `((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) (,(let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]")) . mhtml-mode) ("<![Dd][Oo][Cc][Tt][Yy][Pp][Ee][ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) (,(let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE ")) . sgml-mode) ("\320\317\340\241\261\341" . doc-view-mode-maybe) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode)))) nil [141287 142960])
            ("put" code nil nil [142961 143017])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [143019 143161])
            ("set-auto-mode--apply-alist" function (:arguments ("alist" "keep-mode-if-same" "dir-local")) nil [143163 145438])
            ("set-auto-mode--dir-local-valid-p" function (:arguments ("mode")) nil [145440 145714])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [145716 152403])
            ("defvar-local" code nil nil [152405 152500])
            ("major-mode-remap-alist" variable nil nil [152502 152852])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [153105 153784])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [153786 154052])
            ("set-auto-mode-1" function nil nil [154054 155580])
            ("ignored-local-variables" variable (:default-value '(ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist)) nil [155618 155824])
            ("put" code nil nil [155825 155879])
            ("hack-local-variables-hook" variable nil nil [155881 156114])
            ("safe-local-variable-values" variable nil nil [156116 156422])
            ("ignored-local-variable-values" variable nil nil [156424 156819])
            ("safe-local-eval-forms" variable (:default-value '((add-hook 'write-file-hooks 'time-stamp) (add-hook 'write-file-functions 'time-stamp) (add-hook 'before-save-hook 'time-stamp nil t) (add-hook 'before-save-hook 'delete-trailing-whitespace nil t))) nil [156821 157483])
            ("mapc" code nil nil [157511 158110])
            ("dolist" code nil nil [158752 159505])
            ("put" code nil nil [159507 159621])
            ("put" code nil nil [159623 159669])
            ("defvar-local" code nil nil [159671 160032])
            ("put" code nil nil [160033 160085])
            ("defvar-local" code nil nil [160087 160475])
            ("before-hack-local-variables-hook" variable nil nil [160477 160895])
            ("permanently-enabled-local-variables" variable (:default-value '(lexical-binding)) nil [160897 161073])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [161075 164085])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [164087 164174])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [164176 167627])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [167629 170254])
            ("hack-local-variables--warned-lexical" variable nil nil [170315 170364])
            ("hack-local-variables" function (:arguments ("handle-mode" "inhibit-locals")) nil [170366 173835])
            ("hack-local-variables--find-variables" function (:arguments ("handle-mode")) nil [173837 178618])
            ("hack-local-variables-apply" function nil nil [178620 179421])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [179423 180153])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [180155 181058])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [181060 181164])
            ("define-obsolete-function-alias" code nil nil [181166 181261])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [181263 183072])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [183074 183506])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [183508 184423])
            ("dir-locals-class-alist" variable (:default-value 'nil) nil [184489 184604])
            ("dir-locals-directory-cache" variable (:default-value 'nil) nil [184606 185177])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [185179 185312])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [185314 185959])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables" "predicate")) nil [185961 188417])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [188419 189183])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [189185 190560])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [190562 191260])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [191262 192306])
            ("dir-locals-find-file" function (:arguments ("file")) nil [192308 195491])
            ("declare-function" code nil nil [195493 195559])
            ("declare-function" code nil nil [195560 195612])
            ("dir-locals--get-sort-score" function (:arguments ("node")) nil [195614 196717])
            ("dir-locals--sort-variables" function (:arguments ("variables")) nil [196719 197285])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [197287 200207])
            ("define-obsolete-function-alias" code nil nil [200209 200303])
            ("enable-remote-dir-locals" variable nil nil [200305 200471])
            ("hack-dir-local-variables--warned-coding" variable nil nil [200473 200525])
            ("hack-dir-local--get-variables" function (:arguments ("predicate")) nil [200527 201701])
            ("hack-dir-local-variables" function nil nil [201703 202733])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [202735 203041])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [203045 203480])
            ("after-set-visited-file-name-hook" variable nil nil [203482 203603])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [203605 208724])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [208726 211393])
            ("rename-visited-file" function
               (:user-visible-flag t
                :arguments ("new-location"))
                nil [211395 212583])
            ("file-extended-attributes" function (:arguments ("filename")) nil [212587 212901])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [212903 213505])
            ("backup-buffer" function nil nil [213508 217379])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [217381 218586])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [218588 218881])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [218883 219634])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [219636 221585])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [221587 222517])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [222519 223613])
            ("file-name-with-extension" function (:arguments ("filename" "extension")) nil [223615 224551])
            ("file-name-base" function (:arguments ("filename")) nil [224553 224818])
            ("file-name-split" function (:arguments ("filename")) nil [224820 225878])
            ("file-name-parent-directory" function (:arguments ("filename")) nil [225880 226733])
            ("make-backup-file-name-function" variable (:default-value nil) nil [226735 227483])
            ("backup-directory-alist" variable nil nil [227485 228524])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [228526 229822])
            ("make-backup-file-name" function (:arguments ("file")) nil [229824 230137])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [230139 230889])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [230891 233481])
            ("backup-file-name-p" function (:arguments ("file")) nil [233483 233744])
            ("backup-extract-version-start" variable nil nil [233746 233783])
            ("backup-extract-version" function (:arguments ("fn")) nil [233958 234410])
            ("find-backup-file-name" function (:arguments ("fn")) nil [234412 236570])
            ("file-nlinks" function (:arguments ("filename")) nil [236572 236689])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [236691 239834])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [239837 242655])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [242657 243228])
            ("auto-save-hook" variable nil nil [243230 243302])
            ("before-save-hook" variable nil nil [243304 243502])
            ("after-save-hook" variable nil nil [243504 243723])
            ("copy-directory-create-symlink" variable nil nil [243725 244072])
            ("file-preserve-symlinks-on-save" variable nil nil [244074 244371])
            ("defvar-local" code nil nil [244373 244751])
            ("put" code nil nil [244753 244804])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [244806 249759])
            ("basic-save-buffer-1" function nil nil [250041 250344])
            ("basic-save-buffer-2" function nil nil [250433 255286])
            ("declare-function" code nil nil [255288 255374])
            ("save-some-buffers--switch-window-callback" variable nil nil [255376 255430])
            ("save-some-buffers-action-alist" variable (:default-value `((18 ,(lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil) ,(purecopy "view this buffer")) (6 ,(lambda (buf) (funcall save-some-buffers--switch-window-callback buf) (setq quit-flag t)) ,(purecopy "view this buffer and quit")) (100 ,(lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require 'diff) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil 'noasync))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil) ,(purecopy "view changes in this buffer")))) nil [255432 256767])
            ("put" code nil nil [256768 256829])
            ("defvar-local" code nil nil [256831 256953])
            ("save-some-buffers-default-predicate" variable nil nil [256955 257763])
            ("save-some-buffers-root" function nil nil [257765 258335])
            ("put" code nil nil [258336 258395])
            ("files--buffers-needing-to-be-saved" function (:arguments ("pred")) nil [258397 259518])
            ("save-some-buffers-functions" variable nil nil [259520 260036])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [260038 265157])
            ("clear-visited-file-modtime" function nil nil [265160 265341])
            ("not-modified" function (:arguments ("arg")) nil [265343 265866])
            ("insert-file" function (:arguments ("filename")) nil [265868 266316])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [266318 266976])
            ("file-newest-backup" function (:arguments ("filename")) nil [266978 267133])
            ("file-backup-file-names" function (:arguments ("filename")) nil [267135 268055])
            ("rename-uniquely" function (:user-visible-flag t) nil [268057 269073])
            ("files--ensure-directory" function (:arguments ("mkdir" "dir")) nil [269075 269368])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [269370 271467])
            ("make-empty-file" function
               (:user-visible-flag t
                :arguments ("filename" "parents"))
                nil [271469 272084])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "[^.]\\|\\.\\.\\.")
                nil [272086 272381])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [272383 272731])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [272733 275381])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [275383 276525])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [276527 277743])
            ("file-has-changed-p--hash-table" variable (:default-value (make-hash-table :test #'equal)) nil [277745 277868])
            ("file-has-changed-p" function (:arguments ("file" "tag")) nil [277870 278890])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [278892 282983])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [283031 283593])
            ("put" code nil nil [283597 283645])
            ("revert-buffer-function" variable (:default-value nil) nil [283646 284098])
            ("put" code nil nil [284100 284169])
            ("revert-buffer-insert-file-contents-function" variable (:default-value nil) nil [284170 284642])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [284644 285207])
            ("buffer-stale-function" variable (:default-value nil) nil [285209 286124])
            ("defvar-local" code nil nil [286126 286616])
            ("before-revert-hook" variable nil nil [286618 286821])
            ("after-revert-hook" variable nil nil [286823 287178])
            ("revert-buffer-in-progress-p" variable nil nil [287180 287294])
            ("revert-buffer-internal-hook" variable nil nil [287296 287332])
            ("revert-buffer-preserve-modes" variable nil nil [287522 287559])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [287561 290233])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [290235 293700])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [293702 295736])
            ("revert-buffer-with-fine-grain-max-seconds" variable (:default-value 2.0) nil [295738 296216])
            ("revert-buffer-insert-file-contents-delicately" function (:arguments ("file-name" "_auto-save-p")) nil [296218 298153])
            ("revert-buffer-with-fine-grain" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm"))
                nil [298155 299494])
            ("revert-buffer-quick-short-answers" variable nil nil [299496 299708])
            ("revert-buffer-quick" function
               (:user-visible-flag t
                :arguments ("auto-save"))
                nil [299710 300611])
            ("recover-this-file" function (:user-visible-flag t) nil [300615 300846])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [300848 303189])
            ("dired-mode-hook" variable nil nil [303191 303215])
            ("recover-session" function (:user-visible-flag t) nil [303217 305194])
            ("recover-session-finish" function (:user-visible-flag t) nil [305196 307599])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [307603 307854])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [307856 308459])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [308461 309118])
            ("rename-auto-save-file" function nil nil [309122 309686])
            ("make-auto-save-file-name" function nil nil [309688 312292])
            ("files--transform-file-name" function (:arguments ("filename" "transforms" "prefix" "suffix")) nil [312294 314514])
            ("make-lock-file-name" function (:arguments ("filename")) nil [314516 314956])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [314958 315181])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [315184 317371])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [317374 317535])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [317537 317703])
            ("file-expand-wildcards" function (:arguments ("pattern" "full" "regexp")) nil [317705 320220])
            ("find-sibling-rules" variable nil nil [320222 321163])
            ("find-sibling-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [321165 322304])
            ("find-sibling-file-search" function (:arguments ("file" "rules")) nil [322306 324083])
            ("files" package nil nil [324157 324193])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [324195 325773])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [325775 327611])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [327614 327809])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [327811 328229])
            ("make-obsolete-variable" code nil nil [328230 328349])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type 'darwin) "-k" "-Pk"))) nil [328351 328538])
            ("make-obsolete-variable" code nil nil [328539 328655])
            ("get-free-disk-space" function (:arguments ("dir")) nil [328657 328970])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (DD-MMM-YYYY (concat dd "-" month "-" yyyy s HH:MM)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" DD-MMM-YYYY "\\|" east-asian "\\)" "\\) +")))) nil [329042 331681])
            ("insert-directory-ls-version" variable (:default-value 'unknown) nil [331683 331728])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [331730 332725])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [332727 334738])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [335813 343947])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [343949 344515])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [344517 345001])
            ("kill-emacs-query-functions" variable nil nil [345003 345366])
            ("confirm-kill-emacs" variable nil nil [345368 345808])
            ("confirm-kill-processes" variable (:default-value t) nil [345810 346173])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg" "restart"))
                nil [346175 349383])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [349385 349906])
            ("restart-emacs" function (:user-visible-flag t) nil [349908 350239])
            ("setq" code nil nil [350350 350471])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [350731 358099])
            ("file-name-quoted-p" function (:arguments ("name" "top")) nil [358116 358412])
            ("file-name-quote" function (:arguments ("name" "top")) nil [358414 358848])
            ("file-name-unquote" function (:arguments ("name" "top")) nil [358850 359336])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [359379 359857])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [359859 360933])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [360935 362089])
            ("file-modes-number-to-symbolic" function (:arguments ("mode" "filetype")) nil [362091 363959])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [363961 365044])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [365046 366118])
            ("define-obsolete-variable-alias" code nil nil [366120 366202])
            ("trash-directory" variable nil nil [366228 366631])
            ("trash--hexify-table" variable nil nil [366633 366661])
            ("declare-function" code nil nil [366663 366729])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [366731 373723])
            ("file-attribute-type" function (:arguments ("attributes")) nil [373728 373944])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [373946 374093])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [374095 374362])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [374364 374632])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [374634 374829])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [374831 375095])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [375097 375408])
            ("file-attribute-size" function (:arguments ("attributes")) nil [375410 375551])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [375553 375737])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [375739 375907])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [375909 376107])
            ("file-attribute-file-identifier" function (:arguments ("attributes")) nil [376109 376445])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [376447 377327])
            ("define-key" code nil nil [377330 377370])
            ("define-key" code nil nil [377371 377421])
            ("define-key" code nil nil [377422 377472])
            ("define-key" code nil nil [377473 377515])
            ("define-key" code nil nil [377516 377561])
            ("define-key" code nil nil [377562 377603])
            ("define-key" code nil nil [377604 377643])
            ("define-key" code nil nil [377644 377682])
            ("define-key" code nil nil [377683 377728])
            ("define-key" code nil nil [377729 377786])
            ("define-key" code nil nil [377787 377832])
            ("define-key" code nil nil [377834 377886])
            ("define-key" code nil nil [377887 377949])
            ("define-key" code nil nil [377950 378005])
            ("define-key" code nil nil [378006 378065])
            ("define-key" code nil nil [378066 378113])
            ("define-key" code nil nil [378115 378173])
            ("define-key" code nil nil [378174 378225])
            ("define-key" code nil nil [378226 378280])
            ("define-key" code nil nil [378281 378342])
            ("define-key" code nil nil [378343 378402]))          
      :file "files.el.gz"
      :pointmax 378427
      :fsize 106451
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table-4690153e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("idle-update-delay" variable (:default-value 0.5) nil [1268 1565])
            ("amalgamating-undo-limit" variable (:default-value 20) nil [1567 1985])
            ("killing" customgroup (:user-visible-flag t) nil [1987 2061])
            ("paren-matching" customgroup (:user-visible-flag t) nil [2063 2165])
            ("defvar-local" code nil nil [2167 2646])
            ("next-error" customgroup (:user-visible-flag t) nil [2684 2785])
            ("next-error" variable
               (:default-value '((t (:inherit region)))
                :type "face")
                nil [2787 2918])
            ("next-error-highlight" variable (:default-value 0.5) nil [2920 3772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [3774 4632])
            ("next-error-recenter" variable nil nil [4634 4996])
            ("next-error-message-highlight" variable nil nil [4998 5486])
            ("next-error-message" variable
               (:default-value '((t (:inherit highlight :extend t)))
                :type "face")
                nil [5488 5676])
            ("defvar-local" code nil nil [5678 5815])
            ("global-minor-modes" variable nil nil [5817 5931])
            ("next-error-hook" variable nil nil [5933 6074])
            ("next-error-verbose" variable (:default-value t) nil [6076 6319])
            ("next-error-highlight-timer" variable nil nil [6321 6360])
            ("next-error-overlay-arrow-position" variable nil nil [6362 6408])
            ("put" code nil nil [6409 6487])
            ("add-to-list" code nil nil [6488 6565])
            ("next-error-last-buffer" variable nil nil [6567 6794])
            ("defvar-local" code nil nil [6796 6899])
            ("defvar-local" code nil nil [7131 7595])
            ("defvar-local" code nil nil [7597 7918])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [7920 9002])
            ("next-error-find-buffer-function" variable (:default-value nil) nil [9004 9895])
            ("next-error-buffer-on-selected-frame" function (:arguments ("_avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [9897 10640])
            ("next-error-buffer-unnavigated-current" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [10642 11469])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [11471 13451])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [13453 15752])
            ("next-error-internal" function nil nil [15754 16264])
            ("next-error-quit-window" function (:arguments ("from-buffer" "to-buffer")) nil [16266 16654])
            ("next-error-found-function" variable (:default-value nil) nil [16656 17139])
            ("next-error-found" function (:arguments ("from-buffer" "to-buffer")) nil [17141 17721])
            ("next-error-select-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [17723 18303])
            ("defalias" code nil nil [18305 18344])
            ("defalias" code nil nil [18345 18379])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18381 18733])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18735 19003])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19005 19534])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19536 19914])
            ("next-error-follow-last-line" variable nil nil [19985 20025])
            ("define-minor-mode" code nil nil [20027 20590])
            ("next-error-follow-mode-post-command-hook" function nil nil [20706 21039])
            ("next-error-message-highlight" function (:arguments ("error-buffer")) nil [21041 21751])
            ("recenter-current-error" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21753 22156])
            ("fundamental-mode" function (:user-visible-flag t) nil [22164 22373])
            ("define-derived-mode" code nil nil [22375 22743])
            ("defvar-keymap" code nil nil [22821 23093])
            ("put" code nil nil [23095 23135])
            ("define-derived-mode" code nil nil [23136 23411])
            ("self-insert-uses-region-functions" variable nil nil [23444 24307])
            ("hard-newline" variable (:default-value (propertize "
" 'hard t 'rear-nonsticky '(hard))) nil [24309 24442])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [24444 27525])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [27527 27875])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27877 28654])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28656 29457])
            ("separator-line" variable
               (:default-value '((((type graphic) (background dark)) :height 0.1 :background "#505050") (((type graphic) (background light)) :height 0.1 :background "#a0a0a0") (t :foreground "ForestGreen" :underline t))
                :type "face")
                nil [29459 29760])
            ("make-separator-line" function (:arguments ("length")) nil [29762 30450])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg" "beg" "end"))
                nil [30452 32044])
            ("defalias" code nil nil [32046 32088])
            ("delete-blank-lines" function (:user-visible-flag t) nil [32107 33534])
            ("delete-trailing-lines" variable (:default-value t) nil [33536 33822])
            ("region-modifiable-p" function (:arguments ("start" "end")) nil [33824 34046])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [34048 36020])
            ("newline-and-indent" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36022 36736])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [36738 37999])
            ("read-quoted-char-radix" variable (:default-value 8) nil [38001 38221])
            ("read-quoted-char" function (:arguments ("prompt")) nil [38223 41072])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [41074 43334])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [43336 43529])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [43531 43730])
            ("back-to-indentation" function (:user-visible-flag t) nil [43732 44022])
            ("fixup-whitespace" function (:user-visible-flag t) nil [44024 44367])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [44369 44636])
            ("delete-all-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [44638 44876])
            ("delete-space--internal" function (:arguments ("chars" "backward-only")) nil [44878 45297])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [45299 46095])
            ("cycle-spacing--context" variable nil nil [46097 46649])
            ("cycle-spacing-actions" variable (:default-value '(just-one-space delete-all-space restore)) nil [46651 49434])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [49436 55990])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [55993 56785])
            ("end-of-buffer" function (:arguments ("arg")) nil [56787 58120])
            ("delete-active-region" variable (:default-value t) nil [58122 58659])
            ("setq" code nil nil [58661 59110])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [59112 59458])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [59460 61130])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [61132 63796])
            ("mark-whole-buffer" function nil nil [63798 64419])
            ("goto-line-history-local" variable nil nil [64462 64876])
            ("goto-line-history" variable nil nil [64878 64956])
            ("goto-line-read-args" function (:arguments ("relative")) nil [64958 66693])
            ("goto-line" function (:arguments ("line" "buffer" "relative")) nil [66695 68871])
            ("goto-line-relative" function (:arguments ("line" "buffer")) nil [68873 69291])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [69293 70003])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end" "totals"))
                nil [70005 71645])
            ("count-words--buffer-format" function nil nil [71647 71798])
            ("count-words--format" function (:arguments ("str" "start" "end")) nil [71800 72222])
            ("what-line" function (:user-visible-flag t) nil [72224 72575])
            ("count-lines" function (:arguments ("start" "end" "ignore-invisible-lines")) nil [72577 74201])
            ("what-cursor-show-names" variable nil nil [74203 74364])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [74366 79594])
            ("defvar-keymap" code nil nil [79659 79941])
            ("defvar-keymap" code nil nil [79943 80125])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [80127 80650])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [80652 81109])
            ("minibuffer-default" variable nil nil [81111 81304])
            ("eval-expression-print-level" variable (:default-value 4) nil [81306 81536])
            ("eval-expression-print-length" variable (:default-value 12) nil [81538 81771])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [81773 81982])
            ("eval-expression-print-maximum-character" variable (:default-value 127) nil [81984 82401])
            ("eval-expression-print-format" function (:arguments ("value")) nil [82403 83085])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [83087 83201])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [83203 84080])
            ("read--expression-try-read" function (:user-visible-flag t) nil [84082 85746])
            ("eval-expression-get-print-arguments" function (:arguments ("prefix-argument")) nil [85748 86370])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [86500 89229])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [89231 90006])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [90008 91541])
            ("extended-command-history" variable nil nil [91544 91581])
            ("execute-extended-command--last-typed" variable nil nil [91582 91631])
            ("read-extended-command-predicate" variable nil nil [91633 93720])
            ("execute-extended-command-cycle" function (:user-visible-flag t) nil [93722 93982])
            ("extended-command-versions" variable (:default-value (list (list "M-x " (lambda nil read-extended-command-predicate)) (list "M-X " #'command-completion--command-for-this-buffer-function))) nil [93984 94366])
            ("defvar-keymap" code nil nil [94368 94536])
            ("define-minor-mode" code nil nil [94538 94647])
            ("read-extended-command" function (:arguments ("prompt")) nil [94649 96419])
            ("read-extended-command-1" function (:arguments ("prompt" "initial-input")) nil [96421 100755])
            ("command-completion-using-modes-p" function (:arguments ("symbol" "buffer")) nil [100757 101374])
            ("command-completion-default-include-p" function (:arguments ("symbol" "buffer")) nil [101376 102008])
            ("command-completion-with-modes-p" function (:arguments ("modes" "buffer")) nil [102010 102580])
            ("command-completion-using-modes-and-keymaps-p" function (:arguments ("symbol" "buffer")) nil [102582 103956])
            ("command-completion-button-p" function (:arguments ("category" "buffer")) nil [103959 104221])
            ("read-extended-command--affixation" function (:arguments ("command-names")) nil [104223 105193])
            ("suggest-key-bindings" variable (:default-value t) nil [105195 105752])
            ("extended-command-suggest-shorter" variable (:default-value t) nil [105754 105980])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [105982 106444])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [106446 107589])
            ("execute-extended-command--binding-timer" variable nil nil [107591 107643])
            ("execute-extended-command--describe-binding-msg" function (:arguments ("function" "binding" "shorter")) nil [107645 108067])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [108069 112603])
            ("execute-extended-command-for-buffer" function (:arguments ("prefixarg" "command-name" "typed")) nil [112605 113518])
            ("command-completion--command-for-this-buffer-function" function nil nil [113520 114550])
            ("cl-defgeneric" code nil nil [114552 115798])
            ("cl-defmethod" code nil nil [115800 115901])
            ("cl-defmethod" code nil nil [115923 116054])
            ("cl-defgeneric" code nil nil [116136 116588])
            ("cl-defmethod" code nil nil [116590 116725])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [116727 119579])
            ("command-execute--query" function (:arguments ("command")) nil [119581 119791])
            ("command-query" function (:arguments ("command" "query" "verbose")) nil [119808 120074])
            ("minibuffer-history" variable nil nil [120078 120331])
            ("minibuffer-history-sexp-flag" variable nil nil [120332 120647])
            ("setq" code nil nil [120648 120702])
            ("setq" code nil nil [120703 120741])
            ("minibuffer-history-search-history" variable nil nil [120767 120813])
            ("minibuffer-text-before-history" variable nil nil [120815 121015])
            ("add-hook" code nil nil [121017 121081])
            ("minibuffer-history-initialize" function nil nil [121083 121167])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [121169 121384])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [121386 121776])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [121778 124780])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [124782 125836])
            ("minibuffer-temporary-goal-position" variable nil nil [125838 125885])
            ("minibuffer-default-add-function" variable (:default-value 'minibuffer-default-add-completions) nil [125887 126527])
            ("defvar-local" code nil nil [126529 126858])
            ("minibuffer-default-add-completions" function nil nil [126860 127314])
            ("minibuffer-history-value" function nil nil [127316 127722])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [127724 130277])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [130279 130659])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [130661 130943])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [130945 132673])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [132675 135618])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [135620 136274])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [136276 136559])
            ("minibuffer-prompt-width" function nil nil [136618 136907])
            ("add-hook" code nil nil [136940 137007])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [137009 137060])
            ("make-variable-buffer-local" code nil nil [137061 137133])
            ("minibuffer-history-isearch-setup" function nil nil [137135 137781])
            ("minibuffer-history-isearch-end" function nil nil [137783 138013])
            ("minibuffer-history-isearch-search" function nil nil [138015 139920])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [139922 141319])
            ("minibuffer-history-isearch-wrap" function nil nil [141321 141895])
            ("minibuffer-history-isearch-push-state" function nil nil [141897 142228])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [142230 142442])
            ("add-hook" code nil nil [142446 142508])
            ("minibuffer-error-initialize" function nil nil [142510 142653])
            ("minibuffer-error-function" function (:arguments ("data" "context" "caller")) nil [142655 143475])
            ("define-obsolete-function-alias" code nil nil [143553 143615])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test 'eq :weakness t))
                nil [143617 144962])
            ("undo-in-region" variable nil nil [144964 145068])
            ("undo-no-redo" variable nil nil [145070 145180])
            ("pending-undo-list" variable nil nil [145182 145333])
            ("undo--last-change-was-undo-p" function (:arguments ("undo-list")) nil [145335 145518])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [145520 150708])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [150710 150991])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [150993 151255])
            ("undo-redo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [151257 152023])
            ("undo-in-progress" variable nil nil [152025 152156])
            ("undo-more" function (:arguments ("n")) nil [152158 152853])
            ("primitive-undo" function (:arguments ("n" "list")) nil [152855 159725])
            ("undo-copy-list" function (:arguments ("list")) nil [159750 159848])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [159850 159959])
            ("undo-start" function (:arguments ("beg" "end")) nil [159961 160549])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [163547 165841])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [165843 166882])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [166884 167426])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [167428 168193])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [169084 169389])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [169391 169863])
            ("undo-delta" function (:arguments ("undo-elt")) nil [170034 170367])
            ("defvar-local" code nil nil [170563 171286])
            ("undo-auto-current-boundary-timer" variable nil nil [171288 171463])
            ("undo-auto--this-command-amalgamating" variable nil nil [171465 171661])
            ("undo-auto--needs-boundary-p" function nil nil [171663 171803])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [171805 172109])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [172111 172745])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [172747 173416])
            ("undo-auto--boundary-timer" function nil nil [173418 173595])
            ("undo-auto--boundary-ensure-timer" function nil nil [173597 173850])
            ("undo-auto--undoably-changed-buffers" variable nil nil [173852 174089])
            ("undo-auto--add-boundary" function nil nil [174091 174362])
            ("undo-auto-amalgamate" function nil nil [174364 175814])
            ("undo-auto--undoable-change" function nil nil [175816 176489])
            ("undo-amalgamate-change-group" function (:arguments ("handle")) nil [176520 178109])
            ("undo-ask-before-discard" variable nil nil [178112 178878])
            ("defvar-local" code nil nil [178880 179162])
            ("setq" code nil nil [179447 179506])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [179507 181298])
            ("shell-command-buffer-name" variable
               (:constant-flag t
                :default-value "*Shell Command Output*")
                nil [181322 181433])
            ("shell-command-buffer-name-async" variable
               (:constant-flag t
                :default-value "*Async Shell Command*")
                nil [181435 181564])
            ("shell-command-history" variable nil nil [181566 181756])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [181758 181872])
            ("shell-command-default-error-buffer" variable nil nil [181874 182189])
            ("declare-function" code nil nil [182191 182257])
            ("declare-function" code nil nil [182258 182344])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [182346 183050])
            ("declare-function" code nil nil [183052 183103])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" #'completion-at-point) (define-key map [M-up] #'minibuffer-previous-completion) (define-key map [M-down] #'minibuffer-next-completion) (define-key map [134217741] #'minibuffer-choose-completion) map)) nil [183105 183546])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [183548 184184])
            ("async-shell-command-buffer" variable (:default-value 'confirm-new-buffer) nil [184186 185473])
            ("async-shell-command-display-buffer" variable (:default-value t) nil [185475 185801])
            ("async-shell-command-width" variable nil nil [185803 186214])
            ("shell-command-prompt-show-cwd" variable nil nil [186216 186443])
            ("shell-command-dont-erase-buffer" variable nil nil [186445 187617])
            ("shell-command-saved-pos" variable nil nil [187619 187973])
            ("shell-command-save-pos-or-erase" function (:arguments ("output-to-current-buffer")) nil [187975 189102])
            ("shell-command-set-point-after-cmd" function (:arguments ("buffer")) nil [189104 190646])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [190884 193059])
            ("declare-function" code nil nil [193061 193126])
            ("declare-function" code nil nil [193127 193181])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [193183 203727])
            ("shell-command--same-buffer-confirm" function (:arguments ("action")) nil [203729 204304])
            ("max-mini-window-lines" function (:arguments ("frame")) nil [204306 204742])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [204744 206953])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [207138 207424])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [207426 218589])
            ("shell-command-to-string" function (:arguments ("command")) nil [218591 218801])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [218803 220367])
            ("process-file-side-effects" variable (:default-value t) nil [220369 220796])
            ("process-file-return-signal-string" variable nil nil [220798 221442])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [221444 222505])
            ("tabulated-list-format" variable nil nil [222527 222557])
            ("tabulated-list-entries" variable nil nil [222558 222589])
            ("tabulated-list-sort-key" variable nil nil [222590 222622])
            ("declare-function" code nil nil [222623 222689])
            ("declare-function" code nil nil [222690 222796])
            ("process-menu-query-only" variable nil nil [222798 222834])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] 'process-menu-delete-process) map)) nil [222836 222966])
            ("define-derived-mode" code nil nil [222968 223645])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [223647 223952])
            ("declare-function" code nil nil [223954 223995])
            ("list-processes--refresh" function nil nil [223997 226367])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [226369 226466])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [226468 227431])
            ("setq" code nil nil [227456 227495])
            ("setq" code nil nil [227496 227532])
            ("internal-echo-keystrokes-prefix" function nil nil [227534 228143])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [228145 228350])
            ("prefix-command-update" function nil nil [228352 228519])
            ("prefix-command-preserve-state-hook" variable nil nil [228521 228633])
            ("prefix-command-preserve-state" function nil nil [228635 229128])
            ("reset-this-command-lengths" function nil nil [229130 229233])
            ("add-hook" code nil nil [229329 229425])
            ("universal-argument--description" function nil nil [229426 229885])
            ("add-hook" code nil nil [229887 229974])
            ("universal-argument--preserve" function nil nil [229975 230053])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus `(menu-item "" negative-argument :filter ,(lambda (cmd) (if (integerp prefix-arg) nil cmd))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] 'universal-argument-more) (define-key map [45] universal-argument-minus) (define-key map [48] 'digit-argument) (define-key map [49] 'digit-argument) (define-key map [50] 'digit-argument) (define-key map [51] 'digit-argument) (define-key map [52] 'digit-argument) (define-key map [53] 'digit-argument) (define-key map [54] 'digit-argument) (define-key map [55] 'digit-argument) (define-key map [56] 'digit-argument) (define-key map [57] 'digit-argument) (define-key map [kp-0] 'digit-argument) (define-key map [kp-1] 'digit-argument) (define-key map [kp-2] 'digit-argument) (define-key map [kp-3] 'digit-argument) (define-key map [kp-4] 'digit-argument) (define-key map [kp-5] 'digit-argument) (define-key map [kp-6] 'digit-argument) (define-key map [kp-7] 'digit-argument) (define-key map [kp-8] 'digit-argument) (define-key map [kp-9] 'digit-argument) (define-key map [kp-subtract] universal-argument-minus) map)) nil [230055 231671])
            ("universal-argument--mode" function nil nil [231673 231783])
            ("universal-argument" function (:user-visible-flag t) nil [231785 232527])
            ("universal-argument-more" function (:arguments ("arg")) nil [232529 233001])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [233003 233377])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [233379 234147])
            ("filter-buffer-substring-functions" variable nil nil [234151 234328])
            ("make-obsolete-variable" code nil nil [234329 234453])
            ("filter-buffer-substring-function" variable (:default-value nil) nil [234455 234861])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [234863 235724])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [235726 236364])
            ("interprogram-cut-function" variable (:default-value nil) nil [236408 236958])
            ("interprogram-paste-function" variable (:default-value nil) nil [236960 238399])
            ("kill-ring" variable nil nil [238440 238895])
            ("kill-ring-max" variable (:default-value 120) nil [238897 239050])
            ("kill-ring-yank-pointer" variable nil nil [239052 239153])
            ("save-interprogram-paste-before-kill" variable nil nil [239155 239913])
            ("kill-do-not-save-duplicates" variable nil nil [239915 240151])
            ("kill-transform-function" variable nil nil [240153 240562])
            ("kill-new" function (:arguments ("string" "replace")) nil [240564 243520])
            ("kill-append-merge-undo" variable nil nil [243701 243971])
            ("kill-append" function (:arguments ("string" "before-p")) nil [243973 244834])
            ("yank-pop-change-selection" variable nil nil [244836 245184])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [245186 247096])
            ("kill-read-only-ok" variable nil nil [247147 247283])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [247285 250386])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [250580 251674])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [251676 252926])
            ("copy-region-blink-delay" variable (:default-value 1) nil [252928 253248])
            ("copy-region-blink-predicate" variable (:default-value nil) nil [253250 253853])
            ("region-indistinguishable-p" function nil nil [253855 254145])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [254147 255961])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [255963 256783])
            ("bidi-directional-controls-chars" variable (:default-value "‪-‮⁦-⁩") nil [256785 256930])
            ("bidi-directional-non-controls-chars" variable (:default-value "^‪-‮⁦-⁩") nil [256932 257082])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [257084 258190])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [258192 259293])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [259295 261221])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [261223 262526])
            ("yank-handled-properties" variable (:default-value '((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property))) nil [262542 263367])
            ("yank-excluded-properties" variable (:default-value '(category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler)) nil [263440 263903])
            ("yank-transform-functions" variable nil nil [263905 264282])
            ("yank-window-start" variable nil nil [264284 264314])
            ("yank-undo-function" variable nil nil [264315 264646])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264648 266902])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [266904 269875])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [269877 270067])
            ("yank-in-context" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [270069 270781])
            ("yank-in-context--transform" function (:arguments ("string")) nil [270783 273093])
            ("read-from-kill-ring-history" variable nil nil [273095 273131])
            ("read-from-kill-ring" function (:arguments ("prompt")) nil [273132 275772])
            ("yank-from-kill-ring-rotate" variable (:default-value t) nil [275774 276024])
            ("yank-from-kill-ring" function
               (:user-visible-flag t
                :arguments ("string" "arg"))
                nil [276026 277731])
            ("kill-forward-chars" function (:arguments ("arg")) nil [277797 277942])
            ("kill-backward-chars" function (:arguments ("arg")) nil [277991 278137])
            ("backward-delete-char-untabify-method" variable (:default-value 'untabify) nil [278139 278614])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [278616 280162])
            ("char-uppercase-p" function (:arguments ("char")) nil [280164 280533])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char" "interactive"))
                nil [280535 281543])
            ("kill-whole-line" variable nil nil [281580 281811])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [281813 284027])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284029 285658])
            ("forward-visible-line" function (:arguments ("arg")) nil [285660 287413])
            ("end-of-visible-line" function nil nil [287415 287998])
            ("kill-current-buffer" function (:user-visible-flag t) nil [288000 288505])
            ("insert-buffer" function (:arguments ("buffer")) nil [288509 289062])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [289064 290080])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [290082 290740])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [290742 291427])
            ("define-error" code nil nil [291430 291499])
            ("activate-mark-hook" variable nil nil [291501 291713])
            ("deactivate-mark-hook" variable nil nil [291715 291793])
            ("mark" function (:arguments ("force")) nil [291795 292419])
            ("deactivate-mark" function (:arguments ("force")) nil [292454 294639])
            ("activate-mark" function (:arguments ("no-tmm")) nil [294641 295032])
            ("set-mark" function (:arguments ("pos")) nil [295034 296258])
            ("save-mark-and-excursion--save" function nil nil [296260 296409])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [296411 297361])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [297363 297818])
            ("use-empty-active-region" variable nil nil [297820 298319])
            ("use-region-beginning" function nil nil [298321 298448])
            ("use-region-end" function nil nil [298450 298563])
            ("use-region-noncontiguous-p" function nil nil [298565 298716])
            ("use-region-p" function nil nil [298718 299808])
            ("region-active-p" function nil nil [299810 300493])
            ("region-bounds" function nil nil [300495 300806])
            ("region-noncontiguous-p" function nil nil [300808 301059])
            ("redisplay--unhighlight-overlay-function" function (:arguments ("rol")) nil [301061 301208])
            ("redisplay-unhighlight-region-function" variable (:default-value nil) nil [301210 301353])
            ("redisplay--highlight-overlay-function" function (:arguments ("start" "end" "window" "rol" "face")) nil [301355 302381])
            ("redisplay-highlight-region-function" variable (:default-value nil) nil [302383 302763])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [302765 303569])
            ("cursor-face-highlight-nonselected-window" variable nil nil [303571 303815])
            ("redisplay--update-cursor-face-highlight" function (:arguments ("window")) nil [303817 304844])
            ("pre-redisplay-functions" variable (:default-value (list #'redisplay--update-region-highlight)) nil [304846 305162])
            ("define-minor-mode" code nil nil [305164 305545])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [305547 306012])
            ("when" code nil nil [306014 306263])
            ("defvar-local" code nil nil [306265 306364])
            ("put" code nil nil [306365 306400])
            ("mark-ring-max" variable (:default-value 16) nil [306402 306546])
            ("global-mark-ring" variable nil nil [306548 306632])
            ("global-mark-ring-max" variable (:default-value 16) nil [306634 306794])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [306796 307109])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [307111 307522])
            ("set-mark-command-repeat-pop" variable nil nil [307524 308040])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [308042 310361])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [310363 311819])
            ("pop-mark" function nil nil [311821 312167])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [312169 312934])
            ("shift-select-mode" variable (:default-value t) nil [312936 313795])
            ("handle-shift-selection" function nil nil [313797 315298])
            ("define-minor-mode" code nil nil [315300 316497])
            ("define-minor-mode" code nil nil [316499 316610])
            ("widen-automatically" variable (:default-value t) nil [316612 316946])
            ("non-essential" variable nil nil [316948 317346])
            ("pop-global-mark" function (:user-visible-flag t) nil [317348 318203])
            ("next-line-add-newlines" variable nil nil [318206 318380])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [318382 320578])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [320580 322285])
            ("track-eol" variable nil nil [322287 322625])
            ("goal-column" variable nil nil [322627 322894])
            ("make-variable-buffer-local" code nil nil [322895 322936])
            ("temporary-goal-column" variable nil nil [322938 323455])
            ("line-move-ignore-invisible" variable (:default-value t) nil [323457 324108])
            ("line-move-visual" variable (:default-value t) nil [324110 324685])
            ("declare-function" code nil nil [324722 324782])
            ("default-font-height" function nil nil [324784 325506])
            ("default-font-width" function nil nil [325508 326317])
            ("default-line-height" function nil nil [326319 326869])
            ("window-screen-lines" function nil nil [326871 327441])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [327488 331372])
            ("line-move" function (:arguments ("arg" "noerror" "_to-end" "try-vscroll")) nil [331696 334186])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [334334 337337])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [337491 342305])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward" "not-ipmh")) nil [342307 346023])
            ("line-move-to-column" function (:arguments ("col")) nil [346025 347607])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [347609 348964])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [348966 350964])
            ("put" code nil nil [351094 351128])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [351130 351992])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [352060 352624])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [352626 353315])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [353317 355466])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [355468 355837])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [355839 356218])
            ("visual-line" customgroup (:user-visible-flag t) nil [356220 356321])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] 'kill-visual-line) (define-key map [remap move-beginning-of-line] 'beginning-of-visual-line) (define-key map [remap move-end-of-line] 'end-of-visual-line) map)) nil [356323 356811])
            ("visual-line-fringe-indicators" variable (:default-value '(nil nil)) nil [356813 358000])
            ("visual-line--saved-state" variable nil nil [358002 358039])
            ("define-minor-mode" code nil nil [358041 359757])
            ("turn-on-visual-line-mode" function nil nil [359759 359817])
            ("define-globalized-minor-mode" code nil nil [359819 359917])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [359921 360435])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [360437 360881])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [360883 363031])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [363033 363810])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [363961 365222])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [365224 366228])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [366231 366887])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [366889 368277])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368279 368491])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368493 368684])
            ("current-word" function (:arguments ("strict" "really-word")) nil [368686 370294])
            ("fill-prefix" variable nil nil [370297 370504])
            ("make-variable-buffer-local" code nil nil [370505 370546])
            ("auto-fill-inhibit-regexp" variable nil nil [370548 370713])
            ("do-auto-fill" function nil nil [370715 374071])
            ("comment-line-break-function" variable (:default-value 'comment-indent-new-line) nil [374073 374398])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft" "force"))
                nil [374400 375720])
            ("internal-auto-fill" function nil nil [375722 375976])
            ("normal-auto-fill-function" variable (:default-value 'do-auto-fill) nil [375978 376134])
            ("put" code nil nil [376136 376198])
            ("put" code nil nil [376372 376424])
            ("define-minor-mode" code nil nil [376426 377009])
            ("auto-fill-function" function nil nil [377076 377183])
            ("turn-on-auto-fill" function nil nil [377185 377278])
            ("turn-off-auto-fill" function nil nil [377280 377376])
            ("custom-add-option" code nil nil [377378 377432])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [377434 378330])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [378333 379123])
            ("defvaralias" code nil nil [379125 379183])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [379185 380168])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [380170 380714])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [380716 380833])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [380834 380961])
            ("define-minor-mode" code nil nil [380963 381536])
            ("define-minor-mode" code nil nil [381538 382299])
            ("define-minor-mode" code nil nil [382301 382687])
            ("define-minor-mode" code nil nil [382689 382903])
            ("define-minor-mode" code nil nil [382905 383047])
            ("define-minor-mode" code nil nil [383049 384429])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [384432 384563])
            ("blink-matching-paren" variable (:default-value t) nil [384565 385818])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [385820 386236])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [386238 386563])
            ("blink-matching-delay" variable (:default-value 1) nil [386565 386701])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [386703 386971])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [386973 387958])
            ("blink-matching-check-function" variable (:default-value nil) nil [387960 388326])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol 'face 'show-paren-match) (delete-overlay ol) ol)) nil [388328 388538])
            ("blink-matching-open" function (:user-visible-flag t) nil [388540 391554])
            ("blink-paren-open-paren-line-string" function (:arguments ("pos")) nil [391556 393307])
            ("blink-paren-function" variable (:default-value 'blink-matching-open) nil [393309 393498])
            ("blink-paren-post-self-insert-function" function nil nil [393500 394147])
            ("put" code nil nil [394149 394207])
            ("add-hook" code nil nil [394209 394588])
            ("keyboard-quit" function (:user-visible-flag t) nil [394775 395493])
            ("buffer-quit-function" variable nil nil [395495 395745])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [395747 396573])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [396575 396970])
            ("read-mail-command" variable (:default-value 'rmail) nil [396974 397490])
            ("mail-user-agent" variable (:default-value 'message-user-agent) nil [397492 399103])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [399105 399430])
            ("rfc822-goto-eoh" function nil nil [399432 399848])
            ("mail-encode-mml" variable nil nil [399890 400029])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [400031 403020])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [403022 403413])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [403415 403803])
            ("set-variable-value-history" variable nil nil [403807 403992])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [403994 407306])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) (define-key map [mouse-2] 'choose-completion) (define-key map [follow-link] 'mouse-face) (define-key map [down-mouse-2] nil) (define-key map "" 'choose-completion) (define-key map "" 'delete-completion-window) (define-key map [remap keyboard-quit] #'delete-completion-window) (define-key map [left] 'previous-completion) (define-key map [right] 'next-completion) (define-key map [9] 'next-completion) (define-key map [backtab] 'previous-completion) (define-key map "z" 'kill-current-buffer) (define-key map "n" 'next-completion) (define-key map "p" 'previous-completion) (define-key map "\347\343" 'switch-to-minibuffer) map)) nil [407361 408280])
            ("put" code nil nil [408348 408396])
            ("completion-reference-buffer" variable nil nil [408398 408627])
            ("completion-no-auto-exit" variable nil nil [408629 408810])
            ("completion-base-position" variable nil nil [408812 409182])
            ("completion-base-affixes" variable nil nil [409184 409512])
            ("completion-use-base-affixes" variable nil nil [409514 409629])
            ("completion-list-insert-choice-function" variable (:default-value nil) nil [409631 409930])
            ("delete-completion-window" function (:user-visible-flag t) nil [409932 410306])
            ("completion-auto-wrap" variable (:default-value t) nil [410308 410644])
            ("completion-auto-select" variable nil nil [410646 411430])
            ("first-completion" function (:user-visible-flag t) nil [411432 411917])
            ("last-completion" function (:user-visible-flag t) nil [411919 412299])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [412301 412554])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [412556 415087])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event" "no-exit" "no-quit"))
                nil [415089 417725])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [417809 418647])
            ("choose-completion-string-functions" variable nil nil [418649 419394])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [419396 422510])
            ("define-derived-mode" code nil nil [422512 422911])
            ("completion-list-mode-finish" function nil nil [422913 423109])
            ("add-hook" code nil nil [423111 423173])
            ("completion-show-help" variable (:default-value t) nil [423237 423388])
            ("completion-setup-function" function nil nil [423519 425553])
            ("add-hook" code nil nil [425555 425616])
            ("switch-to-completions" function (:user-visible-flag t) nil [425618 426233])
            ("read-expression-switch-to-completions" function (:user-visible-flag t) nil [426235 426421])
            ("switch-to-minibuffer" function (:user-visible-flag t) nil [426423 426587])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [426749 426992])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [426993 427246])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [427247 427500])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [427501 427754])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [427755 428012])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [428013 428261])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [428263 429299])
            ("define-key" code nil nil [429431 429502])
            ("define-key" code nil nil [429503 429574])
            ("define-key" code nil nil [429575 429645])
            ("define-key" code nil nil [429646 429715])
            ("define-key" code nil nil [429716 429787])
            ("define-key" code nil nil [429788 429861])
            ("mapc" code nil nil [430151 430746])
            ("clone-buffer-hook" variable nil nil [430798 430899])
            ("clone-process" function (:arguments ("process" "newname")) nil [430901 432410])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [432513 435644])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [435647 437208])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [437211 437694])
            ("normal-erase-is-backspace" variable (:default-value 'maybe) nil [437742 439281])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [439283 440365])
            ("declare-function" code nil nil [440367 440435])
            ("define-minor-mode" code nil nil [440437 443709])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [443712 443835])
            ("define-minor-mode" code nil nil [443837 445154])
            ("define-minor-mode" code nil nil [445156 445766])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [445769 445952])
            ("define-derived-mode" code nil nil [445954 446155])
            ("messages-buffer" function nil nil [446157 446444])
            ("bad-packages-alist" variable (:constant-flag t) nil [447393 447837])
            ("make-obsolete-variable" code nil nil [447838 447893])
            ("bad-package-check" function (:arguments ("package")) nil [447895 448442])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [449095 451821])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [451887 452281])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [452283 452695])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [452697 453123])
            ("decoded-time" type
               (:members ("second" "minute" "hour" "day" "month" "year" "weekday" "dst" "zone")
                :type "struct")
                nil [453166 454330])
            ("put" code nil nil [454503 454849])
            ("get-scratch-buffer-create" function nil nil [454851 455385])
            ("scratch-buffer" function (:user-visible-flag t) nil [455387 455568])
            ("kill-buffer--possibly-save" function (:arguments ("buffer")) nil [455570 456200])
            ("string-empty-p" function (:arguments ("string")) nil [456202 456293])
            ("read-signal-name" function nil nil [456295 456795])
            ("lax-plist-get" function (:arguments ("plist" "prop")) nil [456797 456970])
            ("lax-plist-put" function (:arguments ("plist" "prop" "val")) nil [456972 457153])
            ("simple" package nil nil [457157 457174]))          
      :file "simple.el.gz"
      :pointmax 457200
      :fsize 121412
      :lastmodtime '(25778 61552 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table-4b8deb8e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("text-mode" include nil nil [1044 1064])
            ("cl-lib" include nil nil [1084 1101])
            ("subr-x" include nil nil [1122 1139])
            ("case-replace" variable (:default-value t) nil [1142 1276])
            ("replace-char-fold" variable nil nil [1278 1612])
            ("replace-lax-whitespace" variable nil nil [1614 1921])
            ("replace-regexp-lax-whitespace" variable nil nil [1923 2244])
            ("query-replace-history" variable nil nil [2246 2418])
            ("query-replace-defaults" variable nil nil [2420 2619])
            ("query-replace-from-to-separator" variable (:default-value " → ") nil [2621 2941])
            ("query-replace-from-history-variable" variable (:default-value 'query-replace-history) nil [2943 3289])
            ("query-replace-to-history-variable" variable (:default-value 'query-replace-history) nil [3291 3626])
            ("query-replace-skip-read-only" variable nil nil [3628 3798])
            ("query-replace-show-replacement" variable (:default-value t) nil [3800 4020])
            ("query-replace-highlight" variable (:default-value t) nil [4022 4160])
            ("query-replace-highlight-submatches" variable (:default-value t) nil [4162 4747])
            ("query-replace-lazy-highlight" variable (:default-value t) nil [4749 5118])
            ("query-replace" variable
               (:default-value '((t (:inherit isearch)))
                :type "face")
                nil [5120 5261])
            ("replace-count" variable nil nil [5263 5349])
            ("query-replace-descr" function (:arguments ("string")) nil [5351 5856])
            ("query-replace--split-string" function (:arguments ("string")) nil [5858 6363])
            ("query-replace-read-from-default" variable nil nil [6365 6485])
            ("query-replace-read-from-regexp-default" variable nil nil [6487 6610])
            ("query-replace-read-from-suggestions" function nil nil [6612 7374])
            ("query-replace-read-from" function (:arguments ("prompt" "regexp-flag")) nil [7376 12040])
            ("query-replace-compile-replacement" function (:arguments ("to" "regexp-flag")) nil [12042 13434])
            ("query-replace-read-to" function (:arguments ("from" "prompt" "regexp-flag")) nil [13437 14054])
            ("query-replace-read-args" function (:arguments ("prompt" "regexp-flag" "noerror")) nil [14056 16090])
            ("query-replace" function (:arguments ("from-string" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p")) nil [16092 19470])
            ("define-key" code nil nil [19472 19511])
            ("query-replace-regexp" function (:arguments ("regexp" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p")) nil [19513 23999])
            ("define-key" code nil nil [24001 24051])
            ("map-query-replace-regexp" function (:arguments ("regexp" "to-strings" "n" "start" "end" "region-noncontiguous-p")) nil [24053 26612])
            ("replace-string" function (:arguments ("from-string" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p")) nil [26614 29348])
            ("replace-regexp" function (:arguments ("regexp" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p")) nil [29350 32836])
            ("regexp-history" variable nil nil [32840 33028])
            ("occur-highlight-overlays" variable nil nil [33030 33125])
            ("occur-collect-regexp-history" variable (:default-value '("\\1")) nil [33127 33226])
            ("read-regexp-defaults-function" variable nil nil [33228 34201])
            ("read-regexp-suggestions" function nil nil [34203 34972])
            ("defvar-keymap" code nil nil [34974 35077])
            ("read-regexp--case-fold" variable nil nil [35079 35114])
            ("read-regexp-toggle-case-fold" function nil nil [35116 35531])
            ("read-regexp" function (:arguments ("prompt" "defaults" "history")) nil [35533 39269])
            ("read-regexp-case-fold-search" function (:arguments ("regexp")) nil [39271 39599])
            ("defalias" code nil nil [39601 39650])
            ("defalias" code nil nil [39651 39697])
            ("defalias" code nil nil [39698 39733])
            ("keep-lines-read-args" function (:arguments ("prompt")) nil [39735 39921])
            ("keep-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [39923 42669])
            ("flush-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [42671 45133])
            ("kill-matching-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [45135 47611])
            ("copy-matching-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [47613 49822])
            ("how-many" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [49824 51741])
            ("easy-menu-define" code nil nil [51745 53456])
            ("occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] 'occur-mode-mouse-goto) (define-key map "" 'occur-mode-goto-occurrence) (define-key map "e" 'occur-edit-mode) (define-key map "" 'occur-mode-goto-occurrence) (define-key map "o" 'occur-mode-goto-occurrence-other-window) (define-key map "" 'occur-mode-display-occurrence) (define-key map "n" 'next-error-no-select) (define-key map "p" 'previous-error-no-select) (define-key map "l" 'recenter-current-error) (define-key map "\356" 'occur-next) (define-key map "\360" 'occur-prev) (define-key map "r" 'occur-rename-buffer) (define-key map "c" 'clone-buffer) (define-key map "" 'next-error-follow-minor-mode) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [53458 54422])
            ("defvar-local" code nil nil [54424 54561])
            ("put" code nil nil [54562 54610])
            ("occur-mode-hook" variable (:default-value '(turn-on-font-lock)) nil [54612 54732])
            ("occur-hook" variable nil nil [54734 54843])
            ("occur-mode-find-occurrence-hook" variable nil nil [54845 55137])
            ("occur--garbage-collect-revert-args" function nil nil [55139 55327])
            ("put" code nil nil [55329 55367])
            ("define-derived-mode" code nil nil [55368 55892])
            ("occur-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map [mouse-2] 'occur-mode-mouse-goto) (define-key map "" 'occur-cease-edit) (define-key map "" 'occur-mode-display-occurrence) (define-key map "" 'next-error-follow-minor-mode) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [55917 56369])
            ("define-derived-mode" code nil nil [56371 56833])
            ("occur-cease-edit" function (:user-visible-flag t) nil [56835 57026])
            ("occur--targets-start" function (:arguments ("targets")) nil [57028 57275])
            ("occur-after-change-function" function (:arguments ("beg" "end" "length")) nil [57277 60200])
            ("occur-revert-function" function (:arguments ("_ignore1" "_ignore2")) nil [60204 60377])
            ("occur-mode-find-occurrence" function nil nil [60410 60564])
            ("occur-mode--find-occurrences" function nil nil [60566 61071])
            ("occur--set-arrow" function nil nil [61073 61654])
            ("defalias" code nil nil [61656 61717])
            ("occur-mode-goto-occurrence" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [61718 62790])
            ("occur-mode-goto-occurrence-other-window" function (:user-visible-flag t) nil [62792 63229])
            ("occur-goto-locus-delete-o" function nil nil [63231 63588])
            ("occur--highlight-occurrences" function (:arguments ("targets")) nil [63635 65204])
            ("occur-mode-display-occurrence" function (:user-visible-flag t) nil [65206 65988])
            ("occur-find-match" function (:arguments ("n" "search" "message")) nil [65990 66346])
            ("occur-next" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [66348 66539])
            ("occur-prev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [66541 66743])
            ("occur-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [66745 67482])
            ("match" variable
               (:default-value '((((class color) (min-colors 88) (background light)) :background "khaki1") (((class color) (min-colors 88) (background dark)) :background "RoyalBlue3") (((class color) (min-colors 8) (background light)) :background "yellow" :foreground "black") (((class color) (min-colors 8) (background dark)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray"))
                :type "face")
                nil [67485 68059])
            ("list-matching-lines-default-context-lines" variable nil nil [68061 68378])
            ("defalias" code nil nil [68380 68418])
            ("list-matching-lines-face" variable (:default-value 'match) nil [68420 68638])
            ("list-matching-lines-buffer-name-face" variable (:default-value 'underline) nil [68640 68868])
            ("list-matching-lines-current-line-face" variable (:default-value 'lazy-highlight) nil [68870 69058])
            ("list-matching-lines-jump-to-current-line" variable nil nil [69060 69466])
            ("list-matching-lines-prefix-face" variable (:default-value 'shadow) nil [69468 69999])
            ("occur-excluded-properties" variable (:default-value '(read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link)) nil [70001 70419])
            ("occur-read-primary-args" function nil nil [70421 71284])
            ("occur-rename-buffer" function
               (:user-visible-flag t
                :arguments ("unique-p" "interactive-p"))
                nil [71286 72441])
            ("occur--final-pos" variable nil nil [72494 72523])
            ("occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines" "region"))
                nil [72525 75698])
            ("ido-ignore-item-temp-list" variable nil nil [75700 75734])
            ("multi-occur--prompt" function nil nil [75736 76166])
            ("multi-occur" function
               (:user-visible-flag t
                :arguments ("bufs" "regexp" "nlines"))
                nil [76168 77090])
            ("multi-occur-in-matching-buffers" function
               (:user-visible-flag t
                :arguments ("bufregexp" "regexp" "allbufs"))
                nil [77092 78127])
            ("occur-regexp-descr" function (:arguments ("regexp")) nil [78129 78542])
            ("occur-1" function (:arguments ("regexp" "nlines" "bufs" "buf-name")) nil [78544 82865])
            ("occur-engine" function (:arguments ("regexp" "buffers" "out-buf" "nlines" "case-fold" "title-face" "prefix-face" "match-face" "keep-props")) nil [82867 94401])
            ("occur-engine-line" function (:arguments ("beg" "end" "keep-props")) nil [94403 94772])
            ("occur-engine-add-prefix" function (:arguments ("lines" "prefix-face")) nil [94774 95023])
            ("occur-accumulate-lines" function (:arguments ("count" "keep-props" "pt")) nil [95025 95545])
            ("occur-context-lines" function (:arguments ("out-line" "nlines" "keep-props" "begpt" "endpt" "curr-line" "prev-line" "prev-after-lines" "prefix-face" "orig-line" "multi-occur-p")) nil [95958 98597])
            ("occur-word-at-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [98599 98806])
            ("occur-symbol-at-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [98808 99027])
            ("occur-context-menu" function (:arguments ("menu" "click")) nil [99029 99688])
            ("query-replace-help" variable
               (:constant-flag t
                :default-value "Type \\`SPC' or \\`y' to replace one match, Delete or \\`n' to skip to next,
\\`RET' or \\`q' to exit, Period to replace one match and exit,
\\`,' to replace but not move point immediately,
\\`C-r' to enter recursive edit (\\[exit-recursive-edit] to get out again),
\\`C-w' to delete match and recursive edit,
\\`C-l' to clear the screen, redisplay, and offer same replacement again,
\\`!' to replace all remaining matches in this buffer with no more questions,
\\`^' to move point back to previous match,
\\`u' to undo previous replacement,
\\`U' to undo all replacements,
\\`e' to edit the replacement string.
\\`E' to edit the replacement string with exact case.
In multi-buffer replacements type \\`Y' to replace all remaining
matches in all remaining buffers with no more questions,
\\`N' to skip to the next buffer without replacing remaining matches
in the current buffer.")
                nil [99799 100755])
            ("query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " 'act) (define-key map "" 'skip) (define-key map [delete] 'skip) (define-key map [backspace] 'skip) (define-key map "y" 'act) (define-key map "n" 'skip) (define-key map "Y" 'act) (define-key map "N" 'skip) (define-key map "e" 'edit-replacement) (define-key map "E" 'edit-replacement-exact-case) (define-key map "," 'act-and-show) (define-key map "q" 'exit) (define-key map "" 'exit) (define-key map [return] 'exit) (define-key map "." 'act-and-exit) (define-key map "" 'edit) (define-key map "" 'delete-and-edit) (define-key map "" 'recenter) (define-key map "!" 'automatic) (define-key map "^" 'backup) (define-key map "u" 'undo) (define-key map "U" 'undo-all) (define-key map "" 'help) (define-key map [f1] 'help) (define-key map [help] 'help) (define-key map "?" 'help) (define-key map "" 'quit) (define-key map "" 'quit) (define-key map "" 'scroll-up) (define-key map "\366" 'scroll-down) (define-key map [next] 'scroll-up) (define-key map [prior] 'scroll-down) (define-key map [134217750] 'scroll-other-window) (define-key map [M-next] 'scroll-other-window) (define-key map [167772182] 'scroll-other-window-down) (define-key map [M-prior] 'scroll-other-window-down) (define-key map [escape] 'exit-prefix) map)) nil [100757 102921])
            ("multi-query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "Y" 'automatic-all) (define-key map "N" 'exit-current) map)) nil [102923 103583])
            ("replace-match-string-symbols" function (:arguments ("n")) nil [103585 104746])
            ("replace-eval-replacement" function (:arguments ("expression" "count")) nil [104748 105098])
            ("replace-quote" function (:arguments ("replacement")) nil [105100 105526])
            ("replace-loop-through-replacements" function (:arguments ("data" "count")) nil [105528 105951])
            ("replace-match-data" function (:arguments ("integers" "reuse" "new")) nil [105953 106356])
            ("replace-match-maybe-edit" function (:arguments ("newtext" "fixedcase" "literal" "noedit" "match-data" "backward")) nil [106358 108199])
            ("replace-update-post-hook" variable nil nil [108201 108317])
            ("replace-search-function" variable nil nil [108319 108534])
            ("replace-re-search-function" variable nil nil [108536 108793])
            ("replace-regexp-function" variable nil nil [108795 109289])
            ("replace-search" function (:arguments ("search-string" "limit" "regexp-flag" "delimited-flag" "case-fold" "backward")) nil [109291 110884])
            ("replace-overlay" variable nil nil [110886 110914])
            ("replace-submatches-overlays" variable nil nil [110915 110955])
            ("replace-highlight" function (:arguments ("match-beg" "match-end" "range-beg" "range-end" "search-string" "regexp-flag" "delimited-flag" "case-fold" "backward")) nil [110957 112991])
            ("replace-dehighlight" function nil nil [112993 113472])
            ("replace--push-stack" function (:arguments ("replaced" "search-str" "next-replace" "stack")) nil [113547 114352])
            ("replace--region-filter" function (:arguments ("bounds")) nil [114354 115109])
            ("perform-replace" function (:arguments ("from-string" "replacements" "query-flag" "regexp-flag" "delimited-flag" "repeat-count" "map" "start" "end" "backward" "region-noncontiguous-p")) nil [115111 138852])
            ("replace" package nil nil [138854 138872]))          
      :file "replace.el.gz"
      :pointmax 138899
      :fsize 32479
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 1139 . 1140) (symbol 1104 . 1121) (open-paren 1103 . 1104) (close-paren 1101 . 1102) (symbol 1066 . 1083) (open-paren 1065 . 1066)))
    (semanticdb-table "semanticdb-table-4f86ed98"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value '((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5)))
                nil [1194 3402])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3420 4615])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4822 5488])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5823 6295])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6752 7062])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7064 9283])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9285 9657])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9659 10623])
            ("decompose-string" function (:arguments ("string")) nil [10625 10797])
            ("compose-chars" function (:arguments ("args")) nil [10799 11675])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11677 13659])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13663 15115])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15117 16028])
            ("global-set-key" code nil nil [16030 16087])
            ("lgstring-header" function (:arguments ("gstring")) nil [16208 16261])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16262 16333])
            ("lgstring-font" function (:arguments ("gstring")) nil [16334 16403])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16404 16480])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16481 16559])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16560 16615])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16616 16675])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16676 16736])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16737 16799])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16800 16876])
            ("lglyph-from" function (:arguments ("glyph")) nil [16878 16923])
            ("lglyph-to" function (:arguments ("glyph")) nil [16924 16967])
            ("lglyph-char" function (:arguments ("glyph")) nil [16968 17013])
            ("lglyph-code" function (:arguments ("glyph")) nil [17014 17059])
            ("lglyph-width" function (:arguments ("glyph")) nil [17060 17106])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17107 17156])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17157 17206])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17207 17254])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17255 17303])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17304 17355])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17357 17450])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17451 17510])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17511 17570])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17571 17633])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17634 17767])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17806 17858])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17905 18404])
            ("lgstring-remove-glyph" function (:arguments ("gstring" "idx")) nil [18443 18758])
            ("lgstring-glyph-boundary" function (:arguments ("gstring" "startpos" "endpos")) nil [18760 19465])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [19467 20040])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [20042 21256])
            ("compose-gstring-for-graphic" function (:arguments ("gstring" "direction")) nil [21258 27570])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring" "direction")) nil [27572 29329])
            ("when" code nil nil [29376 30335])
            ("compose-gstring-for-terminal" function (:arguments ("gstring" "_direction")) nil [30337 32329])
            ("compose-gstring-for-variation-glyph" function (:arguments ("gstring" "_direction")) nil [32331 33046])
            ("let" code nil nil [33494 33707])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string" "direction")) nil [33709 34738])
            ("put" code nil nil [34740 34787])
            ("make-variable-buffer-local" code nil nil [34789 34844])
            ("setq-default" code nil nil [34845 34905])
            ("define-minor-mode" code nil nil [34922 35356])
            ("make-variable-buffer-local" code nil nil [35408 35459])
            ("define-minor-mode" code nil nil [35476 35713])
            ("defalias" code nil nil [35715 35773])
            ("composite" package nil nil [35775 35795]))          
      :file "composite.el.gz"
      :pointmax 35824
      :fsize 10069
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-468cbc72"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1132 1168])
            ("command-line-processed" variable nil nil [1170 1255])
            ("initialization" customgroup (:user-visible-flag t) nil [1257 1338])
            ("initial-buffer-choice" variable nil nil [1340 2286])
            ("defvaralias" code nil nil [2288 2348])
            ("defvaralias" code nil nil [2349 2411])
            ("inhibit-startup-screen" variable nil nil [2413 2641])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2643 2693])
            ("inhibit-startup-echo-area-message" variable nil nil [2993 4022])
            ("inhibit-default-init" variable nil nil [4024 4129])
            ("inhibit-startup-buffer-menu" variable nil nil [4131 4270])
            ("command-switch-alist" variable nil nil [4272 4540])
            ("with-no-warnings" code nil nil [4542 4799])
            ("internal-make-var-non-special" code nil nil [4800 4837])
            ("command-line-args-left" variable nil nil [4839 4923])
            ("with-no-warnings" code nil nil [4925 5000])
            ("internal-make-var-non-special" code nil nil [5001 5038])
            ("command-line-functions" variable nil nil [5040 5494])
            ("command-line-default-directory" variable nil nil [5496 5664])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value '(("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id)))
                nil [5772 8956])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value '(("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width)))
                nil [8958 11910])
            ("before-init-hook" variable nil nil [11913 12023])
            ("after-init-hook" variable nil nil [12025 12441])
            ("emacs-startup-hook" variable nil nil [12443 12550])
            ("term-setup-hook" variable nil nil [12552 12867])
            ("make-obsolete-variable" code nil nil [12869 12985])
            ("inhibit-startup-hooks" variable nil nil [12987 13186])
            ("early-init-file" variable nil nil [13188 13412])
            ("keyboard-type" variable nil nil [13414 13635])
            ("make-obsolete-variable" code nil nil [13636 13686])
            ("internal-make-var-non-special" code nil nil [13687 13733])
            ("window-setup-hook" variable nil nil [13735 14182])
            ("initial-major-mode" variable (:default-value 'lisp-interaction-mode) nil [14184 14328])
            ("init-file-user" variable nil nil [14330 14977])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14979 16233])
            ("make-obsolete-variable" code nil nil [16235 16307])
            ("mail-host-address" variable nil nil [16309 16507])
            ("user-mail-address" variable (:default-value (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name))))) nil [16509 16931])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type 'ms-dos) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16933 17726])
            ("emacs-basic-display" variable nil nil [17728 17760])
            ("init-file-debug" variable nil nil [17762 17790])
            ("init-file-had-error" variable nil nil [17792 17888])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17890 17942])
            ("no-blinking-cursor" variable nil nil [17944 17975])
            ("pure-space-overflow" variable nil nil [17977 18062])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [18064 18240])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18242 18478])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18480 20120])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [20122 20891])
            ("startup--xdg-config-default" variable
               (:constant-flag t
                :default-value "~/.config/emacs/")
                nil [20954 21011])
            ("startup--xdg-config-home-emacs" variable nil nil [21065 21104])
            ("startup--xdg-or-homedot" function (:arguments ("xdg-dir" "user-name")) nil [21362 22196])
            ("comp--compilable" variable nil nil [22198 22223])
            ("comp--delayed-sources" variable nil nil [22224 22254])
            ("startup--require-comp-safely" function nil nil [22255 22632])
            ("declare-function" code nil nil [22634 22746])
            ("startup--honor-delayed-native-compilations" function nil nil [22747 22995])
            ("native-comp-eln-load-path" variable nil nil [22997 23031])
            ("native-comp-jit-compilation" variable nil nil [23032 23068])
            ("native-comp-enable-subr-trampolines" variable nil nil [23069 23113])
            ("startup--original-eln-load-path" variable nil nil [23115 23210])
            ("startup-redirect-eln-cache" function (:arguments ("cache-directory")) nil [23212 24018])
            ("startup--update-eln-cache" function nil nil [24020 24395])
            ("normal-top-level" function nil nil [24397 36524])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value '(("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color")))
                nil [36632 36858])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [36887 36977])
            ("cl-defgeneric" code nil nil [36979 37320])
            ("cl-defmethod" code nil nil [37321 37417])
            ("cl-defgeneric" code nil nil [37419 37757])
            ("tty-handle-args" function (:arguments ("args")) nil [37759 40520])
            ("declare-function" code nil nil [40522 40616])
            ("declare-function" code nil nil [40617 40676])
            ("declare-function" code nil nil [40677 40721])
            ("server-name" variable nil nil [40723 40743])
            ("server-process" variable nil nil [40744 40767])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [40769 43744])
            ("startup--load-user-init-file" function (:arguments ("filename-function" "alternate-filename-function" "load-defaults")) nil [43746 48981])
            ("lisp-directory" variable nil nil [48983 49083])
            ("command-line" function nil nil [49085 70309])
            ("x-apply-session-resources" function nil nil [70311 71629])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [71631 72014])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value `((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link ,(lambda nil (if (eq system-type 'gnu/linux) `("GNU/Linux" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html") `("GNU" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/gnu/thegnuproject.html"))) "Browse https://www.gnu.org/gnu/thegnuproject.html"))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" ,(lambda (_button) (help-with-tutorial))) "	Learn basic keystroke commands" ,(lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment 'tutorial) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")")))) "
" :link ("Emacs Guided Tour" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" ,(lambda (_button) (info-emacs-manual))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" ,(lambda (_button) (describe-no-warranty))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" ,(lambda (_button) (describe-copying))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" ,(lambda (_button) (view-order-manuals))) "	Purchasing printed copies of manuals
" "
")))
                nil [72189 75297])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value `((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", a text editor and more.
It's a component of the " :link ,(lambda nil (if (eq system-type 'gnu/linux) `("GNU/Linux" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html") `("GNU" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (describe-gnu-project))) "Display info on the GNU project."))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" ,(lambda nil (with-temp-buffer (insert (emacs-version)) (fill-region (point-min) (point-max)) (buffer-string))) "
" :face (variable-pitch (:height 0.8)) ,(lambda nil emacs-copyright) "

" :face variable-pitch :link ("Authors" ,(lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min)))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" ,(lambda (_button) (info "(emacs)Contributing"))) "	How to report bugs and contribute improvements to Emacs
" "
" :link ("GNU and Freedom" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" ,(lambda (_button) (describe-no-warranty))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" ,(lambda (_button) (describe-copying))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" ,(lambda (_button) (describe-distribution))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" ,(lambda (_button) (view-order-manuals))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" ,(lambda (_button) (help-with-tutorial))) "	Learn basic Emacs keystroke commands" ,(lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment 'tutorial) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")")))) "
" :link ("Emacs Guided Tour" ,(lambda (_button) (let ((browse-url-browser-function 'eww-browse-url)) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org
" :link ("Emacs Manual" ,(lambda (_button) (info-emacs-manual))) "	Display the Emacs manual in Info mode")))
                nil [75299 79185])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [79188 79374])
            ("fancy-splash-image" variable nil nil [79376 79543])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" 'scroll-down-command) (define-key map [33554464] 'scroll-down-command) (define-key map " " 'scroll-up-command) (define-key map "q" 'exit-splash-screen) map)) nil [79546 79918])
            ("fancy-splash-insert" function (:arguments ("args")) nil [79989 81385])
            ("declare-function" code nil nil [81387 81456])
            ("fancy-splash-image-file" function nil nil [81458 81937])
            ("fancy-splash-head" function nil nil [81939 83717])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [83719 87080])
            ("exit-splash-screen" function (:user-visible-flag t) nil [87082 87191])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [87193 88561])
            ("fancy-about-screen" function nil nil [88563 89338])
            ("fancy-splash-frame" function nil nil [89340 90076])
            ("use-fancy-splash-screens-p" function nil nil [90078 90937])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [90939 93429])
            ("normal-mouse-startup-screen" function nil nil [93431 95349])
            ("normal-no-mouse-startup-screen" function nil nil [95351 99591])
            ("normal-about-screen" function nil nil [99593 101180])
            ("startup-echo-area-message" function nil nil [101182 101379])
            ("display-startup-echo-area-message" function nil nil [101381 102645])
            ("display-startup-screen" function (:arguments ("concise")) nil [102647 103099])
            ("display-about-screen" function (:user-visible-flag t) nil [103101 103347])
            ("defalias" code nil nil [103349 103394])
            ("defalias" code nil nil [103395 103452])
            ("declare-function" code nil nil [103512 103559])
            ("command-line-1" function (:arguments ("args-left")) nil [103561 123555])
            ("command-line--load-script" function (:arguments ("file")) nil [123557 124000])
            ("command-line--eval-script" function (:arguments ("file")) nil [124002 124497])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [124499 125231]))          
      :file "startup.el.gz"
      :pointmax 125258
      :fsize 33443
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4696e3fa"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1277 1294])
            ("custom-define-hook" variable nil nil [1296 1445])
            ("custom-dont-initialize" variable nil nil [1447 1630])
            ("custom-current-group-alist" variable nil nil [1632 1745])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1775 2434])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2436 3027])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [3029 4510])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [4512 5320])
            ("custom-delayed-init-variables" variable nil nil [5322 5505])
            ("custom-initialize-delay" function (:arguments ("symbol" "value")) nil [5507 6508])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [6510 10253])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [10255 17141])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [17169 20124])
            ("custom-current-group" function nil nil [20153 20242])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [20244 21290])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [21292 22707])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [22709 23055])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [23057 23459])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [23478 24108])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [24110 24821])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [24823 25576])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [25578 26029])
            ("defalias" code nil nil [26030 26086])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [26088 26324])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [26326 26476])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [26478 26652])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [26654 26950])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [26952 27238])
            ("custom-variable-p" function (:arguments ("variable")) nil [27240 27673])
            ("custom--standard-value" function (:arguments ("variable")) nil [27675 27807])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [27809 28104])
            ("custom-load-recursion" variable nil nil [28224 28300])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [28302 29515])
            ("custom-local-buffer" variable nil nil [29518 29838])
            ("put" code nil nil [29839 29884])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [29886 30282])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [30284 30708])
            ("custom-quote" function (:arguments ("sexp")) nil [30710 31056])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [31058 32187])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [32189 33459])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [33461 34458])
            ("custom-known-themes" variable (:default-value '(user changed)) nil [36285 36673])
            ("custom-theme-p" function (:arguments ("theme")) nil [36675 36784])
            ("custom-check-theme" function (:arguments ("theme")) nil [36786 36964])
            ("custom--should-apply-setting" function (:arguments ("theme")) nil [36966 37144])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [37146 40156])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [40158 40928])
            ("custom-set-variables" function (:arguments ("args")) nil [40931 41543])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [41545 44434])
            ("custom--sort-vars-table" variable nil nil [44436 44468])
            ("custom--sort-vars-result" variable nil nil [44469 44502])
            ("custom--sort-vars" function (:arguments ("vars")) nil [44504 46036])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [46038 46622])
            ("deftheme" function (:arguments ("theme" "doc" "properties")) nil [46996 47788])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "properties")) nil [47790 48548])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [48550 49055])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [49079 49466])
            ("custom-theme-load-path" variable (:default-value (list 'custom-theme-directory t)) nil [49468 50226])
            ("custom--inhibit-theme-enable" variable (:default-value 'apply-only-user) nil [50228 50633])
            ("provide-theme" function (:arguments ("theme")) nil [50635 51033])
            ("require-theme" function (:arguments ("feature" "noerror")) nil [51035 52227])
            ("custom-safe-themes" variable (:default-value '(default)) nil [52229 52849])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [52851 56727])
            ("theme-list-variants" function (:arguments ("theme" "list")) nil [56729 57343])
            ("theme-choose-variant" function
               (:user-visible-flag t
                :arguments ("no-confirm" "no-enable"))
                nil [57345 59016])
            ("defalias" code nil nil [59018 59065])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [59067 59817])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [59819 60069])
            ("custom-available-themes" function nil nil [60071 61187])
            ("custom-theme--load-path" function nil nil [61189 61687])
            ("enable-theme-functions" variable nil nil [61734 62003])
            ("disable-theme-functions" variable nil nil [62005 62277])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [62279 65281])
            ("custom-enabled-themes" variable nil nil [65283 66690])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [66692 66810])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [66812 69274])
            ("declare-function" code nil nil [69316 69410])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [69412 69772])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [69774 70167])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [70169 71151])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [71153 71573])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [71790 72161])
            ("custom-reset-variables" function (:arguments ("args")) nil [72163 72539])
            ("custom-add-choice" function (:arguments ("variable" "choice")) nil [72541 73142])
            ("custom--add-custom-loads" function (:arguments ("symbol" "loads")) nil [73144 73372])
            ("custom" package nil nil [73374 73391]))          
      :file "custom.el.gz"
      :pointmax 73417
      :fsize 20932
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-468ea498"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336 1272])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1273 1360])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1361 1466])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1467 1566])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1567 1692])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1693 2060])
            ("register-definition-prefixes" code nil nil [2061 2107])
            ("put" code nil nil [2155 2225])
            ("add-log-current-defun-function" variable nil nil [2226 2481])
            ("custom-autoload" code nil nil [2482 2543])
            ("add-log-full-name" variable nil nil [2544 2709])
            ("custom-autoload" code nil nil [2710 2758])
            ("add-log-mailing-address" variable nil nil [2759 3120])
            ("custom-autoload" code nil nil [3121 3175])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [3176 3258])
            ("find-change-log" function (:prototype-flag t) nil [3259 4338])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4339 5946])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5947 6206])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6207 6628])
            ("add-log-current-defun" function (:prototype-flag t) nil [6629 7135])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7136 7532])
            ("register-definition-prefixes" code nil nil [7533 7601])
            ("ad-redefinition-action" variable (:default-value 'warn) nil [7656 8310])
            ("custom-autoload" code nil nil [8311 8363])
            ("ad-default-compilation-action" variable (:default-value 'maybe) nil [8364 8913])
            ("custom-autoload" code nil nil [8914 8973])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8974 9095])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [9096 9218])
            ("ad-add-advice" function (:prototype-flag t) nil [9219 10272])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10273 11349])
            ("defadvice" function (:prototype-flag t) nil [11350 13524])
            ("function-put" code nil nil [13525 13568])
            ("function-put" code nil nil [13569 13618])
            ("register-definition-prefixes" code nil nil [13619 13667])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13710 14991])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [14992 16790])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16791 17162])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17163 17586])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17587 18042])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18043 18157])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18158 18352])
            ("register-definition-prefixes" code nil nil [18353 18403])
            ("push" code nil nil [18447 18504])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [18505 18679])
            ("allout-setup" function (:prototype-flag t) nil [18680 18989])
            ("allout-auto-activation" variable nil nil [18990 19656])
            ("custom-autoload" code nil nil [19657 19711])
            ("put" code nil nil [19712 19777])
            ("put" code nil nil [19778 19870])
            ("put" code nil nil [19871 19928])
            ("put" code nil nil [19929 19987])
            ("put" code nil nil [19988 20047])
            ("put" code nil nil [20048 20113])
            ("put" code nil nil [20114 20185])
            ("put" code nil nil [20186 20327])
            ("put" code nil nil [20328 20392])
            ("put" code nil nil [20393 20455])
            ("put" code nil nil [20456 20525])
            ("put" code nil nil [20526 20596])
            ("put" code nil nil [20597 20663])
            ("put" code nil nil [20664 20765])
            ("allout-mode-p" function (:prototype-flag t) nil [20766 20865])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20866 34170])
            ("define-obsolete-function-alias" code nil nil [34171 34254])
            ("define-obsolete-function-alias" code nil nil [34255 34339])
            ("allout-outlinify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [34340 34617])
            ("register-definition-prefixes" code nil nil [34618 34670])
            ("push" code nil nil [34722 34787])
            ("allout-widgets-setup" function (:prototype-flag t) nil [34788 35004])
            ("allout-widgets-auto-activation" variable nil nil [35005 35540])
            ("custom-autoload" code nil nil [35541 35611])
            ("put" code nil nil [35612 35678])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35679 37068])
            ("register-definition-prefixes" code nil nil [37069 37129])
            ("register-definition-prefixes" code nil nil [37189 37254])
            ("define-obsolete-function-alias" code nil nil [37304 37387])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37388 37778])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [37779 37856])
            ("register-definition-prefixes" code nil nil [37857 37950])
            ("animate-string" function (:prototype-flag t) nil [38000 38382])
            ("animate-sequence" function (:prototype-flag t) nil [38383 38738])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38739 39049])
            ("register-definition-prefixes" code nil nil [39050 39102])
            ("push" code nil nil [39150 39213])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [39214 39313])
            ("ansi-color-process-output" function (:prototype-flag t) nil [39314 39894])
            ("ansi-color-compilation-filter" function (:prototype-flag t) nil [39895 40140])
            ("register-definition-prefixes" code nil nil [40141 40201])
            ("ansi-osc-compilation-filter" function (:prototype-flag t) nil [40247 40465])
            ("register-definition-prefixes" code nil nil [40466 40522])
            ("push" code nil nil [40580 40643])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40644 41487])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41488 41579])
            ("antlr-set-tabs" function (:prototype-flag t) nil [41580 41761])
            ("register-definition-prefixes" code nil nil [41762 41817])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41868 42227])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42228 42419])
            ("register-definition-prefixes" code nil nil [42420 42468])
            ("apropos-read-pattern" function (:prototype-flag t) nil [42513 42857])
            ("apropos-user-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42858 43355])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43356 43651])
            ("apropos-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43652 43954])
            ("apropos-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43955 44439])
            ("defalias" code nil nil [44440 44485])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44486 45244])
            ("apropos-documentation-property" function (:prototype-flag t) nil [45245 45396])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45397 46176])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46177 46465])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [46466 47103])
            ("apropos-local-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47104 47375])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47376 48133])
            ("register-definition-prefixes" code nil nil [48134 48188])
            ("archive-mode" function (:prototype-flag t) nil [48234 48802])
            ("register-definition-prefixes" code nil nil [48803 48853])
            ("register-definition-prefixes" code nil nil [48909 48968])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [49011 52137])
            ("register-definition-prefixes" code nil nil [52138 52188])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52242 60607])
            ("register-definition-prefixes" code nil nil [60608 60660])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [60716 61446])
            ("register-definition-prefixes" code nil nil [61447 61498])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [61547 61713])
            ("custom-autoload" code nil nil [61714 61773])
            ("auth-source-netrc-parse-all" function (:prototype-flag t) nil [61774 61877])
            ("authinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61878 62182])
            ("register-definition-prefixes" code nil nil [62183 62237])
            ("push" code nil nil [62291 62360])
            ("auth-source-pass-enable" function (:prototype-flag t) nil [62361 62454])
            ("auth-source-pass-get" function (:prototype-flag t) nil [62455 62873])
            ("register-definition-prefixes" code nil nil [62874 62946])
            ("ede-add-project-autoload" function (:prototype-flag t) nil [62998 63459])
            ("register-definition-prefixes" code nil nil [63460 63511])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63567 63667])
            ("register-definition-prefixes" code nil nil [63668 63724])
            ("register-definition-prefixes" code nil nil [63785 63850])
            ("put" code nil nil [63898 63944])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63945 64139])
            ("define-auto-insert" function (:prototype-flag t) nil [64140 64435])
            ("function-put" code nil nil [64436 64499])
            ("auto-insert-mode" variable nil nil [64500 64801])
            ("custom-autoload" code nil nil [64802 64854])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64855 65669])
            ("register-definition-prefixes" code nil nil [65670 65730])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65778 67116])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [67117 67317])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67318 68617])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [68618 68842])
            ("global-auto-revert-mode" variable nil nil [68843 69172])
            ("custom-autoload" code nil nil [69173 69232])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69233 70663])
            ("register-definition-prefixes" code nil nil [70664 70747])
            ("register-definition-prefixes" code nil nil [70804 70860])
            ("mouse-avoidance-mode" variable nil nil [70903 71135])
            ("custom-autoload" code nil nil [71136 71187])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71188 72322])
            ("register-definition-prefixes" code nil nil [72323 72383])
            ("push" code nil nil [72441 72501])
            ("backtrace" function (:prototype-flag t) nil [72502 72644])
            ("register-definition-prefixes" code nil nil [72645 72703])
            ("register-definition-prefixes" code nil nil [72755 72806])
            ("add-to-list" code nil nil [72862 72930])
            ("bat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [72931 73224])
            ("register-definition-prefixes" code nil nil [73225 73276])
            ("put" code nil nil [73322 73377])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73378 73597])
            ("display-battery-mode" variable nil nil [73598 73915])
            ("custom-autoload" code nil nil [73916 73969])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73970 75032])
            ("register-definition-prefixes" code nil nil [75033 75087])
            ("benchmark-call" function (:prototype-flag t) nil [75145 75716])
            ("benchmark-run" function (:prototype-flag t) nil [75717 76150])
            ("function-put" code nil nil [76151 76204])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [76205 76540])
            ("function-put" code nil nil [76541 76603])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76604 77014])
            ("benchmark-progn" function (:prototype-flag t) nil [77015 77180])
            ("function-put" code nil nil [77181 77236])
            ("register-definition-prefixes" code nil nil [77237 77295])
            ("register-definition-prefixes" code nil nil [77351 77402])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77456 78165])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78166 80830])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [80831 81571])
            ("register-definition-prefixes" code nil nil [81572 81624])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [81684 81783])
            ("register-definition-prefixes" code nil nil [81784 81848])
            ("push" code nil nil [81906 81967])
            ("bind-key" function (:prototype-flag t) nil [81968 82901])
            ("unbind-key" function (:prototype-flag t) nil [82902 83071])
            ("bind-key*" function (:prototype-flag t) nil [83072 83222])
            ("bind-keys" function (:prototype-flag t) nil [83223 84760])
            ("bind-keys*" function (:prototype-flag t) nil [84761 85047])
            ("describe-personal-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [85048 85166])
            ("register-definition-prefixes" code nil nil [85167 85313])
            ("register-definition-prefixes" code nil nil [85368 85420])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [85469 85636])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [85637 85875])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [85876 86015])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [86016 86123])
            ("register-definition-prefixes" code nil nil [86124 86176])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [86227 91184])
            ("register-definition-prefixes" code nil nil [91185 91247])
            ("keymap-set" code nil nil [91294 91338])
            ("keymap-set" code nil nil [91340 91383])
            ("keymap-set" code nil nil [91385 91441])
            ("keymap-set" code nil nil [91443 91493])
            ("defvar-keymap" code nil nil [91494 92198])
            ("fset" code nil nil [92200 92233])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [92234 93526])
            ("bookmark-set-no-overwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [93527 94917])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94918 95854])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95855 95992])
            ("bookmark-jump-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95993 96128])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96129 96440])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96441 96701])
            ("defalias" code nil nil [96702 96755])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96756 97416])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97417 97822])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97823 98312])
            ("bookmark-delete-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98313 98494])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98495 98609])
            ("function-put" code nil nil [98610 98673])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98674 99328])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [99329 100371])
            ("bookmark-bmenu-get-buffer" function (:prototype-flag t) nil [100372 100520])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100521 100778])
            ("defalias" code nil nil [100779 100826])
            ("defalias" code nil nil [100827 100874])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100875 101012])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] '(menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)")) (bindings--define-key map [write] '(menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)")) (bindings--define-key map [save] '(menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks")) (bindings--define-key map [edit] '(menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks")) (bindings--define-key map [delete] '(menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list")) (bindings--define-key map [delete-all] '(menu-item "Delete all Bookmarks..." bookmark-delete-all :help "Delete all bookmarks from the bookmark list")) (bindings--define-key map [rename] '(menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark")) (bindings--define-key map [locate] '(menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark")) (bindings--define-key map [insert] '(menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark")) (bindings--define-key map [set] '(menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file.")) (bindings--define-key map [jump] '(menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)")) map)) nil [101013 102611])
            ("defalias" code nil nil [102612 102667])
            ("register-definition-prefixes" code nil nil [102668 102758])
            ("register-definition-prefixes" code nil nil [102817 102880])
            ("browse-url-browser-function" variable (:default-value 'browse-url-default-browser) nil [102932 103235])
            ("custom-autoload" code nil nil [103236 103297])
            ("browse-url-default-handlers" variable (:default-value '(("\\`mailto:" . browse-url--mailto) ("\\`man:" . browse-url--man) ("\\`irc6?s?://" . browse-url--irc) (browse-url--non-html-file-url-p . browse-url-emacs))) nil [103298 103729])
            ("browse-url-select-handler" function (:prototype-flag t) nil [103730 104311])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104312 104656])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104657 104942])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104943 105224])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105225 105369])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105370 106154])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106155 106401])
            ("browse-url-with-browser-kind" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106402 106707])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106708 106951])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106952 107194])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107195 107993])
            ("make-obsolete" code nil nil [107994 108041])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108042 108774])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108775 109073])
            ("browse-url-webpositive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109074 109292])
            ("browse-url-default-haiku-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109293 109474])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109475 109720])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109721 110351])
            ("make-obsolete" code nil nil [110352 110401])
            ("browse-url-conkeror" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110402 111210])
            ("make-obsolete" code nil nil [111211 111259])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111260 111739])
            ("make-obsolete" code nil nil [111740 111782])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111783 112080])
            ("make-obsolete" code nil nil [112081 112131])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112132 112547])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112548 113236])
            ("browse-url-irc" function (:prototype-flag t) nil [113237 113402])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113403 114109])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114110 114506])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114507 114709])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114710 115071])
            ("browse-url-button-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115072 115317])
            ("browse-url-button-open-url" function (:prototype-flag t) nil [115318 115501])
            ("register-definition-prefixes" code nil nil [115502 115562])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115602 115793])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115794 115993])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115994 116082])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116083 116710])
            ("register-definition-prefixes" code nil nil [116711 116755])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116805 117398])
            ("register-definition-prefixes" code nil nil [117399 117453])
            ("put" code nil nil [117514 117648])
            ("put" code nil nil [117649 117710])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117711 118394])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118395 119093])
            ("register-definition-prefixes" code nil nil [119094 119160])
            ("register-definition-prefixes" code nil nil [119217 119290])
            ("put" code nil nil [119347 119405])
            ("put" code nil nil [119406 119475])
            ("put" code nil nil [119476 119540])
            ("put" code nil nil [119541 119680])
            ("byte-compile-warning-enabled-p" function (:prototype-flag t) nil [119681 119845])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [119846 120211])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [120212 120561])
            ("byte-compile-warn-obsolete" function (:prototype-flag t) nil [120562 120774])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120775 120969])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120970 121866])
            ("put" code nil nil [121867 121920])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [121921 122437])
            ("set-advertised-calling-convention" code nil nil [122438 122512])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122513 122725])
            ("byte-compile" function (:prototype-flag t) nil [122726 122898])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122899 123574])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [123575 123788])
            ("batch-byte-compile" function (:prototype-flag t) nil [123789 124442])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [124443 124878])
            ("register-definition-prefixes" code nil nil [124879 125023])
            ("register-definition-prefixes" code nil nil [125084 125148])
            ("register-definition-prefixes" code nil nil [125207 125269])
            ("c-ts-base-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125326 125450])
            ("c-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125451 126029])
            ("c++-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [126030 126796])
            ("c-or-c++-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [126797 127256])
            ("register-definition-prefixes" code nil nil [127257 127310])
            ("register-definition-prefixes" code nil nil [127366 127460])
            ("put" code nil nil [127516 127573])
            ("register-definition-prefixes" code nil nil [127574 127674])
            ("register-definition-prefixes" code nil nil [127731 127798])
            ("put" code nil nil [127852 127915])
            ("put" code nil nil [127916 127977])
            ("put" code nil nil [127978 128041])
            ("register-definition-prefixes" code nil nil [128042 128104])
            ("register-definition-prefixes" code nil nil [128161 128246])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128303 128582])
            ("register-definition-prefixes" code nil nil [128583 128681])
            ("register-definition-prefixes" code nil nil [128736 128792])
            ("register-definition-prefixes" code nil nil [128848 128948])
            ("register-definition-prefixes" code nil nil [129002 129078])
            ("register-definition-prefixes" code nil nil [129135 129219])
            ("register-definition-prefixes" code nil nil [129275 129357])
            ("register-definition-prefixes" code nil nil [129412 129462])
            ("register-definition-prefixes" code nil nil [129517 129573])
            ("register-definition-prefixes" code nil nil [129630 129717])
            ("register-definition-prefixes" code nil nil [129771 129825])
            ("register-definition-prefixes" code nil nil [129877 129944])
            ("define-key" code nil nil [129992 130033])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130034 130166])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130167 130312])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130313 130430])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130431 130687])
            ("calc-eval" function (:prototype-flag t) nil [130688 130963])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130964 131257])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131258 131417])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131418 131554])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131555 131695])
            ("calc-grab-sum-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131696 131819])
            ("calc-grab-sum-across" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131820 131942])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131943 132074])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [132075 132278])
            ("defmath" function (:prototype-flag t) nil [132279 132688])
            ("function-put" code nil nil [132689 132730])
            ("function-put" code nil nil [132731 132783])
            ("register-definition-prefixes" code nil nil [132784 132880])
            ("register-definition-prefixes" code nil nil [132932 132992])
            ("register-definition-prefixes" code nil nil [133043 133102])
            ("register-definition-prefixes" code nil nil [133155 133216])
            ("register-definition-prefixes" code nil nil [133267 133326])
            ("register-definition-prefixes" code nil nil [133378 133438])
            ("register-definition-prefixes" code nil nil [133490 133550])
            ("register-definition-prefixes" code nil nil [133603 133657])
            ("register-definition-prefixes" code nil nil [133708 133774])
            ("register-definition-prefixes" code nil nil [133825 133885])
            ("register-definition-prefixes" code nil nil [133938 134014])
            ("register-definition-prefixes" code nil nil [134066 134126])
            ("register-definition-prefixes" code nil nil [134179 134240])
            ("register-definition-prefixes" code nil nil [134293 134347])
            ("register-definition-prefixes" code nil nil [134399 134452])
            ("register-definition-prefixes" code nil nil [134505 134559])
            ("register-definition-prefixes" code nil nil [134612 134666])
            ("register-definition-prefixes" code nil nil [134718 134779])
            ("register-definition-prefixes" code nil nil [134831 134900])
            ("register-definition-prefixes" code nil nil [134951 135010])
            ("register-definition-prefixes" code nil nil [135062 135122])
            ("register-definition-prefixes" code nil nil [135174 135227])
            ("register-definition-prefixes" code nil nil [135279 135337])
            ("register-definition-prefixes" code nil nil [135389 135463])
            ("register-definition-prefixes" code nil nil [135514 135573])
            ("register-definition-prefixes" code nil nil [135626 135698])
            ("register-definition-prefixes" code nil nil [135750 135815])
            ("register-definition-prefixes" code nil nil [135867 135935])
            ("register-definition-prefixes" code nil nil [135987 136047])
            ("register-definition-prefixes" code nil nil [136100 136154])
            ("register-definition-prefixes" code nil nil [136205 136257])
            ("register-definition-prefixes" code nil nil [136309 136369])
            ("register-definition-prefixes" code nil nil [136422 136475])
            ("register-definition-prefixes" code nil nil [136528 136589])
            ("register-definition-prefixes" code nil nil [136642 136702])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [136754 136802])
            ("register-definition-prefixes" code nil nil [136803 136856])
            ("register-definition-prefixes" code nil nil [136909 136970])
            ("register-definition-prefixes" code nil nil [137021 137080])
            ("register-definition-prefixes" code nil nil [137132 137206])
            ("register-definition-prefixes" code nil nil [137257 137333])
            ("register-definition-prefixes" code nil nil [137384 137443])
            ("register-definition-prefixes" code nil nil [137494 137559])
            ("register-definition-prefixes" code nil nil [137610 137662])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [137710 137843])
            ("register-definition-prefixes" code nil nil [137844 137904])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [137959 139581])
            ("register-definition-prefixes" code nil nil [139582 139710])
            ("canlock-insert-header" function (:prototype-flag t) nil [139760 139916])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [139917 140105])
            ("register-definition-prefixes" code nil nil [140106 140160])
            ("register-definition-prefixes" code nil nil [140216 140265])
            ("register-definition-prefixes" code nil nil [140319 140377])
            ("register-definition-prefixes" code nil nil [140436 140489])
            ("register-definition-prefixes" code nil nil [140544 140592])
            ("register-definition-prefixes" code nil nil [140647 140730])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [140787 140885])
            ("register-definition-prefixes" code nil nil [140886 140936])
            ("register-definition-prefixes" code nil nil [140992 141202])
            ("c-guess-guessed-offsets-alist" variable nil nil [141258 141337])
            ("c-guess-guessed-basic-offset" variable nil nil [141338 141415])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [141416 141781])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [141782 142093])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142094 142453])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142454 142759])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142760 143114])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [143115 143999])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [144000 144433])
            ("register-definition-prefixes" code nil nil [144434 144489])
            ("register-definition-prefixes" code nil nil [144545 144594])
            ("register-definition-prefixes" code nil nil [144650 144706])
            ("push" code nil nil [144761 144822])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [144823 145266])
            ("add-to-list" code nil nil [145268 145334])
            ("add-to-list" code nil nil [145336 145415])
            ("add-to-list" code nil nil [145417 145485])
            ("add-to-list" code nil nil [145487 145539])
            ("add-to-list" code nil nil [145541 145600])
            ("add-to-list" code nil nil [145602 145664])
            ("add-to-list" code nil nil [145666 145720])
            ("add-to-list" code nil nil [145722 145774])
            ("add-to-list" code nil nil [145776 145831])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145832 146377])
            ("c-or-c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146378 146826])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146827 147379])
            ("add-to-list" code nil nil [147381 147436])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147437 148004])
            ("add-to-list" code nil nil [148006 148064])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148065 148624])
            ("add-to-list" code nil nil [148626 148682])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148683 149261])
            ("add-to-list" code nil nil [149263 149354])
            ("add-to-list" code nil nil [149356 149415])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149416 149975])
            ("add-to-list" code nil nil [149977 150033])
            ("add-to-list" code nil nil [150035 150092])
            ("add-to-list" code nil nil [150094 150152])
            ("add-to-list" code nil nil [150154 150212])
            ("add-to-list" code nil nil [150214 150272])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150273 150828])
            ("register-definition-prefixes" code nil nil [150829 150955])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151012 152132])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152133 152671])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152672 153005])
            ("register-definition-prefixes" code nil nil [153006 153083])
            ("c-string-list-p" function (:prototype-flag t) nil [153138 153233])
            ("put" code nil nil [153234 153286])
            ("put" code nil nil [153287 153343])
            ("put" code nil nil [153345 153414])
            ("put" code nil nil [153416 153487])
            ("put" code nil nil [153489 153561])
            ("put" code nil nil [153563 153635])
            ("put" code nil nil [153637 153708])
            ("put" code nil nil [153710 153782])
            ("put" code nil nil [153783 153841])
            ("register-definition-prefixes" code nil nil [153842 153967])
            ("ccl-compile" function (:prototype-flag t) nil [154022 154138])
            ("ccl-dump" function (:prototype-flag t) nil [154139 154216])
            ("declare-ccl-program" function (:prototype-flag t) nil [154217 154678])
            ("define-ccl-program" function (:prototype-flag t) nil [154679 162565])
            ("function-put" code nil nil [162566 162618])
            ("function-put" code nil nil [162619 162682])
            ("check-ccl-program" function (:prototype-flag t) nil [162683 163003])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [163004 163278])
            ("register-definition-prefixes" code nil nil [163279 163325])
            ("register-definition-prefixes" code nil nil [163366 163412])
            ("push" code nil nil [163461 163517])
            ("register-definition-prefixes" code nil nil [163518 163568])
            ("register-definition-prefixes" code nil nil [163624 163688])
            ("register-definition-prefixes" code nil nil [163743 163799])
            ("register-definition-prefixes" code nil nil [163855 163913])
            ("register-definition-prefixes" code nil nil [163970 164036])
            ("push" code nil nil [164092 164151])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164152 164380])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164381 164609])
            ("cfengine-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164610 164721])
            ("register-definition-prefixes" code nil nil [164722 164777])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [164824 165665])
            ("describe-char-fold-equivalences" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165666 166626])
            ("register-definition-prefixes" code nil nil [166627 166685])
            ("register-definition-prefixes" code nil nil [166739 166788])
            ("register-definition-prefixes" code nil nil [166846 166914])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166976 167152])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167153 167346])
            ("register-definition-prefixes" code nil nil [167347 167413])
            ("put" code nil nil [167470 167539])
            ("put" code nil nil [167540 167606])
            ("put" code nil nil [167607 167684])
            ("put" code nil nil [167685 167762])
            ("put" code nil nil [167763 167837])
            ("put" code nil nil [167838 167909])
            ("put" code nil nil [167910 167986])
            ("put" code nil nil [167987 168056])
            ("put" code nil nil [168057 168121])
            ("put" code nil nil [168122 168187])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168188 168414])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168415 168955])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168956 169508])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169509 169787])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169788 170101])
            ("checkdoc-file" function (:prototype-flag t) nil [170102 170218])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170219 170586])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170587 170859])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170860 171161])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171162 171533])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171534 171761])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171762 172092])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172093 172453])
            ("checkdoc-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172454 172697])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172698 172895])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172896 173132])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173133 173374])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173375 173634])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173635 173873])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173874 174083])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174084 174314])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174315 174544])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174545 174765])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174766 175690])
            ("checkdoc-package-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175691 175807])
            ("register-definition-prefixes" code nil nil [175808 175864])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175921 176068])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176069 176165])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176166 176309])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176310 176402])
            ("post-read-decode-hz" function (:prototype-flag t) nil [176403 176462])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [176463 176526])
            ("register-definition-prefixes" code nil nil [176527 176651])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176697 177097])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177098 177459])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177460 178093])
            ("register-definition-prefixes" code nil nil [178094 178214])
            ("register-definition-prefixes" code nil nil [178271 178321])
            ("cl-font-lock-built-in-mode" variable nil nil [178381 178722])
            ("custom-autoload" code nil nil [178723 178787])
            ("cl-font-lock-built-in-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178788 179517])
            ("register-definition-prefixes" code nil nil [179518 179582])
            ("push" code nil nil [179641 179702])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [179760 183259])
            ("register-definition-prefixes" code nil nil [183260 183328])
            ("push" code nil nil [183383 183440])
            ("cl-custom-print-functions" variable nil nil [183441 183927])
            ("cl-incf" function (:prototype-flag t) nil [183928 184230])
            ("cl-old-struct-compat-mode" variable nil nil [184231 184568])
            ("custom-autoload" code nil nil [184569 184626])
            ("cl-old-struct-compat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184627 185485])
            ("register-definition-prefixes" code nil nil [185486 185534])
            ("register-definition-prefixes" code nil nil [185590 185639])
            ("push" code nil nil [185696 185755])
            ("cl-print-object" function (:prototype-flag t) nil [185756 186049])
            ("cl-print-expand-ellipsis" function (:prototype-flag t) nil [186050 186283])
            ("cl-prin1" function (:prototype-flag t) nil [186284 186590])
            ("cl-prin1-to-string" function (:prototype-flag t) nil [186591 186725])
            ("cl-print-to-string-with-limit" function (:prototype-flag t) nil [186726 187515])
            ("register-definition-prefixes" code nil nil [187516 187589])
            ("register-definition-prefixes" code nil nil [187644 187693])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [187748 188279])
            ("register-definition-prefixes" code nil nil [188280 188334])
            ("cmake-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [188395 188508])
            ("register-definition-prefixes" code nil nil [188509 188575])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [188622 189280])
            ("register-definition-prefixes" code nil nil [189281 189396])
            ("color-name-to-rgb" function (:prototype-flag t) nil [189439 190114])
            ("register-definition-prefixes" code nil nil [190115 190165])
            ("comint-output-filter-functions" variable (:default-value '(ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt)) nil [190209 190877])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [190878 191664])
            ("make-comint" function (:prototype-flag t) nil [191665 192394])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [192395 192900])
            ("function-put" code nil nil [192901 192958])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [192959 193179])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193180 193473])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193474 193763])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [193764 194010])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [194011 194270])
            ("register-definition-prefixes" code nil nil [194271 194323])
            ("put" code nil nil [194376 194431])
            ("comp-subr-trampoline-install" function (:prototype-flag t) nil [194432 194568])
            ("comp-c-func-name" function (:prototype-flag t) nil [194569 194834])
            ("comp-clean-up-stale-eln" function (:prototype-flag t) nil [194835 195053])
            ("comp-lookup-eln" function (:prototype-flag t) nil [195054 195228])
            ("native-compile" function (:prototype-flag t) nil [195229 195817])
            ("batch-native-compile" function (:prototype-flag t) nil [195818 196359])
            ("batch-byte+native-compile" function (:prototype-flag t) nil [196360 196757])
            ("native-compile-async" function (:prototype-flag t) nil [196758 197439])
            ("register-definition-prefixes" code nil nil [197440 197535])
            ("register-definition-prefixes" code nil nil [197599 197665])
            ("register-definition-prefixes" code nil nil [197723 197803])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197853 199144])
            ("register-definition-prefixes" code nil nil [199145 199201])
            ("register-definition-prefixes" code nil nil [199253 199310])
            ("compilation-mode-hook" variable nil nil [199365 199453])
            ("custom-autoload" code nil nil [199454 199506])
            ("compilation-start-hook" variable nil nil [199507 199649])
            ("custom-autoload" code nil nil [199650 199703])
            ("compilation-window-height" variable nil nil [199704 199814])
            ("custom-autoload" code nil nil [199815 199871])
            ("compilation-process-setup-function" variable (:default-value nil) nil [199872 200182])
            ("compilation-buffer-name-function" variable (:default-value nil) nil [200183 200506])
            ("compilation-finish-functions" variable nil nil [200507 200725])
            ("put" code nil nil [200726 200784])
            ("compilation-ask-about-save" variable (:default-value t) nil [200785 200954])
            ("custom-autoload" code nil nil [200955 201012])
            ("compilation-search-path" variable (:default-value '(nil)) nil [201013 201259])
            ("custom-autoload" code nil nil [201260 201314])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [201315 201950])
            ("custom-autoload" code nil nil [201951 201997])
            ("put" code nil nil [201998 202139])
            ("compilation-disable-input" variable nil nil [202140 202382])
            ("custom-autoload" code nil nil [202383 202439])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202440 203688])
            ("compilation--default-buffer-name" function (:prototype-flag t) nil [203689 203767])
            ("compilation-start" function (:prototype-flag t) nil [203768 204988])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204989 205386])
            ("put" code nil nil [205387 205435])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205436 206347])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206348 207167])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207168 207392])
            ("register-definition-prefixes" code nil nil [207393 207502])
            ("register-definition-prefixes" code nil nil [207561 207623])
            ("register-definition-prefixes" code nil nil [207692 207773])
            ("register-definition-prefixes" code nil nil [207834 207899])
            ("dynamic-completion-mode" variable nil nil [207947 208276])
            ("custom-autoload" code nil nil [208277 208336])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [208337 209030])
            ("register-definition-prefixes" code nil nil [209031 209533])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209590 211012])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211013 211163])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211164 211629])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211630 211916])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211917 212672])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212673 212827])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212828 213149])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213150 213473])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213474 213786])
            ("conf-toml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213787 214060])
            ("conf-desktop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214061 214439])
            ("register-definition-prefixes" code nil nil [214440 214493])
            ("register-definition-prefixes" code nil nil [214547 214600])
            ("cookie" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214650 214967])
            ("cookie-insert" function (:prototype-flag t) nil [214968 215207])
            ("cookie-snarf" function (:prototype-flag t) nil [215208 215471])
            ("register-definition-prefixes" code nil nil [215472 215524])
            ("put" code nil nil [215582 215641])
            ("put" code nil nil [215642 215701])
            ("put" code nil nil [215702 215761])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215762 216209])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216210 216466])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216467 216584])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216585 216798])
            ("register-definition-prefixes" code nil nil [216799 216857])
            ("put" code nil nil [216915 216971])
            ("put" code nil nil [216972 217028])
            ("put" code nil nil [217029 217095])
            ("put" code nil nil [217096 217152])
            ("put" code nil nil [217153 217223])
            ("put" code nil nil [217224 217294])
            ("put" code nil nil [217295 217358])
            ("put" code nil nil [217359 217412])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [217413 225665])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225666 225744])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225745 225840])
            ("register-definition-prefixes" code nil nil [225841 225896])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [225947 226238])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [226239 226324])
            ("register-definition-prefixes" code nil nil [226325 226371])
            ("register-definition-prefixes" code nil nil [226426 226484])
            ("register-definition-prefixes" code nil nil [226540 226604])
            ("completing-read-multiple" function (:prototype-flag t) nil [226656 227609])
            ("register-definition-prefixes" code nil nil [227610 227656])
            ("register-definition-prefixes" code nil nil [227722 227814])
            ("add-to-list" code nil nil [227873 227931])
            ("csharp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227932 228052])
            ("csharp-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228053 228137])
            ("register-definition-prefixes" code nil nil [228138 228216])
            ("css-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228272 229068])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229069 229824])
            ("add-to-list" code nil nil [229826 229884])
            ("scss-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229885 229969])
            ("css-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229970 230306])
            ("register-definition-prefixes" code nil nil [230307 230366])
            ("register-definition-prefixes" code nil nil [230422 230481])
            ("register-definition-prefixes" code nil nil [230538 230599])
            ("cua-mode" variable nil nil [230655 230924])
            ("custom-autoload" code nil nil [230925 230967])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230968 232474])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232475 232596])
            ("register-definition-prefixes" code nil nil [232597 232648])
            ("register-definition-prefixes" code nil nil [232704 232755])
            ("cua-rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232811 233545])
            ("register-definition-prefixes" code nil nil [233546 233597])
            ("cursor-sensor-inhibit" variable nil nil [233659 233873])
            ("cursor-intangible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [233874 234560])
            ("cursor-sensor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234561 235596])
            ("register-definition-prefixes" code nil nil [235597 235663])
            ("register-definition-prefixes" code nil nil [235708 235798])
            ("custom-browse-sort-alphabetically" variable nil nil [235844 235966])
            ("custom-autoload" code nil nil [235967 236032])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [236033 236151])
            ("custom-autoload" code nil nil [236152 236217])
            ("custom-menu-sort-alphabetically" variable nil nil [236218 236333])
            ("custom-autoload" code nil nil [236334 236397])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236398 236918])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236919 237567])
            ("setopt" function (:prototype-flag t) nil [237568 237853])
            ("setopt--set" function (:prototype-flag t) nil [237854 237914])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237915 238569])
            ("customize-push-and-save" function (:prototype-flag t) nil [238570 238973])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238974 239257])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239258 239514])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239515 239703])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239704 239856])
            ("defalias" code nil nil [239857 239905])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239906 240011])
            ("defalias" code nil nil [240012 240086])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240087 240261])
            ("customize-package-emacs-version-alist" variable nil nil [240262 241602])
            ("define-obsolete-function-alias" code nil nil [241603 241689])
            ("customize-changed" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241690 242140])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242141 242555])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242556 242881])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242882 242995])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242996 243097])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243098 243181])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243182 243710])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243711 243855])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243856 243965])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243966 244077])
            ("custom-prompt-customize-unsaved-options" function (:prototype-flag t) nil [244078 244286])
            ("custom-buffer-create" function (:prototype-flag t) nil [244287 244624])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [244625 245052])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245053 245171])
            ("custom-file" variable nil nil [245172 246697])
            ("custom-autoload" code nil nil [246698 246741])
            ("custom-save-all" function (:prototype-flag t) nil [246742 246826])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [246827 246940])
            ("custom-menu-create" function (:prototype-flag t) nil [246941 247101])
            ("customize-menu-create" function (:prototype-flag t) nil [247102 247397])
            ("customize-icon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247398 247468])
            ("custom-set-icons" function (:prototype-flag t) nil [247469 247773])
            ("custom-save-icons" function (:prototype-flag t) nil [247774 247862])
            ("register-definition-prefixes" code nil nil [247863 247933])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247980 248397])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [248398 248515])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [248516 248632])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [248633 248857])
            ("register-definition-prefixes" code nil nil [248858 248932])
            ("register-definition-prefixes" code nil nil [248986 249039])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249090 249175])
            ("register-definition-prefixes" code nil nil [249176 249229])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249282 250157])
            ("put" code nil nil [250158 250207])
            ("global-cwarn-mode" variable nil nil [250208 250513])
            ("custom-autoload" code nil nil [250514 250562])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250563 251057])
            ("register-definition-prefixes" code nil nil [251058 251140])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [251197 251326])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [251327 251470])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [251471 252055])
            ("register-definition-prefixes" code nil nil [252056 252128])
            ("put" code nil nil [252173 252228])
            ("put" code nil nil [252229 252280])
            ("define-key" code nil nil [252282 252322])
            ("define-key" code nil nil [252324 252372])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [252373 252858])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [252859 253958])
            ("register-definition-prefixes" code nil nil [253959 254013])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [254067 254170])
            ("register-definition-prefixes" code nil nil [254171 254231])
            ("register-definition-prefixes" code nil nil [254286 254347])
            ("register-definition-prefixes" code nil nil [254408 254475])
            ("register-definition-prefixes" code nil nil [254538 254607])
            ("register-definition-prefixes" code nil nil [254665 254729])
            ("register-definition-prefixes" code nil nil [254789 254855])
            ("register-definition-prefixes" code nil nil [254915 254981])
            ("register-definition-prefixes" code nil nil [255043 255111])
            ("register-definition-prefixes" code nil nil [255177 255249])
            ("register-definition-prefixes" code nil nil [255309 255375])
            ("register-definition-prefixes" code nil nil [255434 255503])
            ("register-definition-prefixes" code nil nil [255568 255639])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [255685 255985])
            ("function-put" code nil nil [255986 256050])
            ("dbus-monitor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256051 256312])
            ("register-definition-prefixes" code nil nil [256313 256361])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256417 260376])
            ("register-definition-prefixes" code nil nil [260377 260428])
            ("setq" code nil nil [260482 260504])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [260505 261012])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261013 261720])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [261721 262041])
            ("debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [262042 262778])
            ("defalias" code nil nil [262779 262829])
            ("cancel-debug-on-variable-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [262830 263180])
            ("defalias" code nil nil [263181 263245])
            ("register-definition-prefixes" code nil nil [263246 263320])
            ("register-definition-prefixes" code nil nil [263385 263454])
            ("register-definition-prefixes" code nil nil [263520 263597])
            ("register-definition-prefixes" code nil nil [263655 263723])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263774 263884])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263885 264607])
            ("register-definition-prefixes" code nil nil [264608 264664])
            ("register-definition-prefixes" code nil nil [264725 264790])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [264837 264923])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [264924 265621])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265622 265846])
            ("register-definition-prefixes" code nil nil [265847 265911])
            ("defalias" code nil nil [265955 266009])
            ("delete-selection-mode" variable nil nil [266010 266331])
            ("custom-autoload" code nil nil [266332 266385])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [266386 267375])
            ("delete-active-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [267376 267591])
            ("register-definition-prefixes" code nil nil [267592 267667])
            ("register-definition-prefixes" code nil nil [267723 267846])
            ("define-derived-mode" function (:prototype-flag t) nil [267902 270569])
            ("function-put" code nil nil [270570 270623])
            ("function-put" code nil nil [270624 270688])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [270689 270964])
            ("register-definition-prefixes" code nil nil [270965 271024])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271072 271485])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271486 272785])
            ("describe-char-eldoc" function (:prototype-flag t) nil [272786 273323])
            ("register-definition-prefixes" code nil nil [273324 273382])
            ("desktop-save-mode" variable nil nil [273427 273732])
            ("custom-autoload" code nil nil [273733 273783])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273784 275111])
            ("desktop-locals-to-save" variable (:default-value '(desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system buffer-display-time indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace)) nil [275112 275664])
            ("custom-autoload" code nil nil [275665 275718])
            ("defvar-local" code nil nil [275719 276315])
            ("desktop-buffer-mode-handlers" variable nil nil [276316 277624])
            ("put" code nil nil [277625 277684])
            ("desktop-minor-mode-handlers" variable nil nil [277685 279000])
            ("put" code nil nil [279001 279059])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279060 279502])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279503 281055])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281056 281190])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281191 281772])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281773 282023])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282024 282128])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282129 282206])
            ("register-definition-prefixes" code nil nil [282207 282261])
            ("register-definition-prefixes" code nil nil [282315 282368])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282419 282866])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282867 283093])
            ("gnus-article-outlook-rearrange-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283094 283311])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283312 283627])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283628 283789])
            ("register-definition-prefixes" code nil nil [283790 283850])
            ("register-definition-prefixes" code nil nil [283894 283946])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284002 284347])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284348 285108])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285109 285194])
            ("register-definition-prefixes" code nil nil [285195 285266])
            ("dictionary-mode" function (:prototype-flag t) nil [285318 286177])
            ("dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286178 286281])
            ("dictionary-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286282 286502])
            ("dictionary-lookup-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286503 286604])
            ("dictionary-match-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286605 286765])
            ("dictionary-mouse-popup-matching-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286766 286917])
            ("dictionary-popup-matching-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286918 287065])
            ("dictionary-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287066 287369])
            ("global-dictionary-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287370 287779])
            ("dictionary-context-menu" function (:prototype-flag t) nil [287780 288031])
            ("register-definition-prefixes" code nil nil [288032 288125])
            ("register-definition-prefixes" code nil nil [288187 288252])
            ("register-definition-prefixes" code nil nil [288315 288397])
            ("diff-switches" variable (:default-value (purecopy "-u")) nil [288442 288767])
            ("custom-autoload" code nil nil [288768 288809])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [288810 288885])
            ("custom-autoload" code nil nil [288886 288926])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288927 289561])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289562 289899])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [289900 290009])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290010 290209])
            ("diff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290210 290870])
            ("register-definition-prefixes" code nil nil [290871 290919])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290969 291543])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291544 292192])
            ("diff-add-log-use-relative-names" variable nil nil [292193 292441])
            ("custom-autoload" code nil nil [292442 292506])
            ("put" code nil nil [292507 292577])
            ("diff-vc-deduce-fileset" function (:prototype-flag t) nil [292578 292624])
            ("register-definition-prefixes" code nil nil [292625 292678])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292723 293162])
            ("register-definition-prefixes" code nil nil [293163 293209])
            ("register-definition-prefixes" code nil nil [293262 293320])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [293363 294178])
            ("custom-autoload" code nil nil [294179 294230])
            ("defvar-local" code nil nil [294231 294540])
            ("define-key" code nil nil [294542 294575])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294576 295723])
            ("define-key" code nil nil [295725 295773])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295774 295923])
            ("define-key" code nil nil [295925 295972])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295973 296113])
            ("define-key" code nil nil [296115 296163])
            ("dired-other-tab" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296164 296300])
            ("dired-noselect" function (:prototype-flag t) nil [296301 296445])
            ("dired-mode" function (:prototype-flag t) nil [296446 299180])
            ("put" code nil nil [299182 299226])
            ("dired-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299227 299880])
            ("dired-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299881 300012])
            ("register-definition-prefixes" code nil nil [300013 300063])
            ("register-definition-prefixes" code nil nil [300110 300164])
            ("register-definition-prefixes" code nil nil [300209 300277])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300323 301281])
            ("dirtrack" function (:prototype-flag t) nil [301282 301602])
            ("register-definition-prefixes" code nil nil [301603 301659])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [301714 302076])
            ("register-definition-prefixes" code nil nil [302077 302134])
            ("make-display-table" function (:prototype-flag t) nil [302182 302264])
            ("display-table-slot" function (:prototype-flag t) nil [302265 302575])
            ("set-display-table-slot" function (:prototype-flag t) nil [302576 302897])
            ("describe-display-table" function (:prototype-flag t) nil [302898 303006])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303007 303137])
            ("standard-display-8bit" function (:prototype-flag t) nil [303138 303635])
            ("standard-display-default" function (:prototype-flag t) nil [303636 303766])
            ("standard-display-ascii" function (:prototype-flag t) nil [303767 303874])
            ("standard-display-g1" function (:prototype-flag t) nil [303875 304104])
            ("standard-display-graphic" function (:prototype-flag t) nil [304105 304321])
            ("standard-display-underline" function (:prototype-flag t) nil [304322 304442])
            ("create-glyph" function (:prototype-flag t) nil [304443 304565])
            ("make-glyph-code" function (:prototype-flag t) nil [304566 304695])
            ("glyph-char" function (:prototype-flag t) nil [304696 304789])
            ("glyph-face" function (:prototype-flag t) nil [304790 304912])
            ("standard-display-european" function (:prototype-flag t) nil [304913 305805])
            ("standard-display-by-replacement-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305806 307354])
            ("register-definition-prefixes" code nil nil [307355 307429])
            ("display-fill-column-indicator-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307496 308764])
            ("put" code nil nil [308765 308838])
            ("global-display-fill-column-indicator-mode" variable nil nil [308839 309240])
            ("custom-autoload" code nil nil [309241 309337])
            ("global-display-fill-column-indicator-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309338 310114])
            ("global-display-fill-column-indicator-modes" variable (:default-value '((not special-mode) t)) nil [310115 310770])
            ("custom-autoload" code nil nil [310771 310866])
            ("register-definition-prefixes" code nil nil [310867 310973])
            ("display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311031 311939])
            ("put" code nil nil [311940 312004])
            ("global-display-line-numbers-mode" variable nil nil [312005 312370])
            ("custom-autoload" code nil nil [312371 312449])
            ("global-display-line-numbers-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312450 313049])
            ("header-line-indent" variable nil nil [313050 313628])
            ("header-line-indent-width" variable nil nil [313629 314071])
            ("header-line-indent-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314072 315716])
            ("register-definition-prefixes" code nil nil [315717 315820])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315873 316255])
            ("dnd-protocol-alist" variable (:default-value `((,(purecopy "^file:///") . dnd-open-local-file) (,(purecopy "^file://") . dnd-open-file) (,(purecopy "^file:") . dnd-open-local-file) (,(purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://") . dnd-open-file))) nil [316296 317239])
            ("custom-autoload" code nil nil [317240 317285])
            ("register-definition-prefixes" code nil nil [317286 317332])
            ("dns-query" function (:prototype-flag t) nil [317377 317563])
            ("register-definition-prefixes" code nil nil [317564 317610])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317666 318072])
            ("defalias" code nil nil [318074 318105])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318106 318214])
            ("register-definition-prefixes" code nil nil [318215 318271])
            ("register-definition-prefixes" code nil nil [318327 318390])
            ("doc-view-mode-p" function (:prototype-flag t) nil [318436 318679])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318680 319021])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [319022 319194])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319195 319934])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [319935 319995])
            ("register-definition-prefixes" code nil nil [319996 320052])
            ("dockerfile-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320118 320241])
            ("register-definition-prefixes" code nil nil [320242 320319])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320368 320459])
            ("register-definition-prefixes" code nil nil [320460 320508])
            ("register-definition-prefixes" code nil nil [320568 320640])
            ("register-definition-prefixes" code nil nil [320681 320727])
            ("register-definition-prefixes" code nil nil [320772 320821])
            ("register-definition-prefixes" code nil nil [320867 320952])
            ("register-definition-prefixes" code nil nil [320997 321090])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321134 321900])
            ("register-definition-prefixes" code nil nil [321901 321953])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322002 322078])
            ("register-definition-prefixes" code nil nil [322079 322141])
            ("register-definition-prefixes" code nil nil [322194 322326])
            ("defalias" code nil nil [322385 322445])
            ("define-minor-mode" function (:prototype-flag t) nil [322446 326200])
            ("function-put" code nil nil [326201 326252])
            ("function-put" code nil nil [326253 326315])
            ("defalias" code nil nil [326316 326388])
            ("defalias" code nil nil [326389 326456])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [326457 328664])
            ("function-put" code nil nil [328665 328727])
            ("function-put" code nil nil [328728 328801])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [328802 329475])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [329476 329781])
            ("function-put" code nil nil [329782 329833])
            ("function-put" code nil nil [329834 329891])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [329892 330087])
            ("function-put" code nil nil [330088 330142])
            ("function-put" code nil nil [330143 330203])
            ("register-definition-prefixes" code nil nil [330204 330264])
            ("register-definition-prefixes" code nil nil [330320 330376])
            ("register-definition-prefixes" code nil nil [330432 330484])
            ("register-definition-prefixes" code nil nil [330540 330596])
            ("register-definition-prefixes" code nil nil [330652 330708])
            ("register-definition-prefixes" code nil nil [330764 330816])
            ("register-definition-prefixes" code nil nil [330872 330924])
            ("register-definition-prefixes" code nil nil [330980 331036])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331091 331163])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331164 331480])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331481 331786])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331787 332374])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [332375 332584])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [332585 332901])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [332902 333207])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333208 333515])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333516 333789])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333790 334083])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334084 334350])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334351 335077])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [335078 335818])
            ("defalias" code nil nil [335819 335856])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [335857 336155])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336156 336430])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336431 336524])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336525 336622])
            ("ebnf-setup" function (:prototype-flag t) nil [336623 336693])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336694 336865])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336866 337055])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337056 337173])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337174 337330])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337331 337492])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337493 337653])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337654 337892])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337893 338114])
            ("register-definition-prefixes" code nil nil [338115 338166])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338221 338609])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338610 338737])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338738 338830])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338831 338925])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338926 339020])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339021 339113])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339114 339206])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339207 339330])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339331 339452])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339453 339574])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339575 339695])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339696 339815])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339816 339935])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339936 340227])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340228 340494])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340495 340702])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340703 341108])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341109 341441])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341442 341577])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341578 341715])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341716 341834])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341835 341931])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341932 342171])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342172 342255])
            ("register-definition-prefixes" code nil nil [342256 342343])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342391 343837])
            ("register-definition-prefixes" code nil nil [343838 343927])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343974 344201])
            ("register-definition-prefixes" code nil nil [344202 344279])
            ("ecomplete-setup" function (:prototype-flag t) nil [344326 344397])
            ("register-definition-prefixes" code nil nil [344398 344456])
            ("push" code nil nil [344503 344557])
            ("global-ede-mode" variable nil nil [344558 344855])
            ("custom-autoload" code nil nil [344856 344900])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344901 345671])
            ("register-definition-prefixes" code nil nil [345672 345757])
            ("register-definition-prefixes" code nil nil [345821 345893])
            ("edebug-all-defs" variable nil nil [345948 346474])
            ("custom-autoload" code nil nil [346475 346520])
            ("edebug-all-forms" variable nil nil [346521 346755])
            ("custom-autoload" code nil nil [346756 346802])
            ("edebug-basic-spec" function (:prototype-flag t) nil [346803 347000])
            ("defalias" code nil nil [347001 347053])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347054 347919])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347920 348000])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348001 348076])
            ("register-definition-prefixes" code nil nil [348077 348128])
            ("push" code nil nil [348174 348233])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348234 348472])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348473 348724])
            ("defalias" code nil nil [348725 348758])
            ("defalias" code nil nil [348759 348790])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348791 349001])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349002 349210])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349211 349741])
            ("defalias" code nil nil [349742 349778])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349779 350326])
            ("defalias" code nil nil [350327 350365])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350366 350648])
            ("defalias" code nil nil [350649 350686])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350687 350984])
            ("defalias" code nil nil [350985 351039])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351040 351340])
            ("defalias" code nil nil [351341 351380])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351381 351765])
            ("defalias" code nil nil [351766 351815])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351816 352375])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352376 352776])
            ("defalias" code nil nil [352777 352843])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352844 353260])
            ("defalias" code nil nil [353261 353354])
            ("defalias" code nil nil [353355 353431])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353432 353948])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353949 354465])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354466 354962])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354963 355515])
            ("defalias" code nil nil [355516 355558])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355559 355949])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355950 356417])
            ("defalias" code nil nil [356418 356488])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356489 357155])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357156 357889])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357890 358309])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358310 358766])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358767 359110])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359111 359670])
            ("defalias" code nil nil [359671 359707])
            ("defalias" code nil nil [359708 359753])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359754 360173])
            ("defalias" code nil nil [360174 360211])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360212 360347])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360348 360477])
            ("ediff-files-command" function (:prototype-flag t) nil [360478 360582])
            ("ediff3-files-command" function (:prototype-flag t) nil [360583 360691])
            ("ediff-merge-command" function (:prototype-flag t) nil [360692 360802])
            ("ediff-merge-with-ancestor-command" function (:prototype-flag t) nil [360803 360939])
            ("ediff-directories-command" function (:prototype-flag t) nil [360940 361058])
            ("ediff-directories3-command" function (:prototype-flag t) nil [361059 361178])
            ("ediff-merge-directories-command" function (:prototype-flag t) nil [361179 361309])
            ("ediff-merge-directories-with-ancestor-command" function (:prototype-flag t) nil [361310 361467])
            ("register-definition-prefixes" code nil nil [361468 361518])
            ("register-definition-prefixes" code nil nil [361569 361624])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [361675 361721])
            ("register-definition-prefixes" code nil nil [361722 361777])
            ("register-definition-prefixes" code nil nil [361828 361900])
            ("register-definition-prefixes" code nil nil [361951 362006])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362057 362133])
            ("defalias" code nil nil [362134 362177])
            ("register-definition-prefixes" code nil nil [362178 362233])
            ("register-definition-prefixes" code nil nil [362284 362339])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362390 362591])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362592 362809])
            ("register-definition-prefixes" code nil nil [362810 362865])
            ("register-definition-prefixes" code nil nil [362916 362997])
            ("register-definition-prefixes" code nil nil [363048 363103])
            ("register-definition-prefixes" code nil nil [363160 363221])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [363266 363747])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [363748 363865])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [363866 364013])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364014 364684])
            ("format-kbd-macro" function (:prototype-flag t) nil [364685 365057])
            ("register-definition-prefixes" code nil nil [365058 365112])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365163 365396])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365397 365460])
            ("register-definition-prefixes" code nil nil [365461 365507])
            ("register-definition-prefixes" code nil nil [365564 365622])
            ("register-definition-prefixes" code nil nil [365680 365733])
            ("register-definition-prefixes" code nil nil [365787 365842])
            ("register-definition-prefixes" code nil nil [365899 365966])
            ("push" code nil nil [366019 366079])
            ("eglot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366080 367928])
            ("eglot-ensure" function (:prototype-flag t) nil [367929 368024])
            ("eglot-upgrade-eglot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368025 368116])
            ("define-obsolete-function-alias" code nil nil [368117 368191])
            ("put" code nil nil [368192 368256])
            ("put" code nil nil [368257 368324])
            ("eglot--debbugs-or-github-bug-uri" function nil nil [368325 368513])
            ("register-definition-prefixes" code nil nil [368514 368564])
            ("with-electric-help" function (:prototype-flag t) nil [368607 369821])
            ("electric-helpify" function (:prototype-flag t) nil [369822 369888])
            ("register-definition-prefixes" code nil nil [369889 369951])
            ("push" code nil nil [370005 370061])
            ("make-instance" function (:prototype-flag t) nil [370062 370365])
            ("register-definition-prefixes" code nil nil [370366 370532])
            ("register-definition-prefixes" code nil nil [370591 370646])
            ("push" code nil nil [370705 370766])
            ("eieio-defclass-autoload" function (:prototype-flag t) nil [370767 371145])
            ("register-definition-prefixes" code nil nil [371146 371272])
            ("customize-object" function (:prototype-flag t) nil [371333 371502])
            ("register-definition-prefixes" code nil nil [371503 371560])
            ("register-definition-prefixes" code nil nil [371624 371703])
            ("eieio-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [371761 371987])
            ("define-obsolete-function-alias" code nil nil [371988 372065])
            ("eieio-help-constructor" function (:prototype-flag t) nil [372066 372169])
            ("make-obsolete" code nil nil [372170 372268])
            ("register-definition-prefixes" code nil nil [372269 372323])
            ("register-definition-prefixes" code nil nil [372386 372453])
            ("register-definition-prefixes" code nil nil [372507 372590])
            ("register-definition-prefixes" code nil nil [372652 372718])
            ("push" code nil nil [372772 372831])
            ("electric-pair-mode" variable nil nil [372878 373187])
            ("custom-autoload" code nil nil [373188 373241])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373242 374296])
            ("electric-pair-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374297 374966])
            ("register-definition-prefixes" code nil nil [374967 375029])
            ("elide-head-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375077 375915])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375916 376235])
            ("make-obsolete" code nil nil [376236 376287])
            ("register-definition-prefixes" code nil nil [376288 376348])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376402 376469])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376470 376617])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376618 376740])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376741 376857])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376858 377044])
            ("register-definition-prefixes" code nil nil [377045 377095])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377147 377287])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377288 377557])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377558 377999])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378000 378215])
            ("register-definition-prefixes" code nil nil [378216 378262])
            ("register-definition-prefixes" code nil nil [378315 378398])
            ("register-definition-prefixes" code nil nil [378452 378514])
            ("register-definition-prefixes" code nil nil [378567 378620])
            ("register-definition-prefixes" code nil nil [378672 378725])
            ("register-definition-prefixes" code nil nil [378777 378829])
            ("register-definition-prefixes" code nil nil [378886 378948])
            ("register-definition-prefixes" code nil nil [379003 379059])
            ("register-definition-prefixes" code nil nil [379111 379164])
            ("register-definition-prefixes" code nil nil [379216 379268])
            ("register-definition-prefixes" code nil nil [379318 379368])
            ("register-definition-prefixes" code nil nil [379420 379473])
            ("register-definition-prefixes" code nil nil [379527 379582])
            ("register-definition-prefixes" code nil nil [379636 379691])
            ("register-definition-prefixes" code nil nil [379745 379799])
            ("register-definition-prefixes" code nil nil [379852 379906])
            ("register-definition-prefixes" code nil nil [379958 380011])
            ("register-definition-prefixes" code nil nil [380064 380117])
            ("register-definition-prefixes" code nil nil [380169 380221])
            ("register-definition-prefixes" code nil nil [380273 380326])
            ("register-definition-prefixes" code nil nil [380379 380437])
            ("emacs-authors-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380503 380686])
            ("define-obsolete-function-alias" code nil nil [380687 380765])
            ("register-definition-prefixes" code nil nil [380766 380852])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380900 381700])
            ("register-definition-prefixes" code nil nil [381701 381761])
            ("emacs-news-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381824 381925])
            ("emacs-news-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381926 382032])
            ("register-definition-prefixes" code nil nil [382033 382098])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382149 382463])
            ("set-advertised-calling-convention" code nil nil [382464 382534])
            ("emacs-build-description" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382535 382658])
            ("submit-emacs-patch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382659 382960])
            ("register-definition-prefixes" code nil nil [382961 383025])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383072 383222])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383223 383420])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383421 383570])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383571 383767])
            ("emerge-files-command" function (:prototype-flag t) nil [383768 383809])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [383810 383865])
            ("emerge-files-remote" function (:prototype-flag t) nil [383866 383940])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [383941 384038])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384039 384190])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384191 384400])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384401 384495])
            ("register-definition-prefixes" code nil nil [384496 384548])
            ("emoji-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384605 384677])
            ("emoji-recent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384678 384773])
            ("emoji-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384774 385051])
            ("emoji-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385052 385314])
            ("emoji-describe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385315 385717])
            ("emoji--init" function (:prototype-flag t) nil [385718 385791])
            ("emoji-zoom-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385792 385958])
            ("emoji-zoom-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385959 386052])
            ("emoji-zoom-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386053 386140])
            ("register-definition-prefixes" code nil nil [386141 386191])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386247 387170])
            ("enriched-encode" function (:prototype-flag t) nil [387171 387237])
            ("enriched-decode" function (:prototype-flag t) nil [387238 387295])
            ("register-definition-prefixes" code nil nil [387296 387352])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387393 387508])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387509 387632])
            ("epa-select-keys" function (:prototype-flag t) nil [387633 387986])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387987 388184])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388185 388248])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388249 388346])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388347 388438])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388439 389367])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389368 389613])
            ("function-put" code nil nil [389614 389678])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389679 390314])
            ("function-put" code nil nil [390315 390369])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390370 390627])
            ("function-put" code nil nil [390628 390695])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390696 391345])
            ("function-put" code nil nil [391346 391398])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391399 392072])
            ("function-put" code nil nil [392073 392128])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392129 392224])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392225 392298])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392299 392390])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392391 392538])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392539 392624])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392625 392713])
            ("register-definition-prefixes" code nil nil [392714 392760])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392807 392879])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392880 392950])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392951 393017])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393018 393090])
            ("epa-file-handler" function (:prototype-flag t) nil [393136 393207])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393208 393252])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393253 393298])
            ("register-definition-prefixes" code nil nil [393299 393350])
            ("epa-search-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393394 393752])
            ("register-definition-prefixes" code nil nil [393753 393803])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393849 394497])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394498 394639])
            ("function-put" code nil nil [394640 394693])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394694 394852])
            ("function-put" code nil nil [394853 394905])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394906 395190])
            ("function-put" code nil nil [395191 395241])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395242 395797])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395798 395960])
            ("function-put" code nil nil [395961 396018])
            ("epa-global-mail-mode" variable nil nil [396019 396336])
            ("custom-autoload" code nil nil [396337 396391])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396392 397074])
            ("register-definition-prefixes" code nil nil [397075 397131])
            ("push" code nil nil [397172 397228])
            ("epg-make-context" function (:prototype-flag t) nil [397229 397399])
            ("register-definition-prefixes" code nil nil [397400 397446])
            ("epg-find-configuration" function (:prototype-flag t) nil [397494 398027])
            ("epg-configuration" function (:prototype-flag t) nil [398028 398147])
            ("make-obsolete" code nil nil [398148 398213])
            ("epg-check-configuration" function (:prototype-flag t) nil [398214 398633])
            ("epg-expand-group" function (:prototype-flag t) nil [398634 398738])
            ("register-definition-prefixes" code nil nil [398739 398792])
            ("push" code nil nil [398837 398898])
            ("erc-select-read-args" function (:prototype-flag t) nil [398899 399005])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399006 399900])
            ("defalias" code nil nil [399901 399929])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399930 401746])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [401747 402129])
            ("register-definition-prefixes" code nil nil [402130 402176])
            ("register-definition-prefixes" code nil nil [402230 402289])
            ("register-definition-prefixes" code nil nil [402342 402396])
            ("register-definition-prefixes" code nil nil [402448 402501])
            ("register-definition-prefixes" code nil nil [402552 402619])
            ("register-definition-prefixes" code nil nil [402671 402744])
            ("register-definition-prefixes" code nil nil [402796 402849])
            ("register-definition-prefixes" code nil nil [402898 402970])
            ("register-definition-prefixes" code nil nil [403037 403119])
            ("register-definition-prefixes" code nil nil [403173 403232])
            ("register-definition-prefixes" code nil nil [403282 403333])
            ("register-definition-prefixes" code nil nil [403386 403440])
            ("register-definition-prefixes" code nil nil [403493 403547])
            ("register-definition-prefixes" code nil nil [403599 403659])
            ("register-definition-prefixes" code nil nil [403710 403775])
            ("register-definition-prefixes" code nil nil [403825 403876])
            ("register-definition-prefixes" code nil nil [403926 404018])
            ("register-definition-prefixes" code nil nil [404068 404119])
            ("register-definition-prefixes" code nil nil [404168 404218])
            ("register-definition-prefixes" code nil nil [404269 404321])
            ("register-definition-prefixes" code nil nil [404371 404427])
            ("register-definition-prefixes" code nil nil [404481 404536])
            ("erc-determine-network" function (:prototype-flag t) nil [404590 404827])
            ("make-obsolete" code nil nil [404828 404912])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404913 405033])
            ("register-definition-prefixes" code nil nil [405034 405089])
            ("register-definition-prefixes" code nil nil [405141 405194])
            ("register-definition-prefixes" code nil nil [405244 405295])
            ("register-definition-prefixes" code nil nil [405350 405426])
            ("register-definition-prefixes" code nil nil [405479 405541])
            ("register-definition-prefixes" code nil nil [405591 405642])
            ("register-definition-prefixes" code nil nil [405692 405748])
            ("register-definition-prefixes" code nil nil [405802 405857])
            ("register-definition-prefixes" code nil nil [405908 405960])
            ("register-definition-prefixes" code nil nil [406014 406069])
            ("register-definition-prefixes" code nil nil [406123 406187])
            ("register-definition-prefixes" code nil nil [406238 406290])
            ("register-definition-prefixes" code nil nil [406350 406426])
            ("register-definition-prefixes" code nil nil [406477 406529])
            ("register-definition-prefixes" code nil nil [406583 406653])
            ("register-definition-prefixes" code nil nil [406703 406754])
            ("ert-deftest" function (:prototype-flag t) nil [406806 407662])
            ("function-put" code nil nil [407663 407708])
            ("function-put" code nil nil [407709 407760])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [407761 408158])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [408159 408499])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408500 408691])
            ("defalias" code nil nil [408692 408737])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408738 408875])
            ("register-definition-prefixes" code nil nil [408876 408922])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408976 409070])
            ("register-definition-prefixes" code nil nil [409071 409119])
            ("erts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [409176 409336])
            ("register-definition-prefixes" code nil nil [409337 409390])
            ("register-definition-prefixes" code nil nil [409442 409495])
            ("register-definition-prefixes" code nil nil [409547 409636])
            ("register-definition-prefixes" code nil nil [409688 409740])
            ("register-definition-prefixes" code nil nil [409791 409843])
            ("eshell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [409896 409972])
            ("eshell-bookmark-jump" function (:prototype-flag t) nil [409973 410080])
            ("register-definition-prefixes" code nil nil [410081 410134])
            ("register-definition-prefixes" code nil nil [410189 410245])
            ("register-definition-prefixes" code nil nil [410297 410350])
            ("register-definition-prefixes" code nil nil [410403 410456])
            ("register-definition-prefixes" code nil nil [410509 410563])
            ("register-definition-prefixes" code nil nil [410615 410692])
            ("push" code nil nil [410743 410802])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [410803 411425])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411426 411603])
            ("eshell-command-result" function (:prototype-flag t) nil [411604 411959])
            ("register-definition-prefixes" code nil nil [411960 412012])
            ("tags-file-name" variable nil nil [412065 412367])
            ("put" code nil nil [412369 412445])
            ("put" code nil nil [412447 412498])
            ("tags-case-fold-search" variable (:default-value 'default) nil [412499 412727])
            ("custom-autoload" code nil nil [412728 412778])
            ("put" code nil nil [412779 412837])
            ("tags-table-list" variable nil nil [412838 413177])
            ("custom-autoload" code nil nil [413178 413222])
            ("tags-compression-info-list" variable (:default-value (purecopy '("" ".Z" ".bz2" ".gz" ".xz" ".tgz"))) nil [413223 413434])
            ("custom-autoload" code nil nil [413435 413490])
            ("tags-add-tables" variable (:default-value 'ask-user) nil [413491 413769])
            ("custom-autoload" code nil nil [413770 413814])
            ("find-tag-hook" variable nil nil [413815 414028])
            ("custom-autoload" code nil nil [414029 414071])
            ("find-tag-default-function" variable nil nil [414072 414351])
            ("custom-autoload" code nil nil [414352 414406])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414407 414494])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [414495 415119])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [415120 415871])
            ("tags-table-files" function (:prototype-flag t) nil [415872 416134])
            ("tags-lazy-completion-table" function (:prototype-flag t) nil [416135 416181])
            ("tags-completion-at-point-function" function nil nil [416183 416351])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [416352 417345])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [417346 418305])
            ("make-obsolete" code nil nil [418306 418361])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [418362 419349])
            ("make-obsolete" code nil nil [419350 419431])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419432 420408])
            ("make-obsolete" code nil nil [420409 420488])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [420489 421385])
            ("make-obsolete" code nil nil [421386 421444])
            ("defalias" code nil nil [421445 421483])
            ("defalias" code nil nil [421484 421521])
            ("tags-next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421522 422071])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422072 422328])
            ("make-obsolete" code nil nil [422329 422390])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422391 422824])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422825 423482])
            ("set-advertised-calling-convention" code nil nil [423483 423577])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423578 423930])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423931 424037])
            ("make-obsolete" code nil nil [424038 424093])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424094 424348])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [424349 424595])
            ("etags--xref-backend" function (:prototype-flag t) nil [424596 424635])
            ("register-definition-prefixes" code nil nil [424636 424908])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [424965 425025])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425026 425769])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425770 426531])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426532 426947])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426948 427781])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427782 428613])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428614 428971])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428972 429117])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429118 429622])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429623 429722])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429723 429897])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429898 430061])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [430062 430377])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [430378 430507])
            ("ethio-find-file" function (:prototype-flag t) nil [430508 431112])
            ("ethio-write-file" function (:prototype-flag t) nil [431113 431729])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431730 431897])
            ("ethio-composition-function" function (:prototype-flag t) nil [431898 431996])
            ("register-definition-prefixes" code nil nil [431997 432080])
            ("register-definition-prefixes" code nil nil [432137 432216])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432262 432483])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432484 432660])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432661 432837])
            ("eudc-expand-try-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432838 433174])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433175 434092])
            ("eudc-format-inline-expansion-result" function (:prototype-flag t) nil [434093 434240])
            ("eudc-query-with-words" function (:prototype-flag t) nil [434241 434890])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [434891 435165])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435166 435309])
            ("eudc-tools-menu" variable (:default-value (let ((map (make-sparse-keymap "Directory Servers"))) (define-key map [phone] `(menu-item ,(purecopy "Get Phone") eudc-get-phone :help ,(purecopy "Get the phone field of name from the directory server"))) (define-key map [email] `(menu-item ,(purecopy "Get Email") eudc-get-email :help ,(purecopy "Get the email field of NAME from the directory server"))) (define-key map [separator-eudc-email] menu-bar-separator) (define-key map [expand-inline] `(menu-item ,(purecopy "Expand Inline Query") eudc-expand-inline :help ,(purecopy "Query the directory server, and expand the query string before point"))) (define-key map [query] `(menu-item ,(purecopy "Query with Form") eudc-query-form :help ,(purecopy "Display a form to query the directory server"))) (define-key map [separator-eudc-query] menu-bar-separator) (define-key map [new] `(menu-item ,(purecopy "New Server") eudc-set-server :help ,(purecopy "Set the directory server to SERVER using PROTOCOL"))) (define-key map [load] `(menu-item ,(purecopy "Load Hotlist of Servers") eudc-load-eudc :help ,(purecopy "Load the Emacs Unified Directory Client"))) map)) nil [435310 436447])
            ("fset" code nil nil [436448 436503])
            ("register-definition-prefixes" code nil nil [436504 436552])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [436602 436714])
            ("eudc-display-url" function (:prototype-flag t) nil [436715 436803])
            ("eudc-display-mail" function (:prototype-flag t) nil [436804 436905])
            ("eudc-display-sound" function (:prototype-flag t) nil [436906 437003])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [437004 437117])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [437118 437219])
            ("register-definition-prefixes" code nil nil [437220 437276])
            ("eudc-capf-complete" function (:prototype-flag t) nil [437327 437935])
            ("eudc-capf-message-expand-name" function (:prototype-flag t) nil [437936 438380])
            ("register-definition-prefixes" code nil nil [438381 438444])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438497 438684])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438685 438798])
            ("register-definition-prefixes" code nil nil [438799 438854])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438908 439021])
            ("register-definition-prefixes" code nil nil [439022 439086])
            ("register-definition-prefixes" code nil nil [439137 439190])
            ("register-definition-prefixes" code nil nil [439242 439301])
            ("eudc-ecomplete-query-internal" function (:prototype-flag t) nil [439358 439815])
            ("register-definition-prefixes" code nil nil [439816 439913])
            ("register-definition-prefixes" code nil nil [439965 440019])
            ("register-definition-prefixes" code nil nil [440070 440123])
            ("register-definition-prefixes" code nil nil [440185 440264])
            ("eudc-mailabbrev-query-internal" function (:prototype-flag t) nil [440322 441069])
            ("ewoc-create" function (:prototype-flag t) nil [441122 441914])
            ("register-definition-prefixes" code nil nil [441915 441963])
            ("eww-suggest-uris" variable (:default-value '(eww-links-at-point thing-at-point-url-at-point eww-current-url)) nil [442008 442343])
            ("custom-autoload" code nil nil [442344 442387])
            ("eww-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442388 442799])
            ("eww" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442800 443331])
            ("defalias" code nil nil [443333 443360])
            ("eww-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443361 443432])
            ("eww-search-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443433 443730])
            ("eww-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443731 443814])
            ("eww-browse-url" function (:prototype-flag t) nil [443815 444461])
            ("eww-list-bookmarks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444462 444527])
            ("eww-bookmark-jump" function (:prototype-flag t) nil [444528 444624])
            ("register-definition-prefixes" code nil nil [444625 444671])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [444729 444914])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444915 445255])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [445256 445666])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [445667 445897])
            ("register-definition-prefixes" code nil nil [445898 445958])
            ("register-definition-prefixes" code nil nil [446006 446054])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [446098 446991])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [446992 447162])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447163 447345])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447346 447520])
            ("define-key" code nil nil [447522 447579])
            ("define-key" code nil nil [447581 447634])
            ("register-definition-prefixes" code nil nil [447635 447687])
            ("register-definition-prefixes" code nil nil [447750 447816])
            ("push" code nil nil [447873 447943])
            ("register-definition-prefixes" code nil nil [447944 448022])
            ("register-definition-prefixes" code nil nil [448081 448150])
            ("register-definition-prefixes" code nil nil [448195 448262])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448313 450687])
            ("register-definition-prefixes" code nil nil [450688 450734])
            ("face-remap-add-relative" function (:prototype-flag t) nil [450782 451865])
            ("face-remap-reset-base" function (:prototype-flag t) nil [451866 452108])
            ("face-remap-set-base" function (:prototype-flag t) nil [452109 452843])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452844 453267])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453268 453715])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453716 453899])
            ("define-key" code nil nil [453901 453957])
            ("define-key" code nil nil [453959 454015])
            ("define-key" code nil nil [454017 454073])
            ("define-key" code nil nil [454075 454131])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454132 455923])
            ("define-key" code nil nil [455925 455974])
            ("text-scale-pinch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455975 456111])
            ("define-key" code nil nil [456113 456181])
            ("define-key" code nil nil [456183 456251])
            ("define-key" code nil nil [456253 456321])
            ("define-key" code nil nil [456323 456391])
            ("global-text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456392 457659])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457660 458420])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458421 458901])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [458902 459593])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [459594 459837])
            ("register-definition-prefixes" code nil nil [459838 459986])
            ("facemenu-menu" function (:prototype-flag t) nil [460033 460085])
            ("define-key" code nil nil [460086 460141])
            ("list-colors-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [460142 460927])
            ("register-definition-prefixes" code nil nil [460928 460999])
            ("push" code nil nil [461054 461113])
            ("faceup-view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461114 461216])
            ("faceup-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461217 461680])
            ("faceup-render-view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461681 461828])
            ("faceup-clean-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461829 461909])
            ("faceup-defexplainer" function (:prototype-flag t) nil [461910 462113])
            ("register-definition-prefixes" code nil nil [462114 462166])
            ("register-definition-prefixes" code nil nil [462230 462306])
            ("push" code nil nil [462357 462415])
            ("feedmail-send-it" function (:prototype-flag t) nil [462416 462657])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462658 462806])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462807 463103])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463104 463425])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463426 464568])
            ("register-definition-prefixes" code nil nil [464569 464625])
            ("ffap-file-finder" variable (:default-value nil) nil [464667 464767])
            ("custom-autoload" code nil nil [464768 464812])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464813 465230])
            ("ffap-machine-at-point" function (:prototype-flag t) nil [465231 465326])
            ("ffap-url-at-point" function (:prototype-flag t) nil [465327 465497])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465498 466016])
            ("defalias" code nil nil [466017 466053])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466054 466406])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466407 466728])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466729 466923])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [466924 467076])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467077 467163])
            ("register-definition-prefixes" code nil nil [467164 467261])
            ("register-definition-prefixes" code nil nil [467319 467380])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467427 467664])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467665 468081])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468082 468170])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468171 468333])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468334 468526])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468527 468917])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468918 469348])
            ("register-definition-prefixes" code nil nil [469349 469408])
            ("fileloop-initialize" function (:prototype-flag t) nil [469454 470114])
            ("fileloop-initialize-search" function (:prototype-flag t) nil [470115 470198])
            ("fileloop-initialize-replace" function (:prototype-flag t) nil [470199 470852])
            ("register-definition-prefixes" code nil nil [470853 470909])
            ("file-notify-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [470957 471178])
            ("function-put" code nil nil [471179 471250])
            ("register-definition-prefixes" code nil nil [471251 471312])
            ("register-definition-prefixes" code nil nil [471365 471417])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471462 471974])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471975 472140])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472141 472544])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472545 472708])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472709 472857])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472858 473000])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473001 473104])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473105 473223])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473224 473340])
            ("enable-connection-local-variables" variable (:default-value t) nil [473341 473445])
            ("connection-local-set-profiles" function (:prototype-flag t) nil [473446 474022])
            ("connection-local-set-profile-variables" function (:prototype-flag t) nil [474023 474664])
            ("connection-local-update-profile-variables" function (:prototype-flag t) nil [474665 475146])
            ("hack-connection-local-variables-apply" function (:prototype-flag t) nil [475147 475367])
            ("with-connection-local-variables" function (:prototype-flag t) nil [475368 475568])
            ("with-connection-local-application-variables" function (:prototype-flag t) nil [475569 475799])
            ("function-put" code nil nil [475800 475883])
            ("with-connection-local-variables-1" function (:prototype-flag t) nil [475884 476097])
            ("setq-connection-local" function (:prototype-flag t) nil [476098 476967])
            ("path-separator" function (:prototype-flag t) nil [476968 477056])
            ("null-device" function (:prototype-flag t) nil [477057 477139])
            ("register-definition-prefixes" code nil nil [477140 477297])
            ("filesets-init" function (:prototype-flag t) nil [477343 477480])
            ("register-definition-prefixes" code nil nil [477481 477537])
            ("register-definition-prefixes" code nil nil [477603 477680])
            ("register-definition-prefixes" code nil nil [477739 477815])
            ("register-definition-prefixes" code nil nil [477871 477930])
            ("register-definition-prefixes" code nil nil [477987 478048])
            ("push" code nil nil [478094 478153])
            ("find-cmd" function (:prototype-flag t) nil [478154 478581])
            ("register-definition-prefixes" code nil nil [478582 478634])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [478682 479316])
            ("find-dired-with-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [479317 479774])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [479775 480147])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480148 480563])
            ("register-definition-prefixes" code nil nil [480564 480630])
            ("ff-special-constructs" variable (:default-value `((,(purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]") \, (lambda nil (match-string 2))))) nil [480677 481163])
            ("custom-autoload" code nil nil [481164 481218])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [481219 481484])
            ("defalias" code nil nil [481485 481538])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [481539 483586])
            ("define-obsolete-function-alias" code nil nil [483587 483673])
            ("define-obsolete-function-alias" code nil nil [483674 483786])
            ("ff-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483787 483907])
            ("register-definition-prefixes" code nil nil [483908 483992])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484050 484401])
            ("read-library-name" function (:prototype-flag t) nil [484402 484656])
            ("find-library-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484657 484821])
            ("find-library-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484822 484984])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [484985 485479])
            ("find-function-noselect" function (:prototype-flag t) nil [485480 486010])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486011 486413])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486414 486588])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486589 486761])
            ("find-variable-noselect" function (:prototype-flag t) nil [486762 487122])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487123 487523])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487524 487698])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487699 487871])
            ("find-definition-noselect" function (:prototype-flag t) nil [487872 488256])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488257 488679])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488680 488849])
            ("find-function-on-key-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488850 489009])
            ("find-function-on-key-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489010 489167])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489168 489277])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489278 489387])
            ("find-function-setup-keys" function (:prototype-flag t) nil [489388 489510])
            ("register-definition-prefixes" code nil nil [489511 489596])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489643 489810])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489811 489918])
            ("find-lisp-find-dired-subdirs-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [489919 490071])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490072 490206])
            ("register-definition-prefixes" code nil nil [490207 490265])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490309 490415])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490416 490573])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490574 490658])
            ("register-definition-prefixes" code nil nil [490659 490744])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490791 491038])
            ("enable-flow-control-on" function (:prototype-flag t) nil [491039 491414])
            ("register-definition-prefixes" code nil nil [491415 491478])
            ("fill-flowed-encode" function (:prototype-flag t) nil [491530 491600])
            ("fill-flowed" function (:prototype-flag t) nil [491601 491828])
            ("register-definition-prefixes" code nil nil [491829 491889])
            ("push" code nil nil [491944 492004])
            ("flymake-log" function (:prototype-flag t) nil [492005 492322])
            ("flymake-make-diagnostic" function (:prototype-flag t) nil [492323 493332])
            ("flymake-diagnostics" function (:prototype-flag t) nil [493333 493606])
            ("flymake-diag-region" function (:prototype-flag t) nil [493607 493868])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [493869 496084])
            ("flymake-mode-on" function (:prototype-flag t) nil [496085 496148])
            ("flymake-mode-off" function (:prototype-flag t) nil [496149 496214])
            ("register-definition-prefixes" code nil nil [496215 496269])
            ("flymake-cc" function (:prototype-flag t) nil [496327 496596])
            ("register-definition-prefixes" code nil nil [496597 496657])
            ("push" code nil nil [496717 496780])
            ("register-definition-prefixes" code nil nil [496781 496845])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496901 496998])
            ("flyspell-mode" variable nil nil [496999 497064])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497065 498806])
            ("turn-on-flyspell" function (:prototype-flag t) nil [498807 498889])
            ("turn-off-flyspell" function (:prototype-flag t) nil [498890 498974])
            ("flyspell-mode-off" function (:prototype-flag t) nil [498975 499043])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [499044 499258])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [499259 499326])
            ("register-definition-prefixes" code nil nil [499327 499469])
            ("push" code nil nil [499514 499573])
            ("register-definition-prefixes" code nil nil [499574 499628])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [499672 499777])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [499778 499885])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [499886 501681])
            ("follow-scroll-up-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [501682 502129])
            ("follow-scroll-down-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [502130 502595])
            ("follow-scroll-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [502596 502976])
            ("follow-scroll-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [502977 503362])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [503363 504048])
            ("register-definition-prefixes" code nil nil [504049 504101])
            ("register-definition-prefixes" code nil nil [504160 504343])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [504394 505197])
            ("register-definition-prefixes" code nil nil [505198 505254])
            ("register-definition-prefixes" code nil nil [505313 505376])
            ("format-spec" function (:prototype-flag t) nil [505425 507793])
            ("register-definition-prefixes" code nil nil [507794 507856])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [507899 508698])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508699 508777])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508778 508885])
            ("register-definition-prefixes" code nil nil [508886 508936])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508991 512035])
            ("register-definition-prefixes" code nil nil [512036 512090])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [512140 512361])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [512362 512610])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [512611 512839])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [512840 513226])
            ("fortune-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [513227 513470])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [513471 513816])
            ("register-definition-prefixes" code nil nil [513817 513871])
            ("frameset-session-filter-alist" variable (:default-value (append '((left . frameset-filter-iconified) (minibuffer . frameset-filter-minibuffer) (top . frameset-filter-iconified)) (mapcar (lambda (p) (cons p :never)) frame-internal-parameters))) nil [513917 514283])
            ("frameset-persistent-filter-alist" variable (:default-value (append '((background-color . frameset-filter-sanitize-color) (bottom . frameset-filter-shelve-param) (buffer-list . :never) (buffer-predicate . :never) (buried-buffer-list . :never) (client . :never) (delete-before . :never) (font . frameset-filter-font-param) (font-backend . :never) (foreground-color . frameset-filter-sanitize-color) (frameset--text-pixel-height . :save) (frameset--text-pixel-width . :save) (fullscreen . frameset-filter-shelve-param) (GUI:bottom . frameset-filter-unshelve-param) (GUI:font . frameset-filter-unshelve-param) (GUI:fullscreen . frameset-filter-unshelve-param) (GUI:height . frameset-filter-unshelve-param) (GUI:left . frameset-filter-unshelve-param) (GUI:right . frameset-filter-unshelve-param) (GUI:top . frameset-filter-unshelve-param) (GUI:width . frameset-filter-unshelve-param) (height . frameset-filter-shelve-param) (left . frameset-filter-shelve-param) (parent-frame . :never) (mouse-wheel-frame . :never) (right . frameset-filter-shelve-param) (top . frameset-filter-shelve-param) (tty . frameset-filter-tty-to-GUI) (tty-type . frameset-filter-tty-to-GUI) (width . frameset-filter-shelve-param) (window-system . :never)) frameset-session-filter-alist)) nil [514284 515642])
            ("frameset-filter-alist" variable (:default-value frameset-persistent-filter-alist) nil [515643 517858])
            ("frameset-frame-id" function (:prototype-flag t) nil [517859 518285])
            ("frameset-frame-id-equal-p" function (:prototype-flag t) nil [518286 518394])
            ("frameset-frame-with-id" function (:prototype-flag t) nil [518395 518620])
            ("frameset-save" function (:prototype-flag t) nil [518621 519373])
            ("frameset-restore" function (:prototype-flag t) nil [519374 522345])
            ("frameset-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522346 522626])
            ("register-definition-prefixes" code nil nil [522627 522683])
            ("unless" code nil nil [522727 523514])
            ("register-definition-prefixes" code nil nil [523515 523581])
            ("register-definition-prefixes" code nil nil [523636 523694])
            ("register-definition-prefixes" code nil nil [523745 523801])
            ("register-definition-prefixes" code nil nil [523852 523908])
            ("register-definition-prefixes" code nil nil [523971 524038])
            ("gdb-enable-debug" variable nil nil [524092 524243])
            ("custom-autoload" code nil nil [524244 524292])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524293 525295])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [525296 528321])
            ("register-definition-prefixes" code nil nil [528322 528425])
            ("register-definition-prefixes" code nil nil [528483 528543])
            ("generic-mode-list" variable nil nil [528599 528763])
            ("define-generic-mode" function (:prototype-flag t) nil [528764 530519])
            ("function-put" code nil nil [530520 530579])
            ("function-put" code nil nil [530580 530633])
            ("generic-mode-internal" function (:prototype-flag t) nil [530634 530778])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530779 531169])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [531170 531662])
            ("make-obsolete" code nil nil [531663 531725])
            ("register-definition-prefixes" code nil nil [531726 531780])
            ("register-definition-prefixes" code nil nil [531835 531897])
            ("register-definition-prefixes" code nil nil [531955 532016])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [532071 532819])
            ("register-definition-prefixes" code nil nil [532820 532874])
            ("register-definition-prefixes" code nil nil [532940 533032])
            ("glyphless-display-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533094 533883])
            ("register-definition-prefixes" code nil nil [533884 533952])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [534004 534162])
            ("gmm-message" function (:prototype-flag t) nil [534163 534478])
            ("gmm-error" function (:prototype-flag t) nil [534479 534632])
            ("gmm-widget-p" function (:prototype-flag t) nil [534633 534717])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [534718 535556])
            ("register-definition-prefixes" code nil nil [535557 535621])
            ("push" code nil nil [535668 535724])
            ("custom-autoload" code nil nil [535725 535769])
            ("gnus-child-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535770 535905])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535906 536041])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [536042 536428])
            ("gnus-child" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [536429 536506])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [536507 536584])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [536585 537189])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537190 537470])
            ("register-definition-prefixes" code nil nil [537471 537519])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537572 537639])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537640 537703])
            ("gnus-child-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537704 537807])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537808 537911])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537912 538311])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [538312 538400])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [538401 538721])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [538722 539011])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [539012 539131])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [539132 539313])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [539314 539562])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539563 539646])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539647 539736])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539737 539885])
            ("register-definition-prefixes" code nil nil [539886 539940])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [539991 540096])
            ("register-definition-prefixes" code nil nil [540097 540160])
            ("register-definition-prefixes" code nil nil [540213 540267])
            ("register-definition-prefixes" code nil nil [540320 540382])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540438 540559])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540560 540673])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540674 540951])
            ("register-definition-prefixes" code nil nil [540952 541018])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541071 541236])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541237 541352])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [541353 541475])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [541476 541782])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [541783 542071])
            ("register-definition-prefixes" code nil nil [542072 542126])
            ("register-definition-prefixes" code nil nil [542178 542240])
            ("register-definition-prefixes" code nil nil [542293 542353])
            ("register-definition-prefixes" code nil nil [542404 542474])
            ("register-definition-prefixes" code nil nil [542526 542584])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [542637 543359])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543360 543460])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [543461 543829])
            ("register-definition-prefixes" code nil nil [543830 543890])
            ("register-definition-prefixes" code nil nil [543943 543997])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [544050 544120])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [544121 544191])
            ("register-definition-prefixes" code nil nil [544192 544246])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544299 544402])
            ("register-definition-prefixes" code nil nil [544403 544463])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544516 544608])
            ("register-definition-prefixes" code nil nil [544609 544663])
            ("register-definition-prefixes" code nil nil [544714 544766])
            ("register-definition-prefixes" code nil nil [544819 544882])
            ("gnus--random-face-with-type" function (:prototype-flag t) nil [544933 545098])
            ("message-goto-eoh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545099 545143])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545144 545324])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545325 545446])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545447 545648])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545649 545843])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [545844 545988])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [545989 546154])
            ("gnus-random-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546155 546315])
            ("gnus-insert-random-face-header" function (:prototype-flag t) nil [546316 546429])
            ("register-definition-prefixes" code nil nil [546430 546482])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546538 546737])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546738 546948])
            ("register-definition-prefixes" code nil nil [546949 547015])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547068 547276])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547277 547380])
            ("gnus-read-ephemeral-emacs-bug-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547381 547628])
            ("register-definition-prefixes" code nil nil [547629 547683])
            ("gnus-article-html" function (:prototype-flag t) nil [547735 547804])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [547805 547873])
            ("register-definition-prefixes" code nil nil [547874 547927])
            ("gnus-icalendar-mm-inline" function (:prototype-flag t) nil [547984 548055])
            ("register-definition-prefixes" code nil nil [548056 548123])
            ("register-definition-prefixes" code nil nil [548174 548226])
            ("defalias" code nil nil [548278 548323])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548324 548451])
            ("register-definition-prefixes" code nil nil [548452 548505])
            ("register-definition-prefixes" code nil nil [548558 548612])
            ("register-definition-prefixes" code nil nil [548662 548713])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [548763 548815])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548816 548982])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548983 549681])
            ("register-definition-prefixes" code nil nil [549682 549746])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549799 550928])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550929 551273])
            ("gnus-group-split" function (:prototype-flag t) nil [551274 551497])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [551498 553663])
            ("register-definition-prefixes" code nil nil [553664 553730])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [553781 554139])
            ("gnus-button-mailto" function (:prototype-flag t) nil [554140 554216])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [554217 554317])
            ("define-mail-user-agent" code nil nil [554318 554437])
            ("register-definition-prefixes" code nil nil [554438 554490])
            ("gnus-notifications" function (:prototype-flag t) nil [554551 554890])
            ("register-definition-prefixes" code nil nil [554891 554967])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555020 555190])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555191 555367])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555368 555567])
            ("register-definition-prefixes" code nil nil [555568 555628])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [555681 555884])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [555885 556075])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [556076 556249])
            ("gnus-intersection" function (:prototype-flag t) nil [556250 556315])
            ("make-obsolete" code nil nil [556316 556375])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [556376 556529])
            ("defalias" code nil nil [556530 556598])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [556599 556788])
            ("gnus-sorted-union" function (:prototype-flag t) nil [556789 556928])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [556929 557104])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [557105 557213])
            ("register-definition-prefixes" code nil nil [557214 557268])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [557324 557412])
            ("register-definition-prefixes" code nil nil [557413 557470])
            ("register-definition-prefixes" code nil nil [557525 557584])
            ("register-definition-prefixes" code nil nil [557637 557691])
            ("register-definition-prefixes" code nil nil [557743 557796])
            ("register-definition-prefixes" code nil nil [557849 557903])
            ("register-definition-prefixes" code nil nil [557957 558019])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558072 558433])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558434 558753])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558754 558849])
            ("register-definition-prefixes" code nil nil [558850 558910])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558962 559064])
            ("register-definition-prefixes" code nil nil [559065 559118])
            ("register-definition-prefixes" code nil nil [559170 559223])
            ("gnus-declare-backend" function (:prototype-flag t) nil [559276 559409])
            ("register-definition-prefixes" code nil nil [559410 559464])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [559515 559710])
            ("register-definition-prefixes" code nil nil [559711 559763])
            ("register-definition-prefixes" code nil nil [559816 559870])
            ("register-definition-prefixes" code nil nil [559922 559975])
            ("register-definition-prefixes" code nil nil [560027 560080])
            ("register-definition-prefixes" code nil nil [560130 560181])
            ("register-definition-prefixes" code nil nil [560231 560282])
            ("gnus-add-configuration" function (:prototype-flag t) nil [560333 560459])
            ("register-definition-prefixes" code nil nil [560460 560512])
            ("register-definition-prefixes" code nil nil [560560 560633])
            ("go-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560691 560789])
            ("go-mod-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560790 560902])
            ("register-definition-prefixes" code nil nil [560903 560955])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561004 561763])
            ("register-definition-prefixes" code nil nil [561764 561816])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561867 562291])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562292 562715])
            ("put" code nil nil [562716 562763])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562764 563442])
            ("put" code nil nil [563443 563499])
            ("global-goto-address-mode" variable nil nil [563500 563833])
            ("custom-autoload" code nil nil [563834 563893])
            ("global-goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [563894 564428])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [564429 565110])
            ("register-definition-prefixes" code nil nil [565111 565168])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565235 565344])
            ("register-definition-prefixes" code nil nil [565345 565434])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565501 565610])
            ("register-definition-prefixes" code nil nil [565611 565700])
            ("register-definition-prefixes" code nil nil [565760 565824])
            ("gravatar-retrieve" function (:prototype-flag t) nil [565876 566177])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [566178 566391])
            ("register-definition-prefixes" code nil nil [566392 566448])
            ("grep-window-height" variable nil nil [566500 566611])
            ("custom-autoload" code nil nil [566612 566658])
            ("grep-highlight-matches" variable (:default-value 'auto-detect) nil [566659 567860])
            ("custom-autoload" code nil nil [567861 567913])
            ("grep-command" variable nil nil [567914 568391])
            ("custom-autoload" code nil nil [568392 568434])
            ("grep-find-command" variable nil nil [568435 568903])
            ("custom-autoload" code nil nil [568904 568951])
            ("grep-setup-hook" variable nil nil [568952 569054])
            ("custom-autoload" code nil nil [569055 569098])
            ("grep-match-face" variable (:default-value 'match) nil [569099 569169])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value `((,(concat "^\\(?:" "\\(?1:[^ 
]+\\)\\(?3: \\)\\(?2:[0-9]+\\):" "\\|" "\\(?1:" "\\(?:[a-zA-Z]:\\)?" "[^
:]+?[^
/:]\\):[	 ]*\\(?2:[1-9][0-9]*\\)[	 ]*:" "\\)") 1 2 (,(lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end 'font-lock-face grep-match-face))) (when mbeg (- mbeg beg))))) \, (lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end 'font-lock-face grep-match-face)) (mend (and mbeg (next-single-property-change mbeg 'font-lock-face nil end)))) (when mend (- mend beg 1)))))) nil nil (3 '(face nil display ":"))) ("^Binary file \\(.+\\) matches" 1 nil nil 0 1)))
                nil [569170 570080])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [570081 570268])
            ("find-program" variable (:default-value (purecopy "find")) nil [570269 570414])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [570415 570613])
            ("grep-find-use-xargs" variable nil nil [570614 570989])
            ("custom-autoload" code nil nil [570990 571039])
            ("grep-history" variable nil nil [571040 571092])
            ("grep-find-history" variable nil nil [571093 571157])
            ("grep-process-setup" function (:prototype-flag t) nil [571158 571320])
            ("grep-compute-defaults" function (:prototype-flag t) nil [571321 571642])
            ("grep-mode" function (:prototype-flag t) nil [571643 571738])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571739 572667])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572668 573035])
            ("defalias" code nil nil [573036 573069])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573070 574087])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574088 575465])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575466 575849])
            ("defalias" code nil nil [575850 575877])
            ("register-definition-prefixes" code nil nil [575878 575947])
            ("register-definition-prefixes" code nil nil [576011 576086])
            ("register-definition-prefixes" code nil nil [576135 576215])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576266 577073])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577074 577279])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577280 577485])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577486 577842])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577843 578185])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578186 578593])
            ("guiler" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578594 578807])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578808 579432])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579433 579514])
            ("gud-tooltip-mode" variable nil nil [579515 579816])
            ("custom-autoload" code nil nil [579817 579862])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579863 580522])
            ("register-definition-prefixes" code nil nil [580523 580576])
            ("gv-get" function (:prototype-flag t) nil [580627 581108])
            ("gv-letplace" function (:prototype-flag t) nil [581109 581658])
            ("function-put" code nil nil [581659 581710])
            ("gv-define-expander" function (:prototype-flag t) nil [581711 582021])
            ("function-put" code nil nil [582022 582080])
            ("gv--defun-declaration" function (:prototype-flag t) nil [582081 582169])
            ("gv--expander-defun-declaration" function (:arguments ("args")) nil [582170 582274])
            ("gv--setter-defun-declaration" function (:arguments ("args")) nil [582275 582375])
            ("or" code nil nil [582376 582558])
            ("or" code nil nil [582559 582687])
            ("let" code nil nil [582688 582845])
            ("gv-define-setter" function (:prototype-flag t) nil [582846 583518])
            ("function-put" code nil nil [583519 583575])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [583576 584158])
            ("setf" function (:prototype-flag t) nil [584159 584510])
            ("def-edebug-elem-spec" code nil nil [584511 584551])
            ("gv-ref" function (:prototype-flag t) nil [584552 584843])
            ("register-definition-prefixes" code nil nil [584844 584925])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [584977 585391])
            ("register-definition-prefixes" code nil nil [585392 585475])
            ("hangul-input-method-activate" function (:prototype-flag t) nil [585530 585777])
            ("register-definition-prefixes" code nil nil [585778 585846])
            ("register-definition-prefixes" code nil nil [585903 585955])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586003 586093])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586094 586311])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586312 586395])
            ("register-definition-prefixes" code nil nil [586396 586446])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586497 586623])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586624 586813])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [586814 586929])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586930 587221])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587222 587459])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [587460 587629])
            ("register-definition-prefixes" code nil nil [587630 587686])
            ("help-at-pt-string" function (:prototype-flag t) nil [587734 588118])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [588119 588382])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [588383 589079])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589080 589228])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589229 589381])
            ("help-at-pt-display-when-idle" variable (:default-value 'never) nil [589382 590944])
            ("custom-autoload" code nil nil [590945 591009])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [591010 591944])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591945 592954])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592955 593326])
            ("register-definition-prefixes" code nil nil [593327 593408])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593454 593727])
            ("describe-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593728 593903])
            ("help-C-file-name" function (:prototype-flag t) nil [593904 594143])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [594144 595091])
            ("describe-function-1" function (:prototype-flag t) nil [595092 595154])
            ("variable-at-point" function (:prototype-flag t) nil [595155 595382])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595383 595719])
            ("describe-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595720 596147])
            ("describe-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [596148 596519])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [596520 596765])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [596766 597086])
            ("describe-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597087 597251])
            ("describe-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597252 597852])
            ("describe-widget" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597853 598379])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598380 598505])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598506 598630])
            ("register-definition-prefixes" code nil nil [598631 598717])
            ("three-step-help" variable nil nil [598765 599094])
            ("custom-autoload" code nil nil [599095 599144])
            ("register-definition-prefixes" code nil nil [599145 599210])
            ("help-mode--add-function-link" function (:prototype-flag t) nil [599257 599328])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [599329 599529])
            ("help-mode-setup" function (:prototype-flag t) nil [599530 599612])
            ("make-obsolete" code nil nil [599613 599657])
            ("help-mode-finish" function (:prototype-flag t) nil [599658 599746])
            ("make-obsolete" code nil nil [599747 599792])
            ("help-setup-xref" function (:prototype-flag t) nil [599793 600378])
            ("help-buffer" function (:prototype-flag t) nil [600379 600688])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600689 601711])
            ("help-xref-button" function (:prototype-flag t) nil [601712 602173])
            ("help-insert-xref-button" function (:prototype-flag t) nil [602174 602466])
            ("help-xref-on-pp" function (:prototype-flag t) nil [602467 602583])
            ("define-obsolete-function-alias" code nil nil [602584 602661])
            ("help-bookmark-jump" function (:prototype-flag t) nil [602662 602881])
            ("register-definition-prefixes" code nil nil [602882 602962])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603017 603113])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603114 603183])
            ("register-definition-prefixes" code nil nil [603184 603236])
            ("register-definition-prefixes" code nil nil [603282 603366])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603408 607363])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607364 607692])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607693 607817])
            ("register-definition-prefixes" code nil nil [607818 607885])
            ("htmlfontify-load-rgb-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607931 608181])
            ("hfy-fallback-color-values" function (:prototype-flag t) nil [608182 608317])
            ("register-definition-prefixes" code nil nil [608318 608399])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [608444 611829])
            ("put" code nil nil [611830 611881])
            ("global-hi-lock-mode" variable nil nil [611882 612195])
            ("custom-autoload" code nil nil [612196 612248])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [612249 612754])
            ("defalias" code nil nil [612755 612824])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [612825 613505])
            ("defalias" code nil nil [613506 613555])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [613556 614607])
            ("defalias" code nil nil [614608 614664])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614665 615474])
            ("defalias" code nil nil [615475 615542])
            ("hi-lock-face-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615543 616287])
            ("defalias" code nil nil [616288 616341])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [616342 616688])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [616689 617002])
            ("hi-lock-find-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [617003 617122])
            ("hi-lock-context-menu" function (:prototype-flag t) nil [617123 617247])
            ("register-definition-prefixes" code nil nil [617248 617359])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [617413 619592])
            ("register-definition-prefixes" code nil nil [619593 619769])
            ("hs-special-modes-alist" variable (:default-value (mapcar #'purecopy '((c-mode "{" "}" "/[*/]" nil nil) (c-ts-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (c++-ts-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (java-ts-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil) (js-ts-mode "{" "}" "/[*/]" nil) (mhtml-mode "{\\|<[^/>]*?" "}\\|</[^/>]*[^/]>" "<!--" mhtml-forward nil)))) nil [619825 621902])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621903 623147])
            ("turn-off-hideshow" function (:prototype-flag t) nil [623148 623234])
            ("register-definition-prefixes" code nil nil [623235 623285])
            ("register-definition-prefixes" code nil nil [623343 623401])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623448 624914])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624915 625933])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625934 626148])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626149 626280])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626281 626420])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626421 627086])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [627087 627666])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [627667 628280])
            ("put" code nil nil [628281 628342])
            ("global-highlight-changes-mode" variable nil nil [628343 628696])
            ("custom-autoload" code nil nil [628697 628761])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [628762 629333])
            ("register-definition-prefixes" code nil nil [629334 629405])
            ("hippie-expand-try-functions-list" variable (:default-value '(try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)) nil [629453 629924])
            ("custom-autoload" code nil nil [629925 629991])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629992 630473])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [630474 630734])
            ("register-definition-prefixes" code nil nil [630735 630811])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [630856 631943])
            ("global-hl-line-mode" variable nil nil [631944 632257])
            ("custom-autoload" code nil nil [632258 632310])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [632311 633239])
            ("register-definition-prefixes" code nil nil [633240 633312])
            ("register-definition-prefixes" code nil nil [633362 633429])
            ("register-definition-prefixes" code nil nil [633479 633547])
            ("holiday-general-holidays" variable (:default-value (mapcar 'purecopy '((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving")))) nil [633602 634423])
            ("custom-autoload" code nil nil [634424 634480])
            ("put" code nil nil [634481 634536])
            ("holiday-oriental-holidays" variable (:default-value (mapcar 'purecopy '((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice)))))) nil [634537 635038])
            ("custom-autoload" code nil nil [635039 635096])
            ("put" code nil nil [635097 635153])
            ("holiday-local-holidays" variable nil nil [635154 635268])
            ("custom-autoload" code nil nil [635269 635323])
            ("put" code nil nil [635324 635377])
            ("holiday-other-holidays" variable nil nil [635378 635499])
            ("custom-autoload" code nil nil [635500 635554])
            ("put" code nil nil [635555 635608])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar 'purecopy '((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc)))))) nil [635609 635924])
            ("custom-autoload" code nil nil [635925 635980])
            ("put" code nil nil [635981 636035])
            ("holiday-christian-holidays" variable (:default-value (mapcar 'purecopy '((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent")))))) nil [636036 636460])
            ("custom-autoload" code nil nil [636461 636519])
            ("put" code nil nil [636520 636577])
            ("holiday-islamic-holidays" variable (:default-value (mapcar 'purecopy '((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha")))))) nil [636578 637088])
            ("custom-autoload" code nil nil [637089 637145])
            ("put" code nil nil [637146 637201])
            ("holiday-bahai-holidays" variable (:default-value (mapcar 'purecopy '((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the Báb") (holiday-fixed 5 29 "Ascension of Bahá’u’lláh") (holiday-fixed 7 9 "Martyrdom of the Báb") (holiday-fixed 10 20 "Birth of the Báb") (holiday-fixed 11 12 "Birth of Bahá’u’lláh") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu’l-Bahá")))))) nil [637202 637747])
            ("custom-autoload" code nil nil [637748 637802])
            ("put" code nil nil [637803 637856])
            ("holiday-solar-holidays" variable (:default-value (mapcar 'purecopy '((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name)))))) nil [637857 638409])
            ("custom-autoload" code nil nil [638410 638464])
            ("put" code nil nil [638465 638518])
            ("put" code nil nil [638519 638567])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638568 638823])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638824 639818])
            ("defalias" code nil nil [639819 639858])
            ("register-definition-prefixes" code nil nil [639859 639926])
            ("register-definition-prefixes" code nil nil [639983 640044])
            ("push" code nil nil [640093 640156])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640157 640898])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640899 641203])
            ("register-definition-prefixes" code nil nil [641204 641273])
            ("register-definition-prefixes" code nil nil [641328 641390])
            ("register-definition-prefixes" code nil nil [641448 641514])
            ("register-definition-prefixes" code nil nil [641560 641615])
            ("define-ibuffer-column" function (:prototype-flag t) nil [641662 642762])
            ("function-put" code nil nil [642763 642829])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [642830 643330])
            ("function-put" code nil nil [643331 643392])
            ("function-put" code nil nil [643393 643448])
            ("define-ibuffer-op" function (:prototype-flag t) nil [643449 645467])
            ("function-put" code nil nil [645468 645525])
            ("function-put" code nil nil [645526 645577])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [645578 646317])
            ("function-put" code nil nil [646318 646379])
            ("function-put" code nil nil [646380 646435])
            ("register-definition-prefixes" code nil nil [646436 646492])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646537 646759])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646760 646996])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646997 647893])
            ("ibuffer-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [647894 648096])
            ("register-definition-prefixes" code nil nil [648097 648151])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648207 648463])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648464 648933])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648934 649276])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649277 649984])
            ("register-definition-prefixes" code nil nil [649985 650043])
            ("fido-mode" variable nil nil [650090 650363])
            ("custom-autoload" code nil nil [650364 650408])
            ("fido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650409 651183])
            ("icomplete-mode" variable nil nil [651184 651477])
            ("custom-autoload" code nil nil [651478 651527])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651528 652681])
            ("icomplete-vertical-mode" variable nil nil [652682 653011])
            ("custom-autoload" code nil nil [653012 653070])
            ("icomplete-vertical-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [653071 654032])
            ("fido-vertical-mode" variable nil nil [654033 654342])
            ("custom-autoload" code nil nil [654343 654396])
            ("fido-vertical-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [654397 655191])
            ("when" code nil nil [655192 655387])
            ("register-definition-prefixes" code nil nil [655388 655446])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [655498 656919])
            ("register-definition-prefixes" code nil nil [656920 657099])
            ("describe-icon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657153 657237])
            ("register-definition-prefixes" code nil nil [657238 657309])
            ("register-definition-prefixes" code nil nil [657366 657494])
            ("register-definition-prefixes" code nil nil [657565 657635])
            ("register-definition-prefixes" code nil nil [657692 657748])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657806 658644])
            ("register-definition-prefixes" code nil nil [658645 658702])
            ("register-definition-prefixes" code nil nil [658762 658828])
            ("push" code nil nil [658883 658944])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658945 663844])
            ("register-definition-prefixes" code nil nil [663845 663899])
            ("ido-mode" variable nil nil [663940 664404])
            ("custom-autoload" code nil nil [664405 664442])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664443 664955])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664956 666641])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666642 666870])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666871 667251])
            ("ido-display-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667252 667470])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667471 667643])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667644 667862])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667863 668089])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668090 668186])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668187 670720])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670721 670937])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [670938 671157])
            ("ido-find-alternate-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671158 671390])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671391 671605])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671606 671849])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671850 672091])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672092 672298])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672299 672513])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672514 672696])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672697 672891])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672892 673063])
            ("ido-dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673064 673292])
            ("ido-dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673293 673512])
            ("ido-read-buffer" function (:prototype-flag t) nil [673513 673988])
            ("ido-read-file-name" function (:prototype-flag t) nil [673989 674271])
            ("ido-read-directory-name" function (:prototype-flag t) nil [674272 674563])
            ("ido-completing-read" function (:prototype-flag t) nil [674564 675529])
            ("register-definition-prefixes" code nil nil [675530 675576])
            ("register-definition-prefixes" code nil nil [675643 675737])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675779 676033])
            ("register-definition-prefixes" code nil nil [676034 676109])
            ("register-definition-prefixes" code nil nil [676162 676222])
            ("register-definition-prefixes" code nil nil [676280 676364])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676408 677022])
            ("register-definition-prefixes" code nil nil [677023 677098])
            ("image-type-from-data" function (:prototype-flag t) nil [677141 677324])
            ("image-type-from-buffer" function (:prototype-flag t) nil [677325 677510])
            ("image-type-from-file-header" function (:prototype-flag t) nil [677511 677719])
            ("image-type-from-file-name" function (:prototype-flag t) nil [677720 677915])
            ("make-obsolete" code nil nil [677916 677989])
            ("image-type" function (:prototype-flag t) nil [677990 678600])
            ("image-type-available-p" function (:prototype-flag t) nil [678601 678746])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [678747 679229])
            ("create-image" function (:prototype-flag t) nil [679230 680305])
            ("put-image" function (:prototype-flag t) nil [680306 681040])
            ("insert-image" function (:prototype-flag t) nil [681041 682137])
            ("insert-sliced-image" function (:prototype-flag t) nil [682138 682712])
            ("remove-images" function (:prototype-flag t) nil [682713 682952])
            ("find-image" function (:prototype-flag t) nil [682953 684005])
            ("defimage" function (:prototype-flag t) nil [684006 684820])
            ("function-put" code nil nil [684821 684863])
            ("function-put" code nil nil [684864 684917])
            ("imagemagick-register-types" function (:prototype-flag t) nil [684918 685480])
            ("image-at-point-p" function (:prototype-flag t) nil [685481 685567])
            ("register-definition-prefixes" code nil nil [685568 685658])
            ("image-converter-add-handler" function (:prototype-flag t) nil [685717 686189])
            ("register-definition-prefixes" code nil nil [686190 686257])
            ("image-cut" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686311 687136])
            ("image-crop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687137 687992])
            ("register-definition-prefixes" code nil nil [687993 688049])
            ("push" code nil nil [688104 688166])
            ("put" code nil nil [688167 688259])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688260 688893])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688894 689895])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689896 690309])
            ("defalias" code nil nil [690310 690364])
            ("image-dired-bookmark-jump" function (:prototype-flag t) nil [690365 690485])
            ("define-obsolete-function-alias" code nil nil [690486 690546])
            ("define-obsolete-function-alias" code nil nil [690547 690648])
            ("register-definition-prefixes" code nil nil [690649 690711])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690772 691321])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691322 691431])
            ("image-dired-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691432 693565])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693566 693702])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693703 693843])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693844 694047])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694048 694247])
            ("set-advertised-calling-convention" code nil nil [694248 694329])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694330 694770])
            ("register-definition-prefixes" code nil nil [694771 694839])
            ("register-definition-prefixes" code nil nil [694903 694974])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695034 695202])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695203 695374])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695375 695504])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695505 695722])
            ("register-definition-prefixes" code nil nil [695723 695790])
            ("register-definition-prefixes" code nil nil [695850 695917])
            ("image-file-name-extensions" variable (:default-value (purecopy '("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "webp"))) nil [695965 696510])
            ("custom-autoload" code nil nil [696511 696573])
            ("image-file-name-regexps" variable nil nil [696574 697047])
            ("custom-autoload" code nil nil [697048 697107])
            ("image-file-name-regexp" function (:prototype-flag t) nil [697108 697218])
            ("insert-image-file" function (:prototype-flag t) nil [697219 697537])
            ("auto-image-file-mode" variable nil nil [697538 697855])
            ("custom-autoload" code nil nil [697856 697912])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697913 698753])
            ("register-definition-prefixes" code nil nil [698754 698814])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [698862 699118])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699119 699919])
            ("image-mode-to-text" function (:prototype-flag t) nil [699920 700143])
            ("image-bookmark-jump" function (:prototype-flag t) nil [700144 700203])
            ("register-definition-prefixes" code nil nil [700204 700259])
            ("register-definition-prefixes" code nil nil [700305 700353])
            ("register-definition-prefixes" code nil nil [700411 700473])
            ("imenu-sort-function" variable nil nil [700516 701051])
            ("custom-autoload" code nil nil [701052 701100])
            ("defvar-local" code nil nil [701101 702671])
            ("put" code nil nil [702672 702727])
            ("defvar-local" code nil nil [702728 703100])
            ("defvar-local" code nil nil [703101 703343])
            ("defvar-local" code nil nil [703344 703790])
            ("defvar-local" code nil nil [703791 704090])
            ("defvar-local" code nil nil [704091 704455])
            ("defvar-local" code nil nil [704456 704665])
            ("put" code nil nil [704666 704715])
            ("defvar-local" code nil nil [704716 705188])
            ("defvar-local" code nil nil [705189 705498])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705499 705712])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705713 705906])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705907 706117])
            ("register-definition-prefixes" code nil nil [706118 706168])
            ("register-definition-prefixes" code nil nil [706237 706321])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706376 706502])
            ("indian-compose-string" function (:prototype-flag t) nil [706503 706565])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [706566 706635])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [706636 706709])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706710 706830])
            ("register-definition-prefixes" code nil nil [706831 706912])
            ("register-definition-prefixes" code nil nil [706967 707065])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [707121 707694])
            ("defalias" code nil nil [707695 707730])
            ("register-definition-prefixes" code nil nil [707731 707817])
            ("Info-default-directory-list" variable nil nil [707859 708571])
            ("custom-autoload" code nil nil [708572 708627])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708628 708762])
            ("put" code nil nil [708764 708805])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708806 709749])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709750 709831])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709832 709944])
            ("info-standalone" function (:prototype-flag t) nil [709945 710139])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710140 710362])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710363 710433])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710434 710824])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710825 711058])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711059 711386])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711387 715112])
            ("put" code nil nil [715114 715179])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715180 715511])
            ("put" code nil nil [715513 715582])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715583 715991])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715992 716136])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [716137 716309])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716310 716646])
            ("register-definition-prefixes" code nil nil [716647 716703])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716750 716983])
            ("put" code nil nil [716985 717029])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717030 717930])
            ("put" code nil nil [717932 717974])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717975 718798])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718799 718916])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718917 719030])
            ("register-definition-prefixes" code nil nil [719031 719084])
            ("push" code nil nil [719131 719189])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719190 720420])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720421 721000])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721001 721376])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721377 722242])
            ("register-definition-prefixes" code nil nil [722243 722301])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722347 722492])
            ("Info-split-threshold" variable (:default-value 262144) nil [722493 722601])
            ("custom-autoload" code nil nil [722602 722654])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722655 723329])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723330 723481])
            ("batch-info-validate" function (:prototype-flag t) nil [723482 723796])
            ("register-definition-prefixes" code nil nil [723797 723858])
            ("define-inline" function (:prototype-flag t) nil [723913 724167])
            ("function-put" code nil nil [724168 724226])
            ("function-put" code nil nil [724227 724274])
            ("register-definition-prefixes" code nil nil [724275 724327])
            ("register-definition-prefixes" code nil nil [724385 724446])
            ("register-definition-prefixes" code nil nil [724498 724558])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724619 724747])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724748 724848])
            ("isearch-transient-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724849 724964])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [724965 725069])
            ("register-definition-prefixes" code nil nil [725070 725126])
            ("push" code nil nil [725172 725231])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725232 725486])
            ("register-definition-prefixes" code nil nil [725487 725542])
            ("register-definition-prefixes" code nil nil [725603 725661])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725720 725985])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725986 726240])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [726241 726503])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [726504 726766])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [726767 727038])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727039 727310])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727311 727579])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727580 727840])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727841 728101])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728102 728197])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728198 728295])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728296 728414])
            ("register-definition-prefixes" code nil nil [728415 728465])
            ("register-definition-prefixes" code nil nil [728519 728573])
            ("put" code nil nil [728627 728717])
            ("ispell-personal-dictionary" variable nil nil [728718 729040])
            ("custom-autoload" code nil nil [729041 729097])
            ("put" code nil nil [729098 729167])
            ("ispell-menu-map" variable
               (:constant-flag t
                :default-value (let ((map (make-sparse-keymap "Spell"))) (define-key map [ispell-change-dictionary] `(menu-item ,(purecopy "Change Dictionary...") ispell-change-dictionary :help ,(purecopy "Supply explicit dictionary file name"))) (define-key map [ispell-kill-ispell] `(menu-item ,(purecopy "Kill Process") (lambda nil (interactive) (ispell-kill-ispell nil 'clear)) :enable (and (boundp 'ispell-process) ispell-process (eq (ispell-process-status) 'run)) :help ,(purecopy "Terminate Ispell subprocess"))) (define-key map [ispell-pdict-save] `(menu-item ,(purecopy "Save Dictionary") (lambda nil (interactive) (ispell-pdict-save t t)) :help ,(purecopy "Save personal dictionary"))) (define-key map [ispell-customize] `(menu-item ,(purecopy "Customize...") (lambda nil (interactive) (customize-group 'ispell)) :help ,(purecopy "Customize spell checking options"))) (define-key map [ispell-help] `(menu-item ,(purecopy "Help") (lambda nil (interactive) (describe-function 'ispell-help)) :help ,(purecopy "Show standard Ispell keybindings and commands"))) (define-key map [flyspell-mode] `(menu-item ,(purecopy "Automatic spell checking (Flyspell)") flyspell-mode :help ,(purecopy "Check spelling while you edit the text") :button (:toggle bound-and-true-p flyspell-mode))) (define-key map [ispell-complete-word] `(menu-item ,(purecopy "Complete Word") ispell-complete-word :help ,(purecopy "Complete word at cursor using dictionary"))) (define-key map [ispell-complete-word-interior-frag] `(menu-item ,(purecopy "Complete Word Fragment") ispell-complete-word-interior-frag :help ,(purecopy "Complete word fragment at cursor"))) (define-key map [ispell-continue] `(menu-item ,(purecopy "Continue Spell-Checking") ispell-continue :enable (and (boundp 'ispell-region-end) (marker-position ispell-region-end) (equal (marker-buffer ispell-region-end) (current-buffer))) :help ,(purecopy "Continue spell checking last region"))) (define-key map [ispell-word] `(menu-item ,(purecopy "Spell-Check Word") ispell-word :help ,(purecopy "Spell-check word at cursor"))) (define-key map [ispell-comments-and-strings] `(menu-item ,(purecopy "Spell-Check Comments") ispell-comments-and-strings :help ,(purecopy "Spell-check only comments and strings"))) (define-key map [ispell-region] `(menu-item ,(purecopy "Spell-Check Region") ispell-region :enable mark-active :help ,(purecopy "Spell-check text in marked region"))) (define-key map [ispell-message] `(menu-item ,(purecopy "Spell-Check Message") ispell-message :visible (eq major-mode 'mail-mode) :help ,(purecopy "Skip headers and included message text"))) (define-key map [ispell-buffer] `(menu-item ,(purecopy "Spell-Check Buffer") ispell-buffer :help ,(purecopy "Check spelling of selected buffer"))) map))
                nil [729168 731952])
            ("fset" code nil nil [731953 732008])
            ("ispell-skip-region-alist" variable (:default-value `((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) (,(purecopy "^---*BEGIN PGP [A-Z ]*--*") \, (purecopy "^---*END PGP [A-Z ]*--*")) (,(purecopy "^begin [0-9][0-9][0-9] [^ 	]+$") \, (purecopy "
end
")) (,(purecopy "^%!PS-Adobe-[123].0") \, (purecopy "
%%EOF
")) (,(purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage") \, (purecopy "^---* End of [Ff]orwarded [Mm]essage")))) nil [732009 732910])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy '((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\cref" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{document}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	]*{program}") ("verbatim\\*?" . "\\\\end[ 	]*{verbatim\\*?}"))))) nil [732911 733709])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value '(("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]")))
                nil [733710 734261])
            ("put" code nil nil [734262 734317])
            ("define-key" code nil nil [734319 734356])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [734357 735725])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [735726 735901])
            ("ispell-help" function (:prototype-flag t) nil [735902 737034])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737035 737294])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737295 737602])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737603 737926])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737927 738261])
            ("ispell-comment-or-string-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738262 738388])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738389 738565])
            ("ispell-buffer-with-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738566 738765])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738766 738876])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738877 739337])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739338 739457])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739458 739892])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739893 740911])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [740912 741867])
            ("register-definition-prefixes" code nil nil [741868 741943])
            ("register-definition-prefixes" code nil nil [742005 742102])
            ("register-definition-prefixes" code nil nil [742164 742220])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [742277 742337])
            ("japanese-katakana" function (:prototype-flag t) nil [742338 742803])
            ("japanese-hiragana" function (:prototype-flag t) nil [742804 743037])
            ("japanese-hankaku" function (:prototype-flag t) nil [743038 743367])
            ("japanese-zenkaku" function (:prototype-flag t) nil [743368 743601])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743602 743881])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743882 744020])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744021 744360])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744361 744705])
            ("read-hiragana-string" function (:prototype-flag t) nil [744706 744941])
            ("register-definition-prefixes" code nil nil [744942 745000])
            ("register-definition-prefixes" code nil nil [745057 745125])
            ("register-definition-prefixes" code nil nil [745182 745243])
            ("register-definition-prefixes" code nil nil [745312 745411])
            ("java-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745471 745575])
            ("register-definition-prefixes" code nil nil [745576 745640])
            ("register-definition-prefixes" code nil nil [745710 745818])
            ("jka-compr-inhibit" variable nil nil [745865 746079])
            ("jka-compr-handler" function (:prototype-flag t) nil [746080 746153])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [746154 746377])
            ("register-definition-prefixes" code nil nil [746378 746456])
            ("push" code nil nil [746506 746557])
            ("js-base-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746558 746754])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746755 746826])
            ("js-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746827 746921])
            ("js-json-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746922 746964])
            ("js-jsx-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746965 747542])
            ("defalias" code nil nil [747544 747580])
            ("dolist" code nil nil [747581 747703])
            ("register-definition-prefixes" code nil nil [747704 747748])
            ("push" code nil nil [747790 747845])
            ("register-definition-prefixes" code nil nil [747846 747894])
            ("json-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [747954 748058])
            ("register-definition-prefixes" code nil nil [748059 748118])
            ("push" code nil nil [748163 748224])
            ("register-definition-prefixes" code nil nil [748225 748279])
            ("register-definition-prefixes" code nil nil [748323 748375])
            ("keypad-setup" variable nil nil [748429 748640])
            ("custom-autoload" code nil nil [748641 748685])
            ("keypad-numlock-setup" variable nil nil [748686 748904])
            ("custom-autoload" code nil nil [748905 748957])
            ("keypad-shifted-setup" variable nil nil [748958 749175])
            ("custom-autoload" code nil nil [749176 749228])
            ("keypad-numlock-shifted-setup" variable nil nil [749229 749454])
            ("custom-autoload" code nil nil [749455 749515])
            ("keypad-setup" function (:prototype-flag t) nil [749516 750552])
            ("kinsoku" function (:prototype-flag t) nil [750611 751246])
            ("register-definition-prefixes" code nil nil [751247 751301])
            ("kkc-after-update-conversion-functions" variable nil nil [751356 751734])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751735 752157])
            ("register-definition-prefixes" code nil nil [752158 752204])
            ("global-set-key" code nil nil [752249 752294])
            ("global-set-key" code nil nil [752296 752339])
            ("global-set-key" code nil nil [752341 752393])
            ("global-set-key" code nil nil [752395 752455])
            ("global-set-key" code nil nil [752457 752505])
            ("global-set-key" code nil nil [752507 752550])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [752552 752634])
            ("define-obsolete-function-alias" code nil nil [752635 752796])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [752797 753848])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [753849 754307])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [754308 754944])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [754945 755952])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [755953 756219])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [756220 756589])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [756590 756791])
            ("kmacro" function (:prototype-flag t) nil [756792 756973])
            ("kmacro-lambda-form" function (:prototype-flag t) nil [756974 757053])
            ("make-obsolete" code nil nil [757054 757104])
            ("kmacro-name-last-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [757105 757406])
            ("register-definition-prefixes" code nil nil [757407 757459])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-search "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [757516 757741])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [757742 757800])
            ("register-definition-prefixes" code nil nil [757801 757958])
            ("register-definition-prefixes" code nil nil [758010 758093])
            ("lao-compose-string" function (:prototype-flag t) nil [758148 758204])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [758205 758732])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [758733 758865])
            ("lao-composition-function" function (:prototype-flag t) nil [758866 758942])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758943 759005])
            ("register-definition-prefixes" code nil nil [759006 759057])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy '(("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-9) ("latin9" . iso-8859-15) ("latin10" . iso-8859-16) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8)))) nil [759117 759852])
            ("custom-autoload" code nil nil [759853 759912])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [759913 760116])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [760117 760315])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [760316 760599])
            ("register-definition-prefixes" code nil nil [760600 760665])
            ("latin1-display" variable nil nil [760728 761430])
            ("custom-autoload" code nil nil [761431 761482])
            ("latin1-display" function (:prototype-flag t) nil [761483 761816])
            ("latin1-display-ucs-per-lynx" variable nil nil [761817 762164])
            ("custom-autoload" code nil nil [762165 762229])
            ("latin1-display-ucs-per-lynx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762230 762602])
            ("register-definition-prefixes" code nil nil [762603 762668])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762725 762817])
            ("register-definition-prefixes" code nil nil [762818 762876])
            ("register-definition-prefixes" code nil nil [762922 762970])
            ("register-definition-prefixes" code nil nil [763030 763097])
            ("put" code nil nil [763158 763221])
            ("put" code nil nil [763222 763274])
            ("put" code nil nil [763275 763338])
            ("put" code nil nil [763339 763401])
            ("add-to-list" code nil nil [763403 763465])
            ("less-css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763466 763616])
            ("register-definition-prefixes" code nil nil [763617 763678])
            ("push" code nil nil [763736 763798])
            ("let-alist" function (:prototype-flag t) nil [763799 764733])
            ("function-put" code nil nil [764734 764783])
            ("register-definition-prefixes" code nil nil [764784 764843])
            ("register-definition-prefixes" code nil nil [764899 764972])
            ("register-definition-prefixes" code nil nil [765032 765118])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765165 765511])
            ("register-definition-prefixes" code nil nil [765512 765560])
            ("register-definition-prefixes" code nil nil [765613 765688])
            ("register-definition-prefixes" code nil nil [765745 765795])
            ("register-definition-prefixes" code nil nil [765859 765934])
            ("put" code nil nil [765995 766055])
            ("put" code nil nil [766056 766121])
            ("loaddefs-generate" function (:prototype-flag t) nil [766122 767256])
            ("loaddefs-generate-batch" function (:prototype-flag t) nil [767257 767535])
            ("load" code nil nil [767537 767565])
            ("register-definition-prefixes" code nil nil [767566 767692])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767738 768851])
            ("register-definition-prefixes" code nil nil [768852 768952])
            ("register-definition-prefixes" code nil nil [769006 769066])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [769110 769309])
            ("custom-autoload" code nil nil [769310 769365])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769366 770425])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770426 771181])
            ("register-definition-prefixes" code nil nil [771182 771234])
            ("log-edit" function (:prototype-flag t) nil [771283 772611])
            ("register-definition-prefixes" code nil nil [772612 772668])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772717 772805])
            ("log-view-get-marked" function (:prototype-flag t) nil [772806 772904])
            ("register-definition-prefixes" code nil nil [772905 772961])
            ("lpr-windows-system" variable (:default-value (memq system-type '(ms-dos windows-nt))) nil [773002 773117])
            ("lpr-lp-system" variable (:default-value (memq system-type '(usg-unix-v hpux))) nil [773118 773248])
            ("printer-name" variable (:default-value (and (eq system-type 'ms-dos) "PRN")) nil [773249 774062])
            ("custom-autoload" code nil nil [774063 774102])
            ("lpr-switches" variable nil nil [774103 774311])
            ("custom-autoload" code nil nil [774312 774351])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [774352 774918])
            ("custom-autoload" code nil nil [774919 774957])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774958 775143])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775144 775699])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775700 775901])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775902 776477])
            ("register-definition-prefixes" code nil nil [776478 776532])
            ("register-definition-prefixes" code nil nil [776584 776660])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [776705 776888])
            ("custom-autoload" code nil nil [776889 776951])
            ("register-definition-prefixes" code nil nil [776952 777006])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777058 777326])
            ("register-definition-prefixes" code nil nil [777327 777438])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777493 777571])
            ("register-definition-prefixes" code nil nil [777572 777621])
            ("defalias" code nil nil [777665 777721])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777722 778414])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778415 779072])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779073 780535])
            ("define-key" code nil nil [780537 780580])
            ("register-definition-prefixes" code nil nil [780581 780631])
            ("mail-extract-address-components" function (:prototype-flag t) nil [780683 782044])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [782045 782160])
            ("register-definition-prefixes" code nil nil [782161 782219])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [782271 782386])
            ("mail-hist-enable" function (:prototype-flag t) nil [782387 782427])
            ("mail-hist-keep-history" variable (:default-value t) nil [782428 782533])
            ("custom-autoload" code nil nil [782534 782589])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [782590 782863])
            ("register-definition-prefixes" code nil nil [782864 782922])
            ("register-definition-prefixes" code nil nil [782975 783029])
            ("register-definition-prefixes" code nil nil [783082 783142])
            ("register-definition-prefixes" code nil nil [783196 783257])
            ("mail-use-rfc822" variable nil nil [783310 783500])
            ("custom-autoload" code nil nil [783501 783550])
            ("mail-dont-reply-to-names" variable nil nil [783551 783892])
            ("custom-autoload" code nil nil [783893 783951])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [783952 784049])
            ("mail-quote-printable" function (:prototype-flag t) nil [784050 784395])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784396 784643])
            ("mail-unquote-printable" function (:prototype-flag t) nil [784644 784886])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784887 785528])
            ("mail-fetch-field" function (:prototype-flag t) nil [785529 786090])
            ("register-definition-prefixes" code nil nil [786091 786145])
            ("mail-abbrevs-mode" variable nil nil [786198 786503])
            ("custom-autoload" code nil nil [786504 786557])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786558 787484])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [787485 787576])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [787577 787797])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787798 788235])
            ("register-definition-prefixes" code nil nil [788236 788334])
            ("mail-complete-style" variable (:default-value 'angles) nil [788386 788700])
            ("custom-autoload" code nil nil [788701 788753])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788754 789160])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789161 789615])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [789616 789763])
            ("register-definition-prefixes" code nil nil [789764 789838])
            ("mailcap-mime-type-to-extension" function (:prototype-flag t) nil [789887 790058])
            ("register-definition-prefixes" code nil nil [790059 790113])
            ("mailclient-send-it" function (:prototype-flag t) nil [790166 790365])
            ("register-definition-prefixes" code nil nil [790366 790426])
            ("register-definition-prefixes" code nil nil [790479 790539])
            ("mairix-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790587 790793])
            ("mairix-use-saved-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790794 790884])
            ("mairix-edit-saved-searches-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790885 791007])
            ("mairix-search-from-this-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791008 791266])
            ("mairix-search-thread-this-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791267 791482])
            ("mairix-widget-search-based-on-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791483 791607])
            ("mairix-edit-saved-searches" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791608 791691])
            ("mairix-widget-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791692 791871])
            ("mairix-update-database" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791872 792103])
            ("register-definition-prefixes" code nil nil [792104 792156])
            ("register-definition-prefixes" code nil nil [792220 792288])
            ("register-definition-prefixes" code nil nil [792340 792391])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792448 795744])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795745 795857])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795858 795964])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795965 796073])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796074 796185])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796186 796292])
            ("register-definition-prefixes" code nil nil [796293 796350])
            ("register-definition-prefixes" code nil nil [796411 796476])
            ("register-definition-prefixes" code nil nil [796532 796588])
            ("defalias" code nil nil [796629 796658])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796659 798191])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [798192 798324])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [798325 798421])
            ("Man-context-menu" function (:prototype-flag t) nil [798422 798536])
            ("register-definition-prefixes" code nil nil [798537 798589])
            ("push" code nil nil [798641 798697])
            ("register-definition-prefixes" code nil nil [798698 798744])
            ("register-definition-prefixes" code nil nil [798799 798857])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [798901 799820])
            ("register-definition-prefixes" code nil nil [799821 799873])
            ("minibuffer-depth-indicate-mode" variable nil nil [799919 800276])
            ("custom-autoload" code nil nil [800277 800341])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [800342 801285])
            ("register-definition-prefixes" code nil nil [801286 801350])
            ("register-definition-prefixes" code nil nil [801391 801436])
            ("memory-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801498 801749])
            ("register-definition-prefixes" code nil nil [801750 801816])
            ("define-mail-user-agent" code nil nil [801866 801987])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801988 802159])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802160 802558])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802559 802675])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802676 802825])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802826 802959])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802960 803137])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803138 803286])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803287 803499])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803500 803607])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803608 803817])
            ("message-forward-make-body" function (:prototype-flag t) nil [803818 803908])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [803909 803988])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803989 804074])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804075 804170])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804171 804384])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804385 804537])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804538 804688])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804689 804818])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804819 804947])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804948 805183])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805184 805402])
            ("message-mailto" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805403 805756])
            ("register-definition-prefixes" code nil nil [805757 805811])
            ("push" code nil nil [805868 805928])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805929 806019])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806020 806110])
            ("register-definition-prefixes" code nil nil [806111 806163])
            ("register-definition-prefixes" code nil nil [806214 806315])
            ("register-definition-prefixes" code nil nil [806366 806416])
            ("register-definition-prefixes" code nil nil [806469 806521])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806571 806700])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806701 806859])
            ("mh-smail-batch" function (:prototype-flag t) nil [806860 807409])
            ("define-mail-user-agent" code nil nil [807410 807539])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [807540 808191])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808192 809270])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809271 809570])
            ("register-definition-prefixes" code nil nil [809571 809620])
            ("push" code nil nil [809667 809725])
            ("put" code nil nil [809726 809765])
            ("put" code nil nil [809766 809803])
            ("put" code nil nil [809804 809847])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809848 809955])
            ("register-definition-prefixes" code nil nil [809956 810044])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810096 810306])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810307 810523])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810524 812260])
            ("register-definition-prefixes" code nil nil [812261 812312])
            ("register-definition-prefixes" code nil nil [812363 812413])
            ("register-definition-prefixes" code nil nil [812467 812520])
            ("register-definition-prefixes" code nil nil [812569 812627])
            ("register-definition-prefixes" code nil nil [812677 812726])
            ("register-definition-prefixes" code nil nil [812778 812829])
            ("register-definition-prefixes" code nil nil [812880 812930])
            ("register-definition-prefixes" code nil nil [812980 813029])
            ("register-definition-prefixes" code nil nil [813080 813131])
            ("register-definition-prefixes" code nil nil [813181 813230])
            ("register-definition-prefixes" code nil nil [813282 813333])
            ("register-definition-prefixes" code nil nil [813382 813430])
            ("register-definition-prefixes" code nil nil [813480 813529])
            ("register-definition-prefixes" code nil nil [813580 813630])
            ("register-definition-prefixes" code nil nil [813682 813733])
            ("register-definition-prefixes" code nil nil [813787 813849])
            ("register-definition-prefixes" code nil nil [813900 813950])
            ("register-definition-prefixes" code nil nil [814001 814051])
            ("mhtml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [814109 814380])
            ("register-definition-prefixes" code nil nil [814381 814436])
            ("midnight-mode" variable nil nil [814482 814771])
            ("custom-autoload" code nil nil [814772 814819])
            ("midnight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [814820 815486])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [815487 816098])
            ("midnight-delay-set" function (:prototype-flag t) nil [816099 816309])
            ("register-definition-prefixes" code nil nil [816310 816387])
            ("minibuffer-electric-default-mode" variable nil nil [816438 816803])
            ("custom-autoload" code nil nil [816804 816875])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [816876 817963])
            ("register-definition-prefixes" code nil nil [817964 818023])
            ("copy-from-above-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818065 818420])
            ("duplicate-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818421 818736])
            ("duplicate-dwim" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818737 819117])
            ("zap-up-to-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819118 819553])
            ("mark-beginning-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819554 819644])
            ("mark-end-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819645 819723])
            ("upcase-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819724 819834])
            ("forward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819835 819982])
            ("backward-to-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [819983 820126])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820127 820693])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820694 821132])
            ("register-definition-prefixes" code nil nil [821133 821232])
            ("add-hook" code nil nil [821279 821329])
            ("multi-isearch-next-buffer-function" variable nil nil [821330 822369])
            ("multi-isearch-next-buffer-current-function" variable nil nil [822370 822568])
            ("multi-isearch-current-buffer" variable nil nil [822569 822731])
            ("multi-isearch-buffer-list" variable nil nil [822732 822903])
            ("multi-isearch-file-list" variable nil nil [822904 823004])
            ("multi-isearch-setup" function (:prototype-flag t) nil [823005 823139])
            ("multi-isearch-switch-buffer" function (:prototype-flag t) nil [823140 823244])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823245 823584])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823585 823938])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823939 824359])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824360 824794])
            ("register-definition-prefixes" code nil nil [824795 824883])
            ("push" code nil nil [824941 825002])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [825003 825089])
            ("register-definition-prefixes" code nil nil [825090 825145])
            ("register-definition-prefixes" code nil nil [825198 825250])
            ("register-definition-prefixes" code nil nil [825302 825353])
            ("register-definition-prefixes" code nil nil [825405 825456])
            ("define-obsolete-function-alias" code nil nil [825508 825596])
            ("mm-default-file-type" function (:prototype-flag t) nil [825597 825696])
            ("register-definition-prefixes" code nil nil [825697 825748])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [825800 825918])
            ("mm-inline-external-body" function (:prototype-flag t) nil [825919 826204])
            ("register-definition-prefixes" code nil nil [826205 826263])
            ("mm-inline-partial" function (:prototype-flag t) nil [826316 826590])
            ("register-definition-prefixes" code nil nil [826591 826661])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [826710 826860])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [826861 826984])
            ("register-definition-prefixes" code nil nil [826985 827037])
            ("register-definition-prefixes" code nil nil [827087 827136])
            ("mm-uu-dissect" function (:prototype-flag t) nil [827184 827481])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [827482 827664])
            ("register-definition-prefixes" code nil nil [827665 827712])
            ("register-definition-prefixes" code nil nil [827762 827811])
            ("mml-to-mime" function (:prototype-flag t) nil [827857 827937])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827938 828837])
            ("register-definition-prefixes" code nil nil [828838 828898])
            ("register-definition-prefixes" code nil nil [828948 828998])
            ("register-definition-prefixes" code nil nil [829050 829108])
            ("mml1991-encrypt" function (:prototype-flag t) nil [829158 829226])
            ("mml1991-sign" function (:prototype-flag t) nil [829227 829277])
            ("register-definition-prefixes" code nil nil [829278 829332])
            ("mml2015-decrypt" function (:prototype-flag t) nil [829382 829441])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [829442 829506])
            ("mml2015-verify" function (:prototype-flag t) nil [829507 829565])
            ("mml2015-verify-test" function (:prototype-flag t) nil [829566 829629])
            ("mml2015-encrypt" function (:prototype-flag t) nil [829630 829698])
            ("mml2015-sign" function (:prototype-flag t) nil [829699 829749])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [829750 829792])
            ("register-definition-prefixes" code nil nil [829793 829847])
            ("register-definition-prefixes" code nil nil [829903 829962])
            ("register-definition-prefixes" code nil nil [830028 830133])
            ("put" code nil nil [830187 830240])
            ("register-definition-prefixes" code nil nil [830241 830459])
            ("defalias" code nil nil [830514 830548])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830549 831690])
            ("register-definition-prefixes" code nil nil [831691 831764])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831812 831956])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [831957 832061])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832062 832169])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832170 832284])
            ("register-definition-prefixes" code nil nil [832285 832355])
            ("register-definition-prefixes" code nil nil [832403 832458])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [832506 833441])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [833442 834057])
            ("register-definition-prefixes" code nil nil [834058 834113])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834154 834207])
            ("register-definition-prefixes" code nil nil [834208 834254])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834301 834368])
            ("register-definition-prefixes" code nil nil [834369 834417])
            ("register-definition-prefixes" code nil nil [834482 834587])
            ("msb-mode" variable nil nil [834628 834897])
            ("custom-autoload" code nil nil [834898 834935])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834936 835672])
            ("register-definition-prefixes" code nil nil [835673 835740])
            ("mspools-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835790 835960])
            ("register-definition-prefixes" code nil nil [835961 836015])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [836076 836565])
            ("read-charset" function (:prototype-flag t) nil [836566 837087])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837088 837205])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837206 837330])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837331 837444])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837445 838608])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [838609 838719])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [838720 839021])
            ("list-coding-categories" function (:prototype-flag t) nil [839022 839113])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839114 839229])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839230 839379])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839380 839647])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839648 839741])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839742 840064])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840065 840299])
            ("register-definition-prefixes" code nil nil [840300 840466])
            ("store-substring" function (:prototype-flag t) nil [840527 840647])
            ("truncate-string-to-width" function (:prototype-flag t) nil [840648 842363])
            ("nested-alist-p" function (:arguments ("obj")) nil [842364 842818])
            ("set-nested-alist" function (:prototype-flag t) nil [842819 843188])
            ("lookup-nested-alist" function (:prototype-flag t) nil [843189 843823])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [843824 843975])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [843976 844127])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [844128 844291])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [844292 844455])
            ("with-coding-priority" function (:prototype-flag t) nil [844456 844820])
            ("function-put" code nil nil [844821 844881])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [844882 845144])
            ("filepos-to-bufferpos" function (:prototype-flag t) nil [845145 845877])
            ("bufferpos-to-filepos" function (:prototype-flag t) nil [845878 846616])
            ("register-definition-prefixes" code nil nil [846617 846717])
            ("define-multisession-variable" function (:prototype-flag t) nil [846778 847052])
            ("function-put" code nil nil [847053 847126])
            ("list-multisession-values" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [847127 847350])
            ("register-definition-prefixes" code nil nil [847351 847415])
            ("mouse-wheel-mode" variable (:default-value t) nil [847459 847758])
            ("custom-autoload" code nil nil [847759 847807])
            ("mouse-wheel-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [847808 848481])
            ("register-definition-prefixes" code nil nil [848482 848549])
            ("push" code nil nil [848605 848663])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [848714 848806])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [848807 848899])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [848900 848990])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [848991 849073])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [849074 849160])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [849161 849251])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [849252 849403])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [849404 849895])
            ("nslookup-host-ipv4" function (:prototype-flag t) nil [849896 850306])
            ("nslookup-host-ipv6" function (:prototype-flag t) nil [850307 850718])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [850719 850781])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [850782 851141])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [851142 851482])
            ("make-obsolete" code nil nil [851483 851519])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [851520 851602])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [851603 851773])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [851774 852103])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [852104 852154])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [852155 852344])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [852345 852452])
            ("register-definition-prefixes" code nil nil [852453 852730])
            ("open-network-stream" function (:prototype-flag t) nil [852786 857889])
            ("define-obsolete-function-alias" code nil nil [857890 857973])
            ("register-definition-prefixes" code nil nil [857974 858042])
            ("newsticker-running-p" function (:prototype-flag t) nil [858097 858319])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [858320 858678])
            ("register-definition-prefixes" code nil nil [858679 858742])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [858799 858883])
            ("register-definition-prefixes" code nil nil [858884 858949])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859003 859113])
            ("register-definition-prefixes" code nil nil [859114 859176])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [859230 859470])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859471 859660])
            ("register-definition-prefixes" code nil nil [859661 859723])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859779 859860])
            ("register-definition-prefixes" code nil nil [859861 859925])
            ("register-definition-prefixes" code nil nil [859977 860044])
            ("register-definition-prefixes" code nil nil [860094 860148])
            ("register-definition-prefixes" code nil nil [860198 860252])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860302 860434])
            ("register-definition-prefixes" code nil nil [860435 860489])
            ("register-definition-prefixes" code nil nil [860537 860587])
            ("nndoc-add-type" function (:prototype-flag t) nil [860635 860974])
            ("register-definition-prefixes" code nil nil [860975 861025])
            ("register-definition-prefixes" code nil nil [861075 861129])
            ("register-definition-prefixes" code nil nil [861181 861239])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861290 861480])
            ("register-definition-prefixes" code nil nil [861481 861537])
            ("register-definition-prefixes" code nil nil [861589 861647])
            ("register-definition-prefixes" code nil nil [861698 861804])
            ("register-definition-prefixes" code nil nil [861853 861905])
            ("register-definition-prefixes" code nil nil [861954 862006])
            ("register-definition-prefixes" code nil nil [862058 862116])
            ("register-definition-prefixes" code nil nil [862167 862223])
            ("register-definition-prefixes" code nil nil [862272 862324])
            ("register-definition-prefixes" code nil nil [862371 862419])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862466 862589])
            ("register-definition-prefixes" code nil nil [862590 862638])
            ("register-definition-prefixes" code nil nil [862686 862736])
            ("register-definition-prefixes" code nil nil [862783 862865])
            ("register-definition-prefixes" code nil nil [862918 862978])
            ("register-definition-prefixes" code nil nil [863026 863076])
            ("register-definition-prefixes" code nil nil [863127 863225])
            ("register-definition-prefixes" code nil nil [863275 863350])
            ("register-definition-prefixes" code nil nil [863397 863445])
            ("register-definition-prefixes" code nil nil [863497 863555])
            ("register-definition-prefixes" code nil nil [863603 863653])
            ("register-definition-prefixes" code nil nil [863704 863770])
            ("disabled-command-function" variable (:default-value 'disabled-command-function) nil [863814 863992])
            ("disabled-command-function" function (:prototype-flag t) nil [863993 864069])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [864070 864309])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [864310 864536])
            ("register-definition-prefixes" code nil nil [864537 864600])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [864658 864974])
            ("register-definition-prefixes" code nil nil [864975 865030])
            ("register-definition-prefixes" code nil nil [865075 865141])
            ("push" code nil nil [865187 865244])
            ("register-definition-prefixes" code nil nil [865245 865293])
            ("register-definition-prefixes" code nil nil [865344 865396])
            ("register-definition-prefixes" code nil nil [865449 865537])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [865589 868152])
            ("defalias" code nil nil [868153 868184])
            ("register-definition-prefixes" code nil nil [868185 868238])
            ("register-definition-prefixes" code nil nil [868288 868342])
            ("register-definition-prefixes" code nil nil [868395 868449])
            ("register-definition-prefixes" code nil nil [868502 868556])
            ("register-definition-prefixes" code nil nil [868607 868659])
            ("register-definition-prefixes" code nil nil [868711 868764])
            ("register-definition-prefixes" code nil nil [868810 868863])
            ("register-definition-prefixes" code nil nil [868909 868968])
            ("register-definition-prefixes" code nil nil [869016 869071])
            ("register-definition-prefixes" code nil nil [869120 869176])
            ("register-definition-prefixes" code nil nil [869228 869301])
            ("register-definition-prefixes" code nil nil [869352 869417])
            ("register-definition-prefixes" code nil nil [869466 869516])
            ("register-definition-prefixes" code nil nil [869564 869619])
            ("register-definition-prefixes" code nil nil [869669 869720])
            ("register-definition-prefixes" code nil nil [869768 869823])
            ("register-definition-prefixes" code nil nil [869878 869940])
            ("register-definition-prefixes" code nil nil [869991 870076])
            ("register-definition-prefixes" code nil nil [870125 870181])
            ("register-definition-prefixes" code nil nil [870229 870278])
            ("register-definition-prefixes" code nil nil [870328 870385])
            ("register-definition-prefixes" code nil nil [870437 870496])
            ("register-definition-prefixes" code nil nil [870548 870629])
            ("register-definition-prefixes" code nil nil [870680 870738])
            ("register-definition-prefixes" code nil nil [870790 870849])
            ("register-definition-prefixes" code nil nil [870898 870954])
            ("register-definition-prefixes" code nil nil [871001 871055])
            ("register-definition-prefixes" code nil nil [871105 871162])
            ("register-definition-prefixes" code nil nil [871212 871269])
            ("register-definition-prefixes" code nil nil [871322 871424])
            ("register-definition-prefixes" code nil nil [871473 871529])
            ("register-definition-prefixes" code nil nil [871577 871632])
            ("register-definition-prefixes" code nil nil [871680 871735])
            ("register-definition-prefixes" code nil nil [871788 871848])
            ("register-definition-prefixes" code nil nil [871899 871957])
            ("register-definition-prefixes" code nil nil [872007 872064])
            ("register-definition-prefixes" code nil nil [872115 872173])
            ("register-definition-prefixes" code nil nil [872221 872276])
            ("register-definition-prefixes" code nil nil [872325 872381])
            ("register-definition-prefixes" code nil nil [872434 872488])
            ("register-definition-prefixes" code nil nil [872543 872605])
            ("register-definition-prefixes" code nil nil [872656 872714])
            ("register-definition-prefixes" code nil nil [872762 872817])
            ("register-definition-prefixes" code nil nil [872866 872922])
            ("register-definition-prefixes" code nil nil [872971 873027])
            ("register-definition-prefixes" code nil nil [873078 873136])
            ("register-definition-prefixes" code nil nil [873187 873245])
            ("register-definition-prefixes" code nil nil [873293 873348])
            ("register-definition-prefixes" code nil nil [873398 873455])
            ("register-definition-prefixes" code nil nil [873503 873558])
            ("register-definition-prefixes" code nil nil [873609 873667])
            ("register-definition-prefixes" code nil nil [873717 873768])
            ("register-definition-prefixes" code nil nil [873819 873877])
            ("org-cite-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [873921 874155])
            ("register-definition-prefixes" code nil nil [874156 874206])
            ("register-definition-prefixes" code nil nil [874256 874318])
            ("register-definition-prefixes" code nil nil [874371 874439])
            ("register-definition-prefixes" code nil nil [874490 874561])
            ("register-definition-prefixes" code nil nil [874609 874667])
            ("register-definition-prefixes" code nil nil [874718 874782])
            ("add-to-list" code nil nil [874837 874900])
            ("octave-maybe-mode" function (:prototype-flag t) nil [874901 875013])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875014 875455])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875456 876018])
            ("defalias" code nil nil [876019 876058])
            ("register-definition-prefixes" code nil nil [876059 876130])
            ("register-definition-prefixes" code nil nil [876188 876240])
            ("register-definition-prefixes" code nil nil [876284 876329])
            ("register-definition-prefixes" code nil nil [876378 876433])
            ("register-definition-prefixes" code nil nil [876484 876536])
            ("register-definition-prefixes" code nil nil [876588 876649])
            ("register-definition-prefixes" code nil nil [876697 876755])
            ("register-definition-prefixes" code nil nil [876806 876865])
            ("register-definition-prefixes" code nil nil [876913 876966])
            ("register-definition-prefixes" code nil nil [877015 877070])
            ("register-definition-prefixes" code nil nil [877119 877174])
            ("register-definition-prefixes" code nil nil [877222 877275])
            ("register-definition-prefixes" code nil nil [877323 877376])
            ("register-definition-prefixes" code nil nil [877424 877477])
            ("register-definition-prefixes" code nil nil [877527 877584])
            ("register-definition-prefixes" code nil nil [877632 877685])
            ("define-obsolete-function-alias" code nil nil [877740 877807])
            ("opascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877808 878867])
            ("register-definition-prefixes" code nil nil [878868 878922])
            ("push" code nil nil [878967 879023])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [879024 879147])
            ("org-babel-load-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [879148 879494])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [879495 879800])
            ("org-load-modules-maybe" function (:prototype-flag t) nil [879801 879912])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [879913 880002])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880003 880872])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [880873 881145])
            ("org-open-file" function (:prototype-flag t) nil [881146 882131])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882132 882523])
            ("org-offer-links-in-entry" function (:prototype-flag t) nil [882524 882847])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882848 883113])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883114 883343])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883344 883680])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883681 883827])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [883828 883915])
            ("register-definition-prefixes" code nil nil [883916 883984])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [884036 884139])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [884140 885861])
            ("org-batch-agenda" function (:prototype-flag t) nil [885862 886299])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [886300 888082])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [888083 888179])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [888180 888324])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [888325 889040])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [889041 891394])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [891395 891773])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [891774 891983])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [891984 892283])
            ("org-diary" function (:prototype-flag t) nil [892284 893438])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:prototype-flag t) nil [893439 893623])
            ("org-agenda-set-restriction-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893624 894016])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [894017 894209])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [894210 895449])
            ("register-definition-prefixes" code nil nil [895450 895503])
            ("register-definition-prefixes" code nil nil [895556 895611])
            ("register-definition-prefixes" code nil nil [895663 895723])
            ("register-definition-prefixes" code nil nil [895779 895847])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [895900 896029])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [896030 897338])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [897339 897479])
            ("register-definition-prefixes" code nil nil [897480 897542])
            ("register-definition-prefixes" code nil nil [897593 897645])
            ("register-definition-prefixes" code nil nil [897698 897752])
            ("register-definition-prefixes" code nil nil [897804 897868])
            ("org-encrypt-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [897919 898011])
            ("org-decrypt-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898012 898104])
            ("org-encrypt-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898105 898207])
            ("org-decrypt-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898208 898300])
            ("org-crypt-use-before-save-magic" function (:prototype-flag t) nil [898301 898436])
            ("register-definition-prefixes" code nil nil [898437 898489])
            ("register-definition-prefixes" code nil nil [898540 898592])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898643 901053])
            ("org-cycle-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [901054 901311])
            ("register-definition-prefixes" code nil nil [901312 901370])
            ("register-definition-prefixes" code nil nil [901424 901488])
            ("register-definition-prefixes" code nil nil [901542 901606])
            ("register-definition-prefixes" code nil nil [901659 901721])
            ("register-definition-prefixes" code nil nil [901775 901835])
            ("register-definition-prefixes" code nil nil [901886 901938])
            ("register-definition-prefixes" code nil nil [901988 902044])
            ("register-definition-prefixes" code nil nil [902094 902150])
            ("register-definition-prefixes" code nil nil [902205 902271])
            ("register-definition-prefixes" code nil nil [902325 902389])
            ("register-definition-prefixes" code nil nil [902439 902495])
            ("register-definition-prefixes" code nil nil [902546 902598])
            ("register-definition-prefixes" code nil nil [902646 902698])
            ("register-definition-prefixes" code nil nil [902750 902810])
            ("register-definition-prefixes" code nil nil [902866 902934])
            ("register-definition-prefixes" code nil nil [902984 903035])
            ("register-definition-prefixes" code nil nil [903085 903141])
            ("register-definition-prefixes" code nil nil [903191 903242])
            ("register-definition-prefixes" code nil nil [903293 903351])
            ("register-definition-prefixes" code nil nil [903401 903452])
            ("register-definition-prefixes" code nil nil [903504 903564])
            ("register-definition-prefixes" code nil nil [903615 903667])
            ("register-definition-prefixes" code nil nil [903716 903770])
            ("register-definition-prefixes" code nil nil [903825 903903])
            ("register-definition-prefixes" code nil nil [903956 904018])
            ("register-definition-prefixes" code nil nil [904068 904119])
            ("register-definition-prefixes" code nil nil [904173 904228])
            ("register-definition-prefixes" code nil nil [904280 904333])
            ("register-definition-prefixes" code nil nil [904382 904432])
            ("register-definition-prefixes" code nil nil [904483 904534])
            ("register-definition-prefixes" code nil nil [904585 904643])
            ("register-definition-prefixes" code nil nil [904694 904752])
            ("org-release" function (:prototype-flag t) nil [904805 904933])
            ("org-git-version" function (:prototype-flag t) nil [904934 905062])
            ("put" code nil nil [905107 905158])
            ("put" code nil nil [905159 905222])
            ("put" code nil nil [905223 905267])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905268 906375])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906376 907076])
            ("outline-search-level" function (:prototype-flag t) nil [907077 907406])
            ("register-definition-prefixes" code nil nil [907407 907461])
            ("register-definition-prefixes" code nil nil [907505 907550])
            ("register-definition-prefixes" code nil nil [907600 907657])
            ("register-definition-prefixes" code nil nil [907708 907767])
            ("register-definition-prefixes" code nil nil [907816 907871])
            ("register-definition-prefixes" code nil nil [907925 907990])
            ("org-koma-letter-export-as-latex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [908046 909143])
            ("org-koma-letter-export-to-latex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [909144 910206])
            ("org-koma-letter-export-to-pdf" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910207 911188])
            ("register-definition-prefixes" code nil nil [911189 911258])
            ("register-definition-prefixes" code nil nil [911308 911359])
            ("register-definition-prefixes" code nil nil [911407 911460])
            ("register-definition-prefixes" code nil nil [911507 911558])
            ("register-definition-prefixes" code nil nil [911606 911659])
            ("register-definition-prefixes" code nil nil [911707 911760])
            ("register-definition-prefixes" code nil nil [911812 911873])
            ("register-definition-prefixes" code nil nil [911925 911986])
            ("push" code nil nil [912042 912102])
            ("package-enable-at-startup" variable (:default-value t) nil [912103 912718])
            ("custom-autoload" code nil nil [912719 912775])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [912776 913131])
            ("custom-autoload" code nil nil [913132 913179])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [913180 913724])
            ("custom-autoload" code nil nil [913725 913778])
            ("package-activated-list" variable nil nil [913779 913869])
            ("package--activated" variable nil nil [913870 913953])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913954 914711])
            ("package-activate-all" function nil nil [914712 915280])
            ("package--activate-all" function (:prototype-flag t) nil [915281 915324])
            ("package-import-keyring" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [915325 915419])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [915420 915803])
            ("package-installed-p" function (:prototype-flag t) nil [915804 916104])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [916105 916811])
            ("package-upgrade" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [916812 917211])
            ("package-upgrade-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [917212 917729])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [917730 918214])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918215 918374])
            ("package-install-selected-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918375 918676])
            ("package-reinstall" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918677 918832])
            ("package-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918833 918997])
            ("package-recompile-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918998 919208])
            ("package-autoremove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919209 919421])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919422 919534])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919535 919880])
            ("defalias" code nil nil [919881 919929])
            ("package-get-version" function (:prototype-flag t) nil [919930 920297])
            ("function-put" code nil nil [920298 920342])
            ("package-quickstart-file" variable (:default-value (locate-user-emacs-file "package-quickstart.el")) nil [920343 920591])
            ("custom-autoload" code nil nil [920592 920646])
            ("register-definition-prefixes" code nil nil [920647 920755])
            ("package-vc-install-selected-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920814 920956])
            ("package-vc-upgrade-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920957 921056])
            ("package-vc-upgrade" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921057 921162])
            ("package-vc-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921163 922661])
            ("package-vc-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922662 923293])
            ("package-vc-install-from-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923294 923746])
            ("package-vc-rebuild" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923747 924228])
            ("package-vc-prepare-patch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924229 924726])
            ("register-definition-prefixes" code nil nil [924727 924787])
            ("package-upload-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924845 925490])
            ("register-definition-prefixes" code nil nil [925491 925547])
            ("register-definition-prefixes" code nil nil [925603 925656])
            ("put" code nil nil [925713 925760])
            ("parse-time-string" function (:prototype-flag t) nil [925761 926437])
            ("register-definition-prefixes" code nil nil [926438 926493])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [926547 928534])
            ("register-definition-prefixes" code nil nil [928535 928606])
            ("password-cache" variable (:default-value t) nil [928658 928715])
            ("custom-autoload" code nil nil [928716 928768])
            ("password-cache-expiry" variable (:default-value 16) nil [928769 928944])
            ("custom-autoload" code nil nil [928945 929004])
            ("password-in-cache-p" function (:prototype-flag t) nil [929005 929097])
            ("register-definition-prefixes" code nil nil [929098 929160])
            ("pcase" function (:prototype-flag t) nil [929214 930998])
            ("function-put" code nil nil [930999 931044])
            ("put" code nil nil [931045 931106])
            ("pcase--make-docstring" function (:prototype-flag t) nil [931107 931148])
            ("pcase-exhaustive" function (:prototype-flag t) nil [931149 931423])
            ("function-put" code nil nil [931424 931480])
            ("pcase-lambda" function (:prototype-flag t) nil [931481 931780])
            ("function-put" code nil nil [931781 931827])
            ("function-put" code nil nil [931828 931885])
            ("pcase-let*" function (:prototype-flag t) nil [931886 932401])
            ("function-put" code nil nil [932402 932452])
            ("pcase-let" function (:prototype-flag t) nil [932453 933072])
            ("function-put" code nil nil [933073 933122])
            ("pcase-dolist" function (:prototype-flag t) nil [933123 933759])
            ("function-put" code nil nil [933760 933812])
            ("pcase-setq" function (:prototype-flag t) nil [933813 934280])
            ("pcase-defmacro" function (:prototype-flag t) nil [934281 934599])
            ("function-put" code nil nil [934600 934654])
            ("function-put" code nil nil [934655 934703])
            ("register-definition-prefixes" code nil nil [934704 934754])
            ("pcomplete/cvs" function (:prototype-flag t) nil [934801 934882])
            ("register-definition-prefixes" code nil nil [934883 934941])
            ("pcomplete/git" function (:prototype-flag t) nil [934988 935063])
            ("register-definition-prefixes" code nil nil [935064 935123])
            ("pcomplete/gzip" function (:prototype-flag t) nil [935170 935235])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [935236 935303])
            ("pcomplete/make" function (:prototype-flag t) nil [935304 935373])
            ("pcomplete/tar" function (:prototype-flag t) nil [935374 935451])
            ("pcomplete/find" function (:prototype-flag t) nil [935452 935531])
            ("pcomplete/awk" function (:prototype-flag t) nil [935532 935607])
            ("pcomplete/gpg" function (:prototype-flag t) nil [935608 935683])
            ("pcomplete/gdb" function (:prototype-flag t) nil [935684 935759])
            ("pcomplete/emacs" function (:prototype-flag t) nil [935760 935839])
            ("pcomplete/emacsclient" function (:prototype-flag t) nil [935840 935931])
            ("register-definition-prefixes" code nil nil [935932 936007])
            ("pcomplete/kill" function (:prototype-flag t) nil [936056 936157])
            ("pcomplete/umount" function (:prototype-flag t) nil [936158 936239])
            ("pcomplete/mount" function (:prototype-flag t) nil [936240 936319])
            ("pcomplete/systemctl" function (:prototype-flag t) nil [936320 936409])
            ("pcomplete/journalctl" function (:prototype-flag t) nil [936410 936501])
            ("register-definition-prefixes" code nil nil [936502 936586])
            ("pcomplete/rpm" function (:prototype-flag t) nil [936633 936708])
            ("pcomplete/dnf" function (:prototype-flag t) nil [936709 936784])
            ("register-definition-prefixes" code nil nil [936785 936843])
            ("pcomplete/cd" function (:prototype-flag t) nil [936891 936953])
            ("defalias" code nil nil [936954 936995])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [936996 937064])
            ("pcomplete/rm" function (:prototype-flag t) nil [937065 937139])
            ("pcomplete/xargs" function (:prototype-flag t) nil [937140 937208])
            ("pcomplete/time" function (:prototype-flag t) nil [937209 937287])
            ("pcomplete/which" function (:prototype-flag t) nil [937288 937356])
            ("pcomplete/cat" function (:prototype-flag t) nil [937357 937433])
            ("pcomplete/tac" function (:prototype-flag t) nil [937434 937510])
            ("pcomplete/nl" function (:prototype-flag t) nil [937511 937585])
            ("pcomplete/od" function (:prototype-flag t) nil [937586 937660])
            ("pcomplete/base32" function (:prototype-flag t) nil [937661 937757])
            ("defalias" code nil nil [937758 937804])
            ("pcomplete/basenc" function (:prototype-flag t) nil [937805 937887])
            ("pcomplete/fmt" function (:prototype-flag t) nil [937888 937964])
            ("pcomplete/pr" function (:prototype-flag t) nil [937965 938039])
            ("pcomplete/fold" function (:prototype-flag t) nil [938040 938118])
            ("pcomplete/head" function (:prototype-flag t) nil [938119 938197])
            ("pcomplete/tail" function (:prototype-flag t) nil [938198 938276])
            ("pcomplete/split" function (:prototype-flag t) nil [938277 938357])
            ("pcomplete/csplit" function (:prototype-flag t) nil [938358 938440])
            ("pcomplete/wc" function (:prototype-flag t) nil [938441 938515])
            ("pcomplete/sum" function (:prototype-flag t) nil [938516 938592])
            ("pcomplete/cksum" function (:prototype-flag t) nil [938593 938673])
            ("pcomplete/b2sum" function (:prototype-flag t) nil [938674 938754])
            ("pcomplete/md5sum" function (:prototype-flag t) nil [938755 938834])
            ("defalias" code nil nil [938835 938882])
            ("defalias" code nil nil [938883 938932])
            ("defalias" code nil nil [938933 938982])
            ("defalias" code nil nil [938983 939032])
            ("defalias" code nil nil [939033 939082])
            ("pcomplete/sort" function (:prototype-flag t) nil [939083 939161])
            ("pcomplete/shuf" function (:prototype-flag t) nil [939162 939240])
            ("pcomplete/uniq" function (:prototype-flag t) nil [939241 939319])
            ("pcomplete/comm" function (:prototype-flag t) nil [939320 939398])
            ("pcomplete/ptx" function (:prototype-flag t) nil [939399 939475])
            ("pcomplete/tsort" function (:prototype-flag t) nil [939476 939556])
            ("pcomplete/cut" function (:prototype-flag t) nil [939557 939633])
            ("pcomplete/paste" function (:prototype-flag t) nil [939634 939714])
            ("pcomplete/join" function (:prototype-flag t) nil [939715 939793])
            ("pcomplete/tr" function (:prototype-flag t) nil [939794 939868])
            ("pcomplete/expand" function (:prototype-flag t) nil [939869 939951])
            ("pcomplete/unexpand" function (:prototype-flag t) nil [939952 940038])
            ("pcomplete/ls" function (:prototype-flag t) nil [940039 940113])
            ("defalias" code nil nil [940114 940153])
            ("defalias" code nil nil [940154 940194])
            ("pcomplete/cp" function (:prototype-flag t) nil [940195 940269])
            ("pcomplete/dd" function (:prototype-flag t) nil [940270 940344])
            ("pcomplete/install" function (:prototype-flag t) nil [940345 940429])
            ("pcomplete/mv" function (:prototype-flag t) nil [940430 940504])
            ("pcomplete/shred" function (:prototype-flag t) nil [940505 940585])
            ("pcomplete/ln" function (:prototype-flag t) nil [940586 940660])
            ("pcomplete/mkdir" function (:prototype-flag t) nil [940661 940741])
            ("pcomplete/mkfifo" function (:prototype-flag t) nil [940742 940824])
            ("pcomplete/mknod" function (:prototype-flag t) nil [940825 940905])
            ("pcomplete/readlink" function (:prototype-flag t) nil [940906 940992])
            ("pcomplete/chown" function (:prototype-flag t) nil [940993 941073])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [941074 941154])
            ("pcomplete/chmod" function (:prototype-flag t) nil [941155 941235])
            ("pcomplete/touch" function (:prototype-flag t) nil [941236 941316])
            ("pcomplete/df" function (:prototype-flag t) nil [941317 941391])
            ("pcomplete/du" function (:prototype-flag t) nil [941392 941466])
            ("pcomplete/stat" function (:prototype-flag t) nil [941467 941545])
            ("pcomplete/sync" function (:prototype-flag t) nil [941546 941624])
            ("pcomplete/truncate" function (:prototype-flag t) nil [941625 941711])
            ("pcomplete/echo" function (:prototype-flag t) nil [941712 941790])
            ("pcomplete/test" function (:prototype-flag t) nil [941791 941869])
            ("defalias" code nil nil [941870 941919])
            ("pcomplete/tee" function (:prototype-flag t) nil [941920 941996])
            ("pcomplete/basename" function (:prototype-flag t) nil [941997 942083])
            ("pcomplete/dirname" function (:prototype-flag t) nil [942084 942168])
            ("pcomplete/pathchk" function (:prototype-flag t) nil [942169 942253])
            ("pcomplete/mktemp" function (:prototype-flag t) nil [942254 942336])
            ("pcomplete/realpath" function (:prototype-flag t) nil [942337 942423])
            ("pcomplete/id" function (:prototype-flag t) nil [942424 942498])
            ("pcomplete/groups" function (:prototype-flag t) nil [942499 942581])
            ("pcomplete/who" function (:prototype-flag t) nil [942582 942658])
            ("pcomplete/date" function (:prototype-flag t) nil [942659 942737])
            ("pcomplete/nproc" function (:prototype-flag t) nil [942738 942818])
            ("pcomplete/uname" function (:prototype-flag t) nil [942819 942899])
            ("pcomplete/hostname" function (:prototype-flag t) nil [942900 942986])
            ("pcomplete/uptime" function (:prototype-flag t) nil [942987 943069])
            ("pcomplete/chcon" function (:prototype-flag t) nil [943070 943150])
            ("pcomplete/runcon" function (:prototype-flag t) nil [943151 943233])
            ("pcomplete/chroot" function (:prototype-flag t) nil [943234 943316])
            ("pcomplete/env" function (:prototype-flag t) nil [943317 943393])
            ("pcomplete/nice" function (:prototype-flag t) nil [943394 943472])
            ("pcomplete/nohup" function (:prototype-flag t) nil [943473 943553])
            ("pcomplete/stdbuf" function (:prototype-flag t) nil [943554 943636])
            ("pcomplete/timeout" function (:prototype-flag t) nil [943637 943721])
            ("pcomplete/numfmt" function (:prototype-flag t) nil [943722 943804])
            ("pcomplete/seq" function (:prototype-flag t) nil [943805 943881])
            ("pcomplete/ssh" function (:prototype-flag t) nil [943882 943964])
            ("defalias" code nil nil [943965 944006])
            ("pcomplete/scp" function (:prototype-flag t) nil [944007 944147])
            ("pcomplete/telnet" function (:prototype-flag t) nil [944148 944189])
            ("pcomplete/sudo" function (:prototype-flag t) nil [944190 944268])
            ("register-definition-prefixes" code nil nil [944269 944337])
            ("pcomplete/tex" function (:prototype-flag t) nil [944382 944455])
            ("defalias" code nil nil [944456 944499])
            ("defalias" code nil nil [944500 944542])
            ("defalias" code nil nil [944543 944588])
            ("pcomplete/luatex" function (:prototype-flag t) nil [944589 944668])
            ("defalias" code nil nil [944669 944717])
            ("pcomplete/tlmgr" function (:prototype-flag t) nil [944718 944795])
            ("pcomplete/rg" function (:prototype-flag t) nil [944796 944867])
            ("pcomplete/ack" function (:prototype-flag t) nil [944868 945021])
            ("defalias" code nil nil [945022 945067])
            ("pcomplete/ag" function (:prototype-flag t) nil [945068 945139])
            ("pcomplete/bcc32" function (:prototype-flag t) nil [945140 945229])
            ("defalias" code nil nil [945230 945272])
            ("pcomplete/rclone" function (:prototype-flag t) nil [945273 945352])
            ("register-definition-prefixes" code nil nil [945353 945407])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945454 945706])
            ("make-obsolete" code nil nil [945707 945802])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945803 945900])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945901 946047])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946048 946151])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946152 946285])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946286 946393])
            ("make-obsolete" code nil nil [946394 946499])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946500 946608])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [946609 946871])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [946872 946958])
            ("register-definition-prefixes" code nil nil [946959 947017])
            ("register-definition-prefixes" code nil nil [947070 947145])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947190 947452])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947453 947828])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947829 948332])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948333 948780])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948781 949221])
            ("cvs-dired-action" variable (:default-value 'cvs-quickdir) nil [949222 949390])
            ("custom-autoload" code nil nil [949391 949435])
            ("cvs-dired-use-hook" variable (:default-value '(4)) nil [949436 949767])
            ("custom-autoload" code nil nil [949768 949814])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [949815 950342])
            ("register-definition-prefixes" code nil nil [950343 950407])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] `(menu-item ,(purecopy "Directory Status") cvs-status :help ,(purecopy "A more verbose status of a workarea"))) (define-key m [checkout] `(menu-item ,(purecopy "Checkout Module") cvs-checkout :help ,(purecopy "Check out a module from the repository"))) (define-key m [update] `(menu-item ,(purecopy "Update Directory") cvs-update :help ,(purecopy "Fetch updates from the repository"))) (define-key m [examine] `(menu-item ,(purecopy "Examine Directory") cvs-examine :help ,(purecopy "Examine the current state of a workarea"))) (fset 'cvs-global-menu m))) nil [950457 951134])
            ("register-definition-prefixes" code nil nil [951135 951187])
            ("register-definition-prefixes" code nil nil [951237 951289])
            ("register-definition-prefixes" code nil nil [951340 951393])
            ("register-definition-prefixes" code nil nil [951443 951495])
            ("put" code nil nil [951552 951607])
            ("put" code nil nil [951608 951677])
            ("put" code nil nil [951678 951743])
            ("put" code nil nil [951744 951799])
            ("put" code nil nil [951800 951865])
            ("put" code nil nil [951866 951921])
            ("perl-flymake" function (:prototype-flag t) nil [951922 952196])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952197 954398])
            ("register-definition-prefixes" code nil nil [954399 954452])
            ("register-definition-prefixes" code nil nil [954498 954554])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954609 958432])
            ("defalias" code nil nil [958433 958471])
            ("register-definition-prefixes" code nil nil [958472 958526])
            ("register-definition-prefixes" code nil nil [958584 958644])
            ("pixel-scroll-mode" variable nil nil [958694 958999])
            ("custom-autoload" code nil nil [959000 959055])
            ("pixel-scroll-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [959056 959735])
            ("pixel-scroll-precision-mode" variable nil nil [959736 960081])
            ("custom-autoload" code nil nil [960082 960147])
            ("pixel-scroll-precision-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960148 960953])
            ("register-definition-prefixes" code nil nil [960954 961011])
            ("put" code nil nil [961056 961237])
            ("plstore-open" function (:prototype-flag t) nil [961238 961335])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961336 961420])
            ("register-definition-prefixes" code nil nil [961421 961475])
            ("register-definition-prefixes" code nil nil [961528 961586])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [961636 961847])
            ("register-definition-prefixes" code nil nil [961848 961892])
            ("pong" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961939 962178])
            ("register-definition-prefixes" code nil nil [962179 962227])
            ("pop3-movemail" function (:prototype-flag t) nil [962273 962399])
            ("register-definition-prefixes" code nil nil [962400 962448])
            ("pp-to-string" function (:prototype-flag t) nil [962499 962753])
            ("pp-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962754 962860])
            ("pp" function (:prototype-flag t) nil [962861 963401])
            ("pp-display-expression" function (:prototype-flag t) nil [963402 963724])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [963725 963901])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [963902 964018])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964019 964203])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964204 964402])
            ("pp-emacs-lisp-code" function (:prototype-flag t) nil [964403 964634])
            ("register-definition-prefixes" code nil nil [964635 964679])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964725 964940])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964941 965804])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [965805 966697])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966698 967566])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [967567 968506])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [968507 969159])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969160 969832])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [969833 970481])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970482 971201])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971202 971347])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971348 971532])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971533 971681])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971682 971859])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971860 972007])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972008 972194])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972195 972345])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972346 972517])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972518 973076])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973077 973347])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973348 973618])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973619 973982])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973983 974058])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974059 974134])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974135 974212])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974213 974718])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974719 975241])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975242 975752])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975753 976297])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976298 976394])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976395 976520])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976521 976643])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976644 976736])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976737 976873])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976874 977805])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977806 977891])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977892 978139])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978140 978231])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978232 978317])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978318 978390])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978391 978452])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978453 978513])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978514 978736])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978737 978803])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978804 978874])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978875 978938])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978939 979005])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979006 979075])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979076 979157])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979158 979219])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979220 979318])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979319 979380])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979381 979480])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979481 979576])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979577 979663])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979664 979746])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979747 979824])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979825 979910])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979911 980007])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [980008 980104])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [980105 980197])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [980198 982761])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982762 983766])
            ("register-definition-prefixes" code nil nil [983767 983829])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [983873 984471])
            ("register-definition-prefixes" code nil nil [984472 984524])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [984570 985055])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [985056 985144])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [985145 985246])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [985247 985347])
            ("register-definition-prefixes" code nil nil [985348 985404])
            ("register-definition-prefixes" code nil nil [985456 985512])
            ("register-definition-prefixes" code nil nil [985572 985631])
            ("register-definition-prefixes" code nil nil [985687 985742])
            ("register-definition-prefixes" code nil nil [985799 985888])
            ("register-definition-prefixes" code nil nil [985946 986003])
            ("register-definition-prefixes" code nil nil [986060 986116])
            ("register-definition-prefixes" code nil nil [986173 986229])
            ("register-definition-prefixes" code nil nil [986285 986340])
            ("register-definition-prefixes" code nil nil [986397 986481])
            ("register-definition-prefixes" code nil nil [986540 986616])
            ("register-definition-prefixes" code nil nil [986675 986733])
            ("push" code nil nil [986788 986848])
            ("project-current" function (:prototype-flag t) nil [986849 987639])
            ("put" code nil nil [987640 987694])
            ("put" code nil nil [987695 987761])
            ("put" code nil nil [987762 987829])
            ("put" code nil nil [987830 987883])
            ("put" code nil nil [987884 988014])
            ("project-prefix-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "!" 'project-shell-command) (define-key map "&" 'project-async-shell-command) (define-key map "f" 'project-find-file) (define-key map "F" 'project-or-external-find-file) (define-key map "b" 'project-switch-to-buffer) (define-key map "s" 'project-shell) (define-key map "d" 'project-find-dir) (define-key map "D" 'project-dired) (define-key map "v" 'project-vc-dir) (define-key map "c" 'project-compile) (define-key map "e" 'project-eshell) (define-key map "k" 'project-kill-buffers) (define-key map "p" 'project-switch-project) (define-key map "g" 'project-find-regexp) (define-key map "G" 'project-or-external-find-regexp) (define-key map "r" 'project-query-replace-regexp) (define-key map "x" 'project-execute-extended-command) (define-key map "" 'project-list-buffers) map)) nil [988015 988904])
            ("define-key" code nil nil [988906 988951])
            ("project-other-window-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988952 989168])
            ("define-key" code nil nil [989170 989229])
            ("project-other-frame-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989230 989443])
            ("define-key" code nil nil [989445 989503])
            ("project-other-tab-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989504 989683])
            ("when" code nil nil [989684 989784])
            ("project-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989785 990264])
            ("project-or-external-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990265 990494])
            ("project-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990495 990921])
            ("project-or-external-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990922 991378])
            ("project-find-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991379 991478])
            ("project-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991479 991563])
            ("project-vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991564 991648])
            ("project-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991649 991981])
            ("project-eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991982 992296])
            ("project-async-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992297 992419])
            ("function-put" code nil nil [992420 992502])
            ("project-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992503 992613])
            ("function-put" code nil nil [992614 992684])
            ("project-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992685 992901])
            ("project-query-replace-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992902 993438])
            ("project-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993439 993517])
            ("function-put" code nil nil [993518 993576])
            ("project-switch-to-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993577 993918])
            ("project-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993919 994390])
            ("project-display-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994391 994877])
            ("project-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994878 995228])
            ("put" code nil nil [995229 995308])
            ("project-kill-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995309 995873])
            ("project-remember-project" function (:prototype-flag t) nil [995874 996098])
            ("project-forget-project" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996099 996303])
            ("project-known-project-roots" function (:prototype-flag t) nil [996304 996416])
            ("project-execute-extended-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996417 996522])
            ("function-put" code nil nil [996523 996606])
            ("project-switch-project" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [996607 996902])
            ("register-definition-prefixes" code nil nil [996903 996957])
            ("register-definition-prefixes" code nil nil [997015 997079])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997133 997535])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997536 997670])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [997671 997860])
            ("register-definition-prefixes" code nil nil [997861 997932])
            ("bdf-directory-list" variable (:default-value (if (memq system-type '(ms-dos windows-nt)) (list (expand-file-name "fonts/bdf" installation-directory)) '("/usr/local/share/emacs/fonts/bdf"))) nil [997976 998264])
            ("custom-autoload" code nil nil [998265 998313])
            ("register-definition-prefixes" code nil nil [998314 998363])
            ("push" code nil nil [998418 998478])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998479 999552])
            ("register-definition-prefixes" code nil nil [999553 999602])
            ("register-definition-prefixes" code nil nil [999647 999701])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list 'a4 (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list 'a3 (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list 'letter (* 72 8.5) (* 72 11.0) "Letter") (list 'legal (* 72 8.5) (* 72 14.0) "Legal") (list 'letter-small (* 72 7.68) (* 72 10.16) "LetterSmall") (list 'tabloid (* 72 11.0) (* 72 17.0) "Tabloid") (list 'ledger (* 72 17.0) (* 72 11.0) "Ledger") (list 'statement (* 72 5.5) (* 72 8.5) "Statement") (list 'executive (* 72 7.5) (* 72 10.0) "Executive") (list 'a4small (* 72 7.47) (* 72 10.85) "A4Small") (list 'b4 (* 72 10.125) (* 72 14.33) "B4") (list 'b5 (* 72 7.16) (* 72 10.125) "B5") '(addresslarge 236.0 99.0 "AddressLarge") '(addresssmall 236.0 68.0 "AddressSmall") '(cuthanging13 90.0 222.0 "CutHanging13") '(cuthanging15 90.0 114.0 "CutHanging15") '(diskette 181.0 136.0 "Diskette") '(eurofilefolder 139.0 112.0 "EuropeanFilefolder") '(eurofoldernarrow 526.0 107.0 "EuroFolderNarrow") '(eurofolderwide 526.0 136.0 "EuroFolderWide") '(euronamebadge 189.0 108.0 "EuroNameBadge") '(euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge") '(filefolder 230.0 37.0 "FileFolder") '(jewelry 76.0 136.0 "Jewelry") '(mediabadge 180.0 136.0 "MediaBadge") '(multipurpose 126.0 68.0 "MultiPurpose") '(retaillabel 90.0 104.0 "RetailLabel") '(shipping 271.0 136.0 "Shipping") '(slide35mm 26.0 104.0 "Slide35mm") '(spine8mm 187.0 26.0 "Spine8mm") '(topcoated 425.19685 136.0 "TopCoatedPaper") '(topcoatedpaper 396.0 136.0 "TopcoatedPaper150") '(vhsface 205.0 127.0 "VHSFace") '(vhsspine 400.0 50.0 "VHSSpine") '(zipdisk 156.0 136.0 "ZipDisk")))) nil [999747 1001452])
            ("custom-autoload" code nil nil [1001453 1001512])
            ("ps-paper-type" variable (:default-value 'letter) nil [1001513 1001702])
            ("custom-autoload" code nil nil [1001703 1001748])
            ("ps-print-color-p" variable (:default-value t) nil [1001749 1002016])
            ("custom-autoload" code nil nil [1002017 1002065])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1002066 1002146])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1002147 1002657])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1002658 1002993])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1002994 1003184])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003185 1003528])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003529 1003815])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003816 1004211])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1004212 1004464])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1004465 1004870])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1004871 1005375])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1005376 1005609])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1005610 1005793])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1005794 1005976])
            ("ps-setup" function (:prototype-flag t) nil [1005977 1006060])
            ("ps-extend-face-list" function (:prototype-flag t) nil [1006061 1006549])
            ("ps-extend-face" function (:prototype-flag t) nil [1006550 1007628])
            ("register-definition-prefixes" code nil nil [1007629 1007679])
            ("register-definition-prefixes" code nil nil [1007724 1007773])
            ("push" code nil nil [1007822 1007878])
            ("pulse-momentary-highlight-one-line" function (:prototype-flag t) nil [1007879 1008163])
            ("pulse-momentary-highlight-region" function (:prototype-flag t) nil [1008164 1008386])
            ("register-definition-prefixes" code nil nil [1008387 1008437])
            ("register-definition-prefixes" code nil nil [1008483 1008531])
            ("push" code nil nil [1008585 1008643])
            ("add-to-list" code nil nil [1008644 1008721])
            ("add-to-list" code nil nil [1008722 1008806])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1008807 1009600])
            ("python-add-import" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009601 1010058])
            ("python-import-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010059 1010285])
            ("python-remove-import" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010286 1010662])
            ("python-sort-imports" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010663 1010752])
            ("python-fix-imports" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010753 1010866])
            ("python-base-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010867 1011132])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011133 1011235])
            ("python-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011236 1011371])
            ("register-definition-prefixes" code nil nil [1011372 1011469])
            ("register-definition-prefixes" code nil nil [1011535 1011622])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011667 1012204])
            ("register-definition-prefixes" code nil nil [1012205 1012263])
            ("quail-title" function (:prototype-flag t) nil [1012320 1012402])
            ("quail-use-package" function (:prototype-flag t) nil [1012403 1012689])
            ("quail-define-package" function (:prototype-flag t) nil [1012690 1016944])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016945 1017378])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1017379 1017609])
            ("quail-define-rules" function (:prototype-flag t) nil [1017610 1019080])
            ("quail-install-map" function (:prototype-flag t) nil [1019081 1019356])
            ("quail-install-decode-map" function (:prototype-flag t) nil [1019357 1019674])
            ("quail-defrule" function (:prototype-flag t) nil [1019675 1020934])
            ("quail-defrule-internal" function (:prototype-flag t) nil [1020935 1021364])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1021365 1021935])
            ("register-definition-prefixes" code nil nil [1021936 1021986])
            ("register-definition-prefixes" code nil nil [1022045 1022105])
            ("register-definition-prefixes" code nil nil [1022159 1022209])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1022256 1022463])
            ("defalias" code nil nil [1022464 1022486])
            ("rcirc-connect" function (:prototype-flag t) nil [1022487 1022866])
            ("rcirc-track-minor-mode" variable nil nil [1022867 1023192])
            ("custom-autoload" code nil nil [1023193 1023246])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1023247 1023948])
            ("register-definition-prefixes" code nil nil [1023949 1024013])
            ("defalias" code nil nil [1024072 1024110])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1024111 1024734])
            ("register-definition-prefixes" code nil nil [1024735 1024817])
            ("recentf-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1024862 1025004])
            ("defalias" code nil nil [1025005 1025038])
            ("recentf-mode" variable nil nil [1025039 1025324])
            ("custom-autoload" code nil nil [1025325 1025370])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1025371 1026786])
            ("register-definition-prefixes" code nil nil [1026787 1026841])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026883 1027306])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [1027307 1027673])
            ("extract-rectangle" function (:prototype-flag t) nil [1027674 1027866])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1027867 1028509])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1028510 1028635])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1028636 1028739])
            ("insert-rectangle" function (:prototype-flag t) nil [1028740 1029102])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029103 1029532])
            ("define-obsolete-function-alias" code nil nil [1029533 1029619])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029620 1030106])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030107 1030495])
            ("define-obsolete-function-alias" code nil nil [1030496 1030573])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030574 1030914])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030915 1031254])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031255 1031642])
            ("rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031643 1032432])
            ("register-definition-prefixes" code nil nil [1032433 1032622])
            ("register-definition-prefixes" code nil nil [1032676 1032725])
            ("register-definition-prefixes" code nil nil [1032778 1032828])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032882 1033761])
            ("register-definition-prefixes" code nil nil [1033762 1033814])
            ("register-definition-prefixes" code nil nil [1033879 1033948])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034002 1034049])
            ("reftex-all-document-files" function (:prototype-flag t) nil [1034050 1034102])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034103 1034162])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034163 1034221])
            ("turn-on-reftex" function (:prototype-flag t) nil [1034222 1034282])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034283 1036215])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [1036216 1036386])
            ("register-definition-prefixes" code nil nil [1036387 1036439])
            ("register-definition-prefixes" code nil nil [1036497 1036553])
            ("register-definition-prefixes" code nil nil [1036612 1036669])
            ("register-definition-prefixes" code nil nil [1036727 1036783])
            ("register-definition-prefixes" code nil nil [1036844 1036903])
            ("register-definition-prefixes" code nil nil [1036963 1037021])
            ("register-definition-prefixes" code nil nil [1037081 1037139])
            ("register-definition-prefixes" code nil nil [1037197 1037253])
            ("register-definition-prefixes" code nil nil [1037311 1037367])
            ("register-definition-prefixes" code nil nil [1037425 1037481])
            ("put" code nil nil [1037540 1037632])
            ("put" code nil nil [1037633 1037725])
            ("put" code nil nil [1037726 1037783])
            ("put" code nil nil [1037784 1037866])
            ("register-definition-prefixes" code nil nil [1037867 1037924])
            ("regexp-opt" function (:prototype-flag t) nil [1037983 1039724])
            ("regexp-opt-depth" function (:prototype-flag t) nil [1039725 1039910])
            ("register-definition-prefixes" code nil nil [1039911 1039971])
            ("register-definition-prefixes" code nil nil [1040024 1040072])
            ("register-definition-prefixes" code nil nil [1040118 1040174])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040230 1040502])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040503 1040610])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040611 1040766])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [1040767 1040896])
            ("remember-notes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040897 1041846])
            ("register-definition-prefixes" code nil nil [1041847 1041903])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041947 1042630])
            ("repeat-map" variable nil nil [1042631 1042855])
            ("repeat-mode" variable nil nil [1042856 1043137])
            ("custom-autoload" code nil nil [1043138 1043181])
            ("repeat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1043182 1044190])
            ("repeat-exit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1044191 1044331])
            ("register-definition-prefixes" code nil nil [1044332 1044407])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [1044458 1045654])
            ("register-definition-prefixes" code nil nil [1045655 1045711])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1045759 1047000])
            ("register-definition-prefixes" code nil nil [1047001 1047074])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1047118 1047905])
            ("global-reveal-mode" variable nil nil [1047906 1048215])
            ("custom-autoload" code nil nil [1048216 1048266])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1048267 1049019])
            ("register-definition-prefixes" code nil nil [1049020 1049072])
            ("register-definition-prefixes" code nil nil [1049131 1049185])
            ("register-definition-prefixes" code nil nil [1049235 1049302])
            ("register-definition-prefixes" code nil nil [1049352 1049406])
            ("register-definition-prefixes" code nil nil [1049455 1049509])
            ("register-definition-prefixes" code nil nil [1049559 1049613])
            ("register-definition-prefixes" code nil nil [1049663 1049717])
            ("register-definition-prefixes" code nil nil [1049766 1049818])
            ("ring-p" function (:prototype-flag t) nil [1049871 1049948])
            ("make-ring" function (:prototype-flag t) nil [1049949 1050036])
            ("register-definition-prefixes" code nil nil [1050037 1050085])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [1050133 1050216])
            ("custom-autoload" code nil nil [1050217 1050261])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type '(hpux usg-unix-v)) "/usr/mail/") (t "/usr/spool/mail/")))) nil [1050262 1050659])
            ("custom-autoload" code nil nil [1050660 1050710])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [1050711 1050895])
            ("rmail-user-mail-address-regexp" variable nil nil [1050896 1051516])
            ("custom-autoload" code nil nil [1051517 1051576])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^ARC-.*:" "\\|^Received-SPF:" "\\|^Authentication-Results:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [1051577 1053055])
            ("custom-autoload" code nil nil [1053056 1053106])
            ("rmail-displayed-headers" variable nil nil [1053107 1053287])
            ("custom-autoload" code nil nil [1053288 1053340])
            ("rmail-retry-ignored-headers" variable (:default-value (concat "^x-authentication-warning:\\|^x-detected-operating-system:\\|" "^x-spam[-a-z]*:\\|^arc-.*:\\|" "^content-type:\\|^content-transfer-encoding:\\|" "^mime-version:\\|^message-id:\\|^x-google-smtp-source:\\|" "^x-received:\\|^received-spf:\\|" "^authentication-results:\\|^dkim-signature:")) nil [1053341 1053741])
            ("custom-autoload" code nil nil [1053742 1053798])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [1053799 1054009])
            ("custom-autoload" code nil nil [1054010 1054064])
            ("rmail-primary-inbox-list" variable nil nil [1054065 1054428])
            ("custom-autoload" code nil nil [1054429 1054482])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [1054483 1054590])
            ("custom-autoload" code nil nil [1054591 1054650])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail\\'")) nil [1054651 1054766])
            ("custom-autoload" code nil nil [1054767 1054823])
            ("rmail-mode-hook" variable nil nil [1054824 1054905])
            ("rmail-show-message-hook" variable nil nil [1054906 1055003])
            ("custom-autoload" code nil nil [1055004 1055056])
            ("rmail-file-coding-system" variable nil nil [1055057 1055164])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [1055165 1055537])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1055538 1056114])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1056115 1059498])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059499 1059579])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059580 1059717])
            ("register-definition-prefixes" code nil nil [1059718 1059776])
            ("register-definition-prefixes" code nil nil [1059836 1059905])
            ("rmail-edit-current-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059957 1060048])
            ("register-definition-prefixes" code nil nil [1060049 1060103])
            ("rmail-add-label" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060154 1060397])
            ("rmail-kill-label" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060398 1060647])
            ("rmail-read-label" function (:prototype-flag t) nil [1060648 1060944])
            ("rmail-previous-labeled-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060945 1061258])
            ("rmail-next-labeled-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061259 1061563])
            ("register-definition-prefixes" code nil nil [1061564 1061617])
            ("rmail-mime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061667 1062649])
            ("register-definition-prefixes" code nil nil [1062650 1062702])
            ("set-rmail-inbox-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1062753 1063044])
            ("put" code nil nil [1063095 1063149])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1063150 1064704])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064705 1065250])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1065251 1065830])
            ("register-definition-prefixes" code nil nil [1065831 1065884])
            ("rmail-sort-by-date" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1065936 1066119])
            ("rmail-sort-by-subject" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066120 1066339])
            ("rmail-sort-by-author" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066340 1066579])
            ("rmail-sort-by-recipient" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066580 1066830])
            ("rmail-sort-by-correspondent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066831 1067186])
            ("rmail-sort-by-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067187 1067375])
            ("rmail-sort-by-labels" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067376 1067812])
            ("register-definition-prefixes" code nil nil [1067813 1067867])
            ("rmail-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067918 1068017])
            ("rmail-summary-by-thread" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068018 1068331])
            ("rmail-summary-by-labels" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068332 1068534])
            ("rmail-summary-by-recipients" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068535 1068872])
            ("rmail-summary-by-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068873 1069178])
            ("rmail-summary-by-topic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1069179 1069489])
            ("rmail-summary-by-senders" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1069490 1069730])
            ("register-definition-prefixes" code nil nil [1069731 1069784])
            ("rng-c-load-schema" function (:prototype-flag t) nil [1069836 1069970])
            ("register-definition-prefixes" code nil nil [1069971 1070023])
            ("register-definition-prefixes" code nil nil [1070072 1070124])
            ("register-definition-prefixes" code nil nil [1070174 1070224])
            ("register-definition-prefixes" code nil nil [1070276 1070328])
            ("register-definition-prefixes" code nil nil [1070380 1070432])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1070483 1070715])
            ("register-definition-prefixes" code nil nil [1070716 1070767])
            ("register-definition-prefixes" code nil nil [1070819 1070877])
            ("register-definition-prefixes" code nil nil [1070929 1070981])
            ("register-definition-prefixes" code nil nil [1071031 1071081])
            ("register-definition-prefixes" code nil nil [1071132 1071183])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1071235 1073049])
            ("register-definition-prefixes" code nil nil [1073050 1073102])
            ("put" code nil nil [1073152 1073235])
            ("rng-xsd-compile" function (:prototype-flag t) nil [1073236 1074317])
            ("register-definition-prefixes" code nil nil [1074318 1074403])
            ("robin-define-package" function (:prototype-flag t) nil [1074460 1074902])
            ("robin-modify-package" function (:prototype-flag t) nil [1074903 1075180])
            ("robin-use-package" function (:prototype-flag t) nil [1075181 1075284])
            ("register-definition-prefixes" code nil nil [1075285 1075335])
            ("rot13" function (:prototype-flag t) nil [1075378 1075655])
            ("rot13-string" function (:prototype-flag t) nil [1075656 1075740])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1075741 1075950])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1075951 1076312])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1076313 1076413])
            ("register-definition-prefixes" code nil nil [1076414 1076464])
            ("add-to-list" code nil nil [1076516 1076585])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1076586 1076843])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1076844 1077627])
            ("register-definition-prefixes" code nil nil [1077628 1077674])
            ("register-definition-prefixes" code nil nil [1077717 1077767])
            ("push" code nil nil [1077824 1077884])
            ("ruby-base-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1077885 1078088])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1078089 1078168])
            ("add-to-list" code nil nil [1078169 1078434])
            ("dolist" code nil nil [1078435 1078570])
            ("register-definition-prefixes" code nil nil [1078571 1078624])
            ("push" code nil nil [1078684 1078747])
            ("ruby-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1078748 1078852])
            ("register-definition-prefixes" code nil nil [1078853 1078912])
            ("defvar-local" code nil nil [1078960 1079081])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1079082 1079720])
            ("register-definition-prefixes" code nil nil [1079721 1079776])
            ("rust-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1079836 1079940])
            ("register-definition-prefixes" code nil nil [1079941 1080005])
            ("rx-to-string" function (:prototype-flag t) nil [1080056 1080413])
            ("rx" function (:prototype-flag t) nil [1080414 1086079])
            ("rx-let-eval" function (:prototype-flag t) nil [1086080 1086961])
            ("function-put" code nil nil [1086962 1087013])
            ("rx-let" function (:prototype-flag t) nil [1087014 1087904])
            ("function-put" code nil nil [1087905 1087951])
            ("rx-define" function (:prototype-flag t) nil [1087952 1088633])
            ("function-put" code nil nil [1088634 1088688])
            ("rx--pcase-macroexpander" function (:arguments ("regexps")) nil [1088707 1089514])
            ("define-symbol-prop" code nil nil [1089516 1089584])
            ("define-symbol-prop" code nil nil [1089585 1089656])
            ("rx--pcase-expand" function (:prototype-flag t) nil [1089657 1089709])
            ("register-definition-prefixes" code nil nil [1089710 1089754])
            ("register-definition-prefixes" code nil nil [1089800 1089848])
            ("register-definition-prefixes" code nil nil [1089899 1089961])
            ("register-definition-prefixes" code nil nil [1090014 1090080])
            ("register-definition-prefixes" code nil nil [1090131 1090189])
            ("register-definition-prefixes" code nil nil [1090245 1090309])
            ("register-definition-prefixes" code nil nil [1090368 1090438])
            ("savehist-mode" variable nil nil [1090484 1090773])
            ("custom-autoload" code nil nil [1090774 1090821])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1090822 1092713])
            ("register-definition-prefixes" code nil nil [1092714 1092770])
            ("save-place-mode" variable nil nil [1092817 1093114])
            ("custom-autoload" code nil nil [1093115 1093165])
            ("save-place-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1093166 1093965])
            ("save-place-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1093966 1094902])
            ("register-definition-prefixes" code nil nil [1094903 1094961])
            ("register-definition-prefixes" code nil nil [1095016 1095078])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1095132 1095958])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1095959 1096400])
            ("register-definition-prefixes" code nil nil [1096401 1096462])
            ("register-definition-prefixes" code nil nil [1096525 1096592])
            ("register-definition-prefixes" code nil nil [1096650 1096712])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1096765 1096919])
            ("register-definition-prefixes" code nil nil [1096920 1096994])
            ("scroll-all-mode" variable nil nil [1097042 1097339])
            ("custom-autoload" code nil nil [1097340 1097391])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1097392 1098207])
            ("register-definition-prefixes" code nil nil [1098208 1098268])
            ("register-definition-prefixes" code nil nil [1098316 1098481])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1098530 1099528])
            ("register-definition-prefixes" code nil nil [1099529 1099591])
            ("when" code nil nil [1099640 1099717])
            ("register-definition-prefixes" code nil nil [1099718 1099772])
            ("register-definition-prefixes" code nil nil [1099832 1099904])
            ("push" code nil nil [1099956 1100015])
            ("semantic-default-submodes" variable (:default-value '(global-semantic-idle-scheduler-mode global-semanticdb-minor-mode)) nil [1100016 1101500])
            ("custom-autoload" code nil nil [1101501 1101558])
            ("semantic-mode" variable nil nil [1101559 1101848])
            ("custom-autoload" code nil nil [1101849 1101896])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1101897 1102846])
            ("register-definition-prefixes" code nil nil [1102847 1102914])
            ("register-definition-prefixes" code nil nil [1102974 1103061])
            ("mail-from-style" variable (:default-value 'angles) nil [1103112 1103517])
            ("custom-autoload" code nil nil [1103518 1103565])
            ("mail-specify-envelope-from" variable nil nil [1103566 1104022])
            ("custom-autoload" code nil nil [1104023 1104081])
            ("mail-self-blind" variable nil nil [1104082 1104399])
            ("custom-autoload" code nil nil [1104400 1104447])
            ("mail-interactive" variable (:default-value t) nil [1104448 1104605])
            ("custom-autoload" code nil nil [1104606 1104654])
            ("send-mail-function" variable (:default-value (if (and (boundp 'smtpmail-smtp-server) smtpmail-smtp-server) #'smtpmail-send-it #'sendmail-query-once)) nil [1104655 1105129])
            ("custom-autoload" code nil nil [1105130 1105180])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [1105181 1105323])
            ("custom-autoload" code nil nil [1105324 1105377])
            ("mail-archive-file-name" variable nil nil [1105378 1105687])
            ("custom-autoload" code nil nil [1105688 1105742])
            ("mail-default-reply-to" variable nil nil [1105743 1106058])
            ("custom-autoload" code nil nil [1106059 1106112])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [1106113 1106375])
            ("custom-autoload" code nil nil [1106376 1106432])
            ("mail-setup-hook" variable nil nil [1106433 1106531])
            ("custom-autoload" code nil nil [1106532 1106579])
            ("mail-aliases" variable (:default-value t) nil [1106580 1106885])
            ("mail-yank-prefix" variable (:default-value "> ") nil [1106886 1107055])
            ("custom-autoload" code nil nil [1107056 1107104])
            ("mail-indentation-spaces" variable (:default-value 3) nil [1107105 1107264])
            ("custom-autoload" code nil nil [1107265 1107320])
            ("mail-citation-hook" variable nil nil [1107321 1107817])
            ("custom-autoload" code nil nil [1107818 1107868])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[>|]\\)+")) nil [1107869 1108245])
            ("custom-autoload" code nil nil [1108246 1108305])
            ("mail-signature" variable (:default-value t) nil [1108306 1108788])
            ("custom-autoload" code nil nil [1108789 1108835])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [1108836 1108951])
            ("custom-autoload" code nil nil [1108952 1109003])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [1109004 1109272])
            ("custom-autoload" code nil nil [1109273 1109327])
            ("mail-default-headers" variable nil nil [1109328 1109682])
            ("custom-autoload" code nil nil [1109683 1109735])
            ("sendmail-query-once" function (:prototype-flag t) nil [1109736 1109901])
            ("define-mail-user-agent" code nil nil [1109902 1109998])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [1109999 1110173])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1110174 1111297])
            ("mail-send-and-exit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1111298 1111482])
            ("mail-mailing-lists" variable nil nil [1111483 1111695])
            ("custom-autoload" code nil nil [1111696 1111746])
            ("sendmail-coding-system" variable nil nil [1111747 1112066])
            ("default-sendmail-coding-system" variable (:default-value 'utf-8) nil [1112067 1112537])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1112538 1114721])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1114722 1114906])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1114907 1115089])
            ("register-definition-prefixes" code nil nil [1115090 1115154])
            ("push" code nil nil [1115206 1115261])
            ("put" code nil nil [1115305 1115347])
            ("put" code nil nil [1115348 1115390])
            ("put" code nil nil [1115391 1115437])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1115438 1116274])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116275 1116503])
            ("server-mode" variable nil nil [1116504 1116785])
            ("custom-autoload" code nil nil [1116786 1116829])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1116830 1117605])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [1117606 1117912])
            ("server-stop-automatically" function (:prototype-flag t) nil [1117913 1118848])
            ("register-definition-prefixes" code nil nil [1118849 1118901])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1118942 1120380])
            ("register-definition-prefixes" code nil nil [1120381 1120426])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120483 1121199])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121200 1123018])
            ("register-definition-prefixes" code nil nil [1123019 1123080])
            ("put" code nil nil [1123137 1123182])
            ("sh-base-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1123183 1123417])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1123418 1125896])
            ("defalias" code nil nil [1125897 1125935])
            ("bash-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1125936 1126119])
            ("register-definition-prefixes" code nil nil [1126120 1126171])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1126226 1128159])
            ("register-definition-prefixes" code nil nil [1128160 1128223])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1128271 1128706])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1128707 1129037])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129038 1129483])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1129484 1129555])
            ("register-definition-prefixes" code nil nil [1129556 1129611])
            ("register-definition-prefixes" code nil nil [1129664 1129733])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [1129776 1130127])
            ("custom-autoload" code nil nil [1130128 1130180])
            ("split-string-shell-command" function (:prototype-flag t) nil [1130181 1130397])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1130398 1132206])
            ("register-definition-prefixes" code nil nil [1132207 1132276])
            ("shortdoc--groups" variable nil nil [1132333 1132362])
            ("define-short-documentation-group" function (:arguments ("group" "functions")) nil [1132363 1134549])
            ("shortdoc-display-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1134550 1134832])
            ("defalias" code nil nil [1134833 1134878])
            ("register-definition-prefixes" code nil nil [1134879 1134935])
            ("shr-render-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1134980 1135118])
            ("shr-insert-document" function (:prototype-flag t) nil [1135119 1135308])
            ("register-definition-prefixes" code nil nil [1135309 1135355])
            ("register-definition-prefixes" code nil nil [1135406 1135464])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135511 1135578])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135579 1135639])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135640 1135709])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135710 1135779])
            ("register-definition-prefixes" code nil nil [1135780 1135830])
            ("register-definition-prefixes" code nil nil [1135884 1135941])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135993 1136121])
            ("register-definition-prefixes" code nil nil [1136122 1136177])
            ("register-definition-prefixes" code nil nil [1136231 1136291])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1136345 1138304])
            ("register-definition-prefixes" code nil nil [1138305 1138357])
            ("register-definition-prefixes" code nil nil [1138413 1138500])
            ("skeleton-filter-function" variable (:default-value 'identity) nil [1138546 1138663])
            ("define-skeleton" function (:prototype-flag t) nil [1138664 1138910])
            ("function-put" code nil nil [1138911 1138960])
            ("function-put" code nil nil [1138961 1139021])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [1139022 1139595])
            ("skeleton-insert" function (:prototype-flag t) nil [1139596 1143128])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1143129 1143850])
            ("register-definition-prefixes" code nil nil [1143851 1143907])
            ("smerge-refine-regions" function (:prototype-flag t) nil [1143959 1144883])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1144884 1145097])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145098 1145770])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145771 1145971])
            ("register-definition-prefixes" code nil nil [1145972 1146029])
            ("register-definition-prefixes" code nil nil [1146082 1146130])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146179 1146344])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146345 1146541])
            ("register-definition-prefixes" code nil nil [1146542 1146619])
            ("register-definition-prefixes" code nil nil [1146667 1146716])
            ("smtpmail-send-it" function (:prototype-flag t) nil [1146767 1146806])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1146807 1146933])
            ("register-definition-prefixes" code nil nil [1146934 1146990])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147038 1147591])
            ("register-definition-prefixes" code nil nil [1147592 1147642])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147693 1148061])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148062 1148436])
            ("register-definition-prefixes" code nil nil [1148437 1148489])
            ("push" code nil nil [1148534 1148594])
            ("so-long-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148595 1148703])
            ("so-long-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148704 1148789])
            ("so-long-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1148790 1149697])
            ("so-long-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149698 1150941])
            ("so-long" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1150942 1151454])
            ("so-long-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151455 1151590])
            ("global-so-long-mode" variable nil nil [1151591 1151904])
            ("custom-autoload" code nil nil [1151905 1151957])
            ("global-so-long-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151958 1153299])
            ("register-definition-prefixes" code nil nil [1153300 1153363])
            ("push" code nil nil [1153416 1153480])
            ("register-definition-prefixes" code nil nil [1153481 1153536])
            ("register-definition-prefixes" code nil nil [1153590 1153646])
            ("register-definition-prefixes" code nil nil [1153693 1153743])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1153795 1154184])
            ("register-definition-prefixes" code nil nil [1154185 1154270])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154322 1155980])
            ("register-definition-prefixes" code nil nil [1155981 1156039])
            ("register-definition-prefixes" code nil nil [1156096 1156157])
            ("put" code nil nil [1156199 1156251])
            ("sort-subr" function (:prototype-flag t) nil [1156252 1158398])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158399 1158820])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158821 1159166])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1159167 1159502])
            ("put" code nil nil [1159503 1159558])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1159559 1160131])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1160132 1160585])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1160586 1161692])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1161693 1162481])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162482 1162859])
            ("delete-duplicate-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162860 1163914])
            ("register-definition-prefixes" code nil nil [1163915 1163963])
            ("register-definition-prefixes" code nil nil [1164008 1164061])
            ("register-definition-prefixes" code nil nil [1164115 1164174])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1164221 1164576])
            ("register-definition-prefixes" code nil nil [1164577 1164625])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1164679 1165003])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [1165004 1165218])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [1165219 1165415])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1165416 1165656])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1165657 1165842])
            ("register-definition-prefixes" code nil nil [1165843 1165905])
            ("register-definition-prefixes" code nil nil [1165957 1166047])
            ("register-definition-prefixes" code nil nil [1166099 1166152])
            ("register-definition-prefixes" code nil nil [1166208 1166263])
            ("defalias" code nil nil [1166309 1166350])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1166351 1166805])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1166806 1167041])
            ("register-definition-prefixes" code nil nil [1167042 1167098])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1167146 1167232])
            ("snarf-spooks" function (:prototype-flag t) nil [1167233 1167333])
            ("register-definition-prefixes" code nil nil [1167334 1167390])
            ("push" code nil nil [1167441 1167495])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [1167496 1168225])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1168226 1169315])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1169316 1169637])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1169638 1170200])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1170201 1171420])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171421 1172651])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172652 1173764])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1173765 1175013])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175014 1176284])
            ("sql-mariadb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176285 1177549])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177550 1178677])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178678 1179775])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1179776 1180989])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1180990 1182446])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182447 1183594])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1183595 1184916])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184917 1186122])
            ("sql-vertica" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1186123 1186214])
            ("register-definition-prefixes" code nil nil [1186215 1186261])
            ("register-definition-prefixes" code nil nil [1186305 1186373])
            ("sqlite-mode-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1186422 1186525])
            ("register-definition-prefixes" code nil nil [1186526 1186583])
            ("register-definition-prefixes" code nil nil [1186638 1186700])
            ("push" code nil nil [1186751 1186809])
            ("register-definition-prefixes" code nil nil [1186810 1186871])
            ("register-definition-prefixes" code nil nil [1186926 1186989])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1187049 1187152])
            ("defalias" code nil nil [1187153 1187197])
            ("register-definition-prefixes" code nil nil [1187198 1187273])
            ("string-edit" function (:prototype-flag t) nil [1187332 1187922])
            ("read-string-from-buffer" function (:prototype-flag t) nil [1187923 1188371])
            ("register-definition-prefixes" code nil nil [1188372 1188434])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1188479 1188908])
            ("strokes-read-stroke" function (:prototype-flag t) nil [1188909 1189336])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [1189337 1189807])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189808 1189967])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1189968 1190136])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190137 1190274])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190275 1190361])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190362 1190476])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1190477 1190818])
            ("strokes-mode" variable nil nil [1190819 1191104])
            ("custom-autoload" code nil nil [1191105 1191150])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1191151 1192322])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192323 1192587])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192588 1192714])
            ("register-definition-prefixes" code nil nil [1192715 1192769])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192818 1192902])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1192903 1193024])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1193025 1193101])
            ("string-join" function (:arguments ("strings" "separator")) nil [1193156 1193401])
            ("string-truncate-left" function (:prototype-flag t) nil [1193402 1193671])
            ("string-blank-p" function (:arguments ("string")) nil [1193672 1193904])
            ("string-clean-whitespace" function (:prototype-flag t) nil [1193905 1194125])
            ("named-let" function (:prototype-flag t) nil [1194126 1194489])
            ("function-put" code nil nil [1194490 1194539])
            ("string-pixel-width" function (:prototype-flag t) nil [1194540 1194634])
            ("string-glyph-split" function (:prototype-flag t) nil [1194635 1194974])
            ("add-display-text-property" function (:prototype-flag t) nil [1194975 1195332])
            ("read-process-name" function (:prototype-flag t) nil [1195333 1195448])
            ("register-definition-prefixes" code nil nil [1195449 1195651])
            ("define-obsolete-function-alias" code nil nil [1195706 1195783])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1195784 1197224])
            ("put" code nil nil [1197225 1197276])
            ("global-subword-mode" variable nil nil [1197277 1197590])
            ("custom-autoload" code nil nil [1197591 1197643])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1197644 1198152])
            ("superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1198153 1199063])
            ("put" code nil nil [1199064 1199117])
            ("global-superword-mode" variable nil nil [1199118 1199439])
            ("custom-autoload" code nil nil [1199440 1199494])
            ("global-superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1199495 1200017])
            ("register-definition-prefixes" code nil nil [1200018 1200093])
            ("sc-cite-original" function (:prototype-flag t) nil [1200145 1201131])
            ("register-definition-prefixes" code nil nil [1201132 1201183])
            ("push" code nil nil [1201224 1201278])
            ("register-definition-prefixes" code nil nil [1201279 1201325])
            ("register-definition-prefixes" code nil nil [1201384 1201454])
            ("gpm-mouse-mode" variable (:default-value t) nil [1201499 1201790])
            ("custom-autoload" code nil nil [1201791 1201838])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1201839 1202885])
            ("register-definition-prefixes" code nil nil [1202886 1202942])
            ("tab-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1202988 1203653])
            ("defvar-local" code nil nil [1203654 1203689])
            ("put" code nil nil [1203690 1203742])
            ("global-tab-line-mode" variable nil nil [1203743 1204060])
            ("custom-autoload" code nil nil [1204061 1204115])
            ("global-tab-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1204116 1204624])
            ("register-definition-prefixes" code nil nil [1204625 1204681])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1204725 1205115])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1205116 1205605])
            ("register-definition-prefixes" code nil nil [1205606 1205664])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1205717 1206790])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1206791 1211886])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1211887 1212209])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212210 1212557])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212558 1212704])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1212705 1213069])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213070 1213113])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213114 1213447])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213448 1213513])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213514 1213773])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213774 1213823])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1213824 1214284])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1214285 1214333])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1214334 1214767])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1214768 1215255])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215256 1215498])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215499 1215718])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1215719 1217590])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1217591 1217802])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1217803 1217969])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1217970 1218120])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218121 1218291])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218292 1218446])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218447 1218699])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1218700 1219062])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1219063 1219261])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1219262 1219466])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1219467 1220218])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1220219 1221411])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1221412 1223042])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1223043 1223289])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1223290 1223556])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1223557 1228693])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1228694 1228991])
            ("register-definition-prefixes" code nil nil [1228992 1229053])
            ("register-definition-prefixes" code nil nil [1229110 1229170])
            ("push" code nil nil [1229233 1229298])
            ("register-definition-prefixes" code nil nil [1229354 1229414])
            ("register-definition-prefixes" code nil nil [1229475 1229554])
            ("register-definition-prefixes" code nil nil [1229613 1229676])
            ("register-definition-prefixes" code nil nil [1229738 1229814])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1229856 1229960])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1229961 1230063])
            ("register-definition-prefixes" code nil nil [1230064 1230112])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1230158 1230981])
            ("register-definition-prefixes" code nil nil [1230982 1231033])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1231084 1232143])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1232144 1232340])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1232341 1232528])
            ("register-definition-prefixes" code nil nil [1232529 1232617])
            ("register-definition-prefixes" code nil nil [1232676 1232737])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1232785 1233383])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1233384 1233611])
            ("make-obsolete" code nil nil [1233612 1233644])
            ("register-definition-prefixes" code nil nil [1233645 1233722])
            ("register-definition-prefixes" code nil nil [1233782 1233860])
            ("register-definition-prefixes" code nil nil [1233903 1233953])
            ("make-term" function (:prototype-flag t) nil [1233995 1234405])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234406 1234648])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234649 1234891])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1234892 1235619])
            ("register-definition-prefixes" code nil nil [1235620 1235703])
            ("testcover-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1235761 1235996])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1235997 1236087])
            ("register-definition-prefixes" code nil nil [1236088 1236146])
            ("tetris" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1236195 1236911])
            ("register-definition-prefixes" code nil nil [1236912 1236964])
            ("tex-shell-file-name" variable nil nil [1237020 1237128])
            ("custom-autoload" code nil nil [1237129 1237180])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1237181 1237468])
            ("custom-autoload" code nil nil [1237469 1237514])
            ("tex-first-line-header-regexp" variable nil nil [1237515 1237792])
            ("custom-autoload" code nil nil [1237793 1237853])
            ("tex-main-file" variable nil nil [1237854 1238045])
            ("custom-autoload" code nil nil [1238046 1238091])
            ("tex-offer-save" variable (:default-value t) nil [1238092 1238195])
            ("custom-autoload" code nil nil [1238196 1238242])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [1238243 1238404])
            ("custom-autoload" code nil nil [1238405 1238452])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [1238453 1238622])
            ("custom-autoload" code nil nil [1238623 1238672])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [1238673 1238846])
            ("custom-autoload" code nil nil [1238847 1238897])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [1238898 1239194])
            ("custom-autoload" code nil nil [1239195 1239244])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [1239245 1239500])
            ("custom-autoload" code nil nil [1239501 1239551])
            ("latex-block-names" variable nil nil [1239552 1239688])
            ("custom-autoload" code nil nil [1239689 1239738])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [1239739 1239998])
            ("custom-autoload" code nil nil [1239999 1240049])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1240050 1240300])
            ("custom-autoload" code nil nil [1240301 1240354])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [1240355 1240967])
            ("custom-autoload" code nil nil [1240968 1241025])
            ("tex-dvi-view-command" variable (:default-value `(cond ((eq window-system 'x) ,(purecopy "xdvi")) ((eq window-system 'w32) ,(purecopy "yap")) (t ,(purecopy "dvi2tty * | cat -s")))) nil [1241026 1241516])
            ("custom-autoload" code nil nil [1241517 1241569])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [1241570 1241746])
            ("custom-autoload" code nil nil [1241747 1241801])
            ("tex-default-mode" variable (:default-value nil) nil [1241802 1242101])
            ("custom-autoload" code nil nil [1242102 1242150])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [1242151 1242262])
            ("custom-autoload" code nil nil [1242263 1242309])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [1242310 1242423])
            ("custom-autoload" code nil nil [1242424 1242471])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1242472 1242950])
            ("defalias" code nil nil [1242952 1242983])
            ("defalias" code nil nil [1242985 1243028])
            ("defalias" code nil nil [1243030 1243065])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1243066 1244806])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1244807 1246506])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1246507 1248275])
            ("tex-start-shell" function (:prototype-flag t) nil [1248276 1248314])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1248315 1248394])
            ("register-definition-prefixes" code nil nil [1248395 1248496])
            ("register-definition-prefixes" code nil nil [1248552 1248646])
            ("register-definition-prefixes" code nil nil [1248703 1248764])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1248820 1249241])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249242 1249578])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1249579 1250201])
            ("register-definition-prefixes" code nil nil [1250202 1250278])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1250333 1250452])
            ("custom-autoload" code nil nil [1250453 1250502])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1250503 1250624])
            ("custom-autoload" code nil nil [1250625 1250675])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1250676 1253510])
            ("register-definition-prefixes" code nil nil [1253511 1253591])
            ("register-definition-prefixes" code nil nil [1253649 1253706])
            ("register-definition-prefixes" code nil nil [1253775 1253848])
            ("register-definition-prefixes" code nil nil [1253907 1253961])
            ("textsec-suspicious-p" function (:prototype-flag t) nil [1254026 1255145])
            ("register-definition-prefixes" code nil nil [1255146 1255211])
            ("register-definition-prefixes" code nil nil [1255264 1255336])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1255392 1255600])
            ("thai-compose-string" function (:prototype-flag t) nil [1255601 1255728])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1255729 1255825])
            ("thai-composition-function" function (:prototype-flag t) nil [1255826 1255904])
            ("register-definition-prefixes" code nil nil [1255905 1256043])
            ("register-definition-prefixes" code nil nil [1256099 1256152])
            ("forward-thing" function (:prototype-flag t) nil [1256199 1256532])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [1256533 1257055])
            ("thing-at-point" function (:prototype-flag t) nil [1257056 1257600])
            ("bounds-of-thing-at-mouse" function (:prototype-flag t) nil [1257601 1257878])
            ("thing-at-mouse" function (:prototype-flag t) nil [1257879 1258137])
            ("sexp-at-point" function (:prototype-flag t) nil [1258138 1258230])
            ("symbol-at-point" function (:prototype-flag t) nil [1258231 1258327])
            ("number-at-point" function (:prototype-flag t) nil [1258328 1258540])
            ("list-at-point" function (:prototype-flag t) nil [1258541 1258767])
            ("register-definition-prefixes" code nil nil [1258768 1258965])
            ("thread-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1259009 1259186])
            ("list-threads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1259187 1259253])
            ("put" code nil nil [1259255 1259350])
            ("register-definition-prefixes" code nil nil [1259351 1259408])
            ("push" code nil nil [1259462 1259518])
            ("register-definition-prefixes" code nil nil [1259519 1259569])
            ("tibetan-char-p" function (:prototype-flag t) nil [1259626 1259776])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [1259777 1259921])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [1259922 1260107])
            ("tibetan-compose-string" function (:prototype-flag t) nil [1260108 1260197])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1260198 1260310])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1260311 1260567])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [1260568 1260798])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1260799 1260992])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1260993 1261160])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1261161 1261229])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1261230 1261302])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1261303 1261389])
            ("register-definition-prefixes" code nil nil [1261390 1261447])
            ("register-definition-prefixes" code nil nil [1261503 1261575])
            ("push" code nil nil [1261630 1261690])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1261691 1262148])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1262149 1262586])
            ("tildify-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1262587 1263433])
            ("tildify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1263434 1264570])
            ("register-definition-prefixes" code nil nil [1264571 1264625])
            ("display-time-day-and-date" variable nil nil [1264667 1264785])
            ("custom-autoload" code nil nil [1264786 1264839])
            ("put" code nil nil [1264840 1264890])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1264891 1265198])
            ("display-time-mode" variable nil nil [1265199 1265504])
            ("custom-autoload" code nil nil [1265505 1265552])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1265553 1266559])
            ("define-obsolete-function-alias" code nil nil [1266560 1266633])
            ("world-clock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1266634 1266881])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1266882 1267206])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1267207 1267444])
            ("register-definition-prefixes" code nil nil [1267445 1267597])
            ("date-to-time" function (:prototype-flag t) nil [1267653 1267899])
            ("defalias" code nil nil [1267900 1267940])
            ("seconds-to-time" function (:prototype-flag t) nil [1267941 1268059])
            ("days-to-time" function (:prototype-flag t) nil [1268060 1268143])
            ("time-since" function (:prototype-flag t) nil [1268144 1268287])
            ("define-obsolete-function-alias" code nil nil [1268288 1268358])
            ("date-to-day" function (:prototype-flag t) nil [1268359 1268573])
            ("days-between" function (:prototype-flag t) nil [1268574 1268728])
            ("date-leap-year-p" function (:prototype-flag t) nil [1268729 1268817])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1268818 1268937])
            ("time-to-days" function (:prototype-flag t) nil [1268938 1269154])
            ("safe-date-to-time" function (:prototype-flag t) nil [1269155 1269335])
            ("format-seconds" function (:prototype-flag t) nil [1269336 1270545])
            ("seconds-to-string" function (:prototype-flag t) nil [1270546 1270659])
            ("register-definition-prefixes" code nil nil [1270660 1270803])
            ("put" code nil nil [1270851 1270905])
            ("put" code nil nil [1270906 1270978])
            ("time-stamp-zone-type-p" function (:prototype-flag t) nil [1270979 1271186])
            ("put" code nil nil [1271187 1271246])
            ("put" code nil nil [1271247 1271300])
            ("put" code nil nil [1271301 1271352])
            ("put" code nil nil [1271353 1271414])
            ("put" code nil nil [1271415 1271469])
            ("put" code nil nil [1271470 1271525])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1271526 1272935])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1272936 1273152])
            ("register-definition-prefixes" code nil nil [1273153 1273213])
            ("timeclock-mode-line-display" variable nil nil [1273269 1273619])
            ("custom-autoload" code nil nil [1273620 1273682])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1273683 1274343])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1274344 1275104])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1275105 1275575])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1275576 1275908])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1275909 1276244])
            ("timeclock-query-out" function (:prototype-flag t) nil [1276245 1276397])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1276398 1276554])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1276555 1276946])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1276947 1277238])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1277239 1277651])
            ("register-definition-prefixes" code nil nil [1277652 1277710])
            ("list-timers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1277769 1277879])
            ("put" code nil nil [1277881 1277974])
            ("register-definition-prefixes" code nil nil [1277975 1278035])
            ("register-definition-prefixes" code nil nil [1278081 1278137])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1278199 1278447])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1278448 1278895])
            ("register-definition-prefixes" code nil nil [1278896 1279079])
            ("define-key" code nil nil [1279121 1279164])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279165 1279655])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1279656 1279933])
            ("tmm-prompt" function (:prototype-flag t) nil [1279934 1280659])
            ("register-definition-prefixes" code nil nil [1280660 1280706])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1280762 1282637])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282638 1282764])
            ("todo-archive-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282765 1282886])
            ("todo-filtered-items-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1282887 1283039])
            ("register-definition-prefixes" code nil nil [1283040 1283093])
            ("toml-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1283153 1283257])
            ("register-definition-prefixes" code nil nil [1283258 1283322])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1283368 1283559])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1283560 1284316])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1284317 1284949])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1284950 1285650])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1285651 1286208])
            ("register-definition-prefixes" code nil nil [1286209 1286299])
            ("register-definition-prefixes" code nil nil [1286344 1286398])
            ("tq-create" function (:prototype-flag t) nil [1286449 1286728])
            ("register-definition-prefixes" code nil nil [1286729 1286773])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [1286827 1286917])
            ("custom-autoload" code nil nil [1286918 1286959])
            ("trace-values" function (:prototype-flag t) nil [1286960 1287126])
            ("trace-function-foreground" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1287127 1288137])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1288138 1288393])
            ("defalias" code nil nil [1288394 1288447])
            ("register-definition-prefixes" code nil nil [1288448 1288525])
            ("when" code nil nil [1288573 1288648])
            ("tramp-mode" variable (:default-value t) nil [1288649 1288763])
            ("custom-autoload" code nil nil [1288764 1288803])
            ("tramp-initial-file-name-regexp" variable
               (:constant-flag t
                :default-value (rx bos "/" (+ (not (any "/:"))) ":" (* (not (any "/:"))) ":"))
                nil [1288804 1289012])
            ("tramp-file-name-regexp" variable (:default-value tramp-initial-file-name-regexp) nil [1289013 1289330])
            ("tramp-ignored-file-name-regexp" variable nil nil [1289331 1289453])
            ("custom-autoload" code nil nil [1289454 1289513])
            ("tramp-autoload-file-name-regexp" variable
               (:constant-flag t
                :default-value (rx bos "/" (| "-" (>= 2 (not (any "/:|")))) ":"))
                nil [1289514 1289830])
            ("tramp-foreign-file-name-handler-alist" variable nil nil [1289831 1290057])
            ("tramp-file-name-handler" function (:prototype-flag t) nil [1290058 1290263])
            ("tramp-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1290264 1290639])
            ("tramp-register-autoload-file-name-handlers" function nil nil [1290640 1291008])
            ("tramp-register-autoload-file-name-handlers" code nil nil [1291010 1291054])
            ("tramp-unload-file-name-handlers" function nil nil [1291055 1291355])
            ("tramp-unload-tramp" function (:user-visible-flag t) nil [1291356 1291492])
            ("register-definition-prefixes" code nil nil [1291493 1291551])
            ("register-definition-prefixes" code nil nil [1291602 1291656])
            ("tramp-archive-enabled" variable (:default-value (featurep 'dbusbind)) nil [1291711 1291814])
            ("tramp-archive-suffixes" variable
               (:constant-flag t
                :default-value '("7z" "apk" "ar" "cab" "CAB" "cpio" "crate" "deb" "depot" "epub" "exe" "iso" "jar" "lzh" "LZH" "msu" "MSU" "mtree" "odb" "odf" "odg" "odp" "ods" "odt" "pax" "rar" "rpm" "shar" "tar" "tbz" "tgz" "tlz" "txz" "tzst" "warc" "xar" "xpi" "xps" "zip" "ZIP"))
                nil [1291815 1292191])
            ("tramp-archive-compression-suffixes" variable
               (:constant-flag t
                :default-value '("bz2" "gz" "lrz" "lz" "lz4" "lzma" "lzo" "uu" "xz" "Z" "zst"))
                nil [1292192 1292395])
            ("tramp-archive-autoload-file-name-regexp" function nil nil [1292396 1292841])
            ("tramp-archive-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1292842 1293168])
            ("tramp-register-archive-autoload-file-name-handler" function nil nil [1293169 1293594])
            ("add-hook" code nil nil [1293595 1293674])
            ("add-hook" code nil nil [1293675 1293808])
            ("register-definition-prefixes" code nil nil [1293809 1293905])
            ("register-definition-prefixes" code nil nil [1293958 1294028])
            ("register-definition-prefixes" code nil nil [1294080 1294135])
            ("defalias" code nil nil [1294190 1294222])
            ("register-definition-prefixes" code nil nil [1294223 1294280])
            ("register-definition-prefixes" code nil nil [1294337 1294397])
            ("register-definition-prefixes" code nil nil [1294450 1294512])
            ("register-definition-prefixes" code nil nil [1294563 1294617])
            ("register-definition-prefixes" code nil nil [1294669 1294729])
            ("register-definition-prefixes" code nil nil [1294781 1294855])
            ("register-definition-prefixes" code nil nil [1294914 1294976])
            ("register-definition-prefixes" code nil nil [1295030 1295094])
            ("register-definition-prefixes" code nil nil [1295144 1295197])
            ("register-definition-prefixes" code nil nil [1295248 1295306])
            ("register-definition-prefixes" code nil nil [1295359 1295421])
            ("register-definition-prefixes" code nil nil [1295477 1295545])
            ("register-definition-prefixes" code nil nil [1295595 1295650])
            ("push" code nil nil [1295700 1295763])
            ("register-definition-prefixes" code nil nil [1295764 1295817])
            ("transient-define-prefix" function (:prototype-flag t) nil [1295864 1297457])
            ("function-put" code nil nil [1297458 1297526])
            ("function-put" code nil nil [1297527 1297584])
            ("transient-insert-suffix" function (:prototype-flag t) nil [1297585 1298176])
            ("function-put" code nil nil [1298177 1298245])
            ("transient-append-suffix" function (:prototype-flag t) nil [1298246 1298836])
            ("function-put" code nil nil [1298837 1298905])
            ("transient-replace-suffix" function (:prototype-flag t) nil [1298906 1299416])
            ("function-put" code nil nil [1299417 1299486])
            ("transient-remove-suffix" function (:prototype-flag t) nil [1299487 1299869])
            ("function-put" code nil nil [1299870 1299938])
            ("register-definition-prefixes" code nil nil [1299939 1299996])
            ("register-definition-prefixes" code nil nil [1300045 1300107])
            ("treesit-install-language-grammar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1300152 1300918])
            ("register-definition-prefixes" code nil nil [1300919 1300973])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1301019 1301800])
            ("register-definition-prefixes" code nil nil [1301801 1301891])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1301945 1302044])
            ("register-definition-prefixes" code nil nil [1302045 1302100])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1302159 1302207])
            ("global-set-key" code nil nil [1302209 1302246])
            ("global-set-key" code nil nil [1302248 1302282])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1302283 1302741])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1302742 1303002])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1303003 1303783])
            ("register-definition-prefixes" code nil nil [1303784 1303836])
            ("type-break-mode" variable nil nil [1303884 1304181])
            ("custom-autoload" code nil nil [1304182 1304233])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1304234 1308287])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1308288 1308558])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1308559 1308820])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1308821 1310095])
            ("register-definition-prefixes" code nil nil [1310096 1310156])
            ("typescript-ts-base-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1310222 1310325])
            ("typescript-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1310326 1310424])
            ("tsx-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1310425 1310827])
            ("register-definition-prefixes" code nil nil [1310828 1310920])
            ("string-glyph-compose" function (:prototype-flag t) nil [1310985 1311346])
            ("string-glyph-decompose" function (:prototype-flag t) nil [1311347 1311650])
            ("register-definition-prefixes" code nil nil [1311651 1311729])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1311786 1312026])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1312027 1312248])
            ("undigestify-rmail-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1312299 1312479])
            ("unforward-rmail-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1312480 1312789])
            ("register-definition-prefixes" code nil nil [1312790 1312843])
            ("ucs-input-activate" function (:prototype-flag t) nil [1312901 1313186])
            ("register-definition-prefixes" code nil nil [1313187 1313251])
            ("batch-unrmail" function (:prototype-flag t) nil [1313301 1313613])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1313614 1313807])
            ("register-definition-prefixes" code nil nil [1313808 1313873])
            ("unsafep" function (:prototype-flag t) nil [1313929 1314165])
            ("register-definition-prefixes" code nil nil [1314166 1314237])
            ("url-retrieve" function (:prototype-flag t) nil [1314282 1315837])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1315838 1316406])
            ("register-definition-prefixes" code nil nil [1316407 1316453])
            ("url-get-authentication" function (:prototype-flag t) nil [1316503 1317639])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1317640 1318312])
            ("register-definition-prefixes" code nil nil [1318313 1318364])
            ("url-store-in-cache" function (:prototype-flag t) nil [1318415 1318514])
            ("url-is-cached" function (:prototype-flag t) nil [1318515 1318676])
            ("url-cache-extract" function (:prototype-flag t) nil [1318677 1318773])
            ("register-definition-prefixes" code nil nil [1318774 1318826])
            ("url-cid" function (:prototype-flag t) nil [1318875 1318919])
            ("register-definition-prefixes" code nil nil [1318920 1318978])
            ("register-definition-prefixes" code nil nil [1319030 1319089])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1319138 1319282])
            ("url-dav-request" function (:prototype-flag t) nil [1319283 1320057])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1320058 1320116])
            ("register-definition-prefixes" code nil nil [1320117 1320171])
            ("register-definition-prefixes" code nil nil [1320223 1320283])
            ("register-definition-prefixes" code nil nil [1320335 1320388])
            ("url-file" function (:prototype-flag t) nil [1320438 1320527])
            ("register-definition-prefixes" code nil nil [1320528 1320579])
            ("register-definition-prefixes" code nil nil [1320628 1320681])
            ("register-definition-prefixes" code nil nil [1320733 1320793])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1320841 1320966])
            ("url-open-stream" function (:prototype-flag t) nil [1320967 1321384])
            ("register-definition-prefixes" code nil nil [1321385 1321434])
            ("url-handler-mode" variable nil nil [1321488 1321789])
            ("custom-autoload" code nil nil [1321790 1321844])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1321845 1322760])
            ("url-file-handler" function (:prototype-flag t) nil [1322761 1323021])
            ("url-copy-file" function (:prototype-flag t) nil [1323022 1323406])
            ("url-file-local-copy" function (:prototype-flag t) nil [1323407 1323605])
            ("url-insert-buffer-contents" function (:prototype-flag t) nil [1323606 1323876])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1323877 1323975])
            ("url-insert-file-contents-literally" function (:prototype-flag t) nil [1323976 1324119])
            ("register-definition-prefixes" code nil nil [1324120 1324175])
            ("register-definition-prefixes" code nil nil [1324228 1324282])
            ("url-default-expander" function (:prototype-flag t) nil [1324333 1324378])
            ("defalias" code nil nil [1324379 1324439])
            ("url-https" function (:prototype-flag t) nil [1324441 1324473])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1324475 1324521])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1324523 1324571])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1324573 1324621])
            ("register-definition-prefixes" code nil nil [1324622 1324674])
            ("register-definition-prefixes" code nil nil [1324724 1324779])
            ("url-irc" function (:prototype-flag t) nil [1324828 1324872])
            ("url-ircs-default-port" variable
               (:constant-flag t
                :default-value 6697)
                nil [1324873 1324949])
            ("defalias" code nil nil [1324950 1324979])
            ("register-definition-prefixes" code nil nil [1324980 1325034])
            ("url-ldap" function (:prototype-flag t) nil [1325084 1325328])
            ("register-definition-prefixes" code nil nil [1325329 1325385])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1325437 1325494])
            ("url-mailto" function (:prototype-flag t) nil [1325495 1325575])
            ("register-definition-prefixes" code nil nil [1325576 1325644])
            ("register-definition-prefixes" code nil nil [1325697 1325758])
            ("url-man" function (:prototype-flag t) nil [1325808 1325882])
            ("url-info" function (:prototype-flag t) nil [1325883 1325950])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1325951 1326016])
            ("define-obsolete-function-alias" code nil nil [1326017 1326098])
            ("defalias" code nil nil [1326099 1326150])
            ("defalias" code nil nil [1326151 1326202])
            ("url-data" function (:prototype-flag t) nil [1326203 1326277])
            ("register-definition-prefixes" code nil nil [1326278 1326329])
            ("url-news" function (:prototype-flag t) nil [1326379 1326425])
            ("url-snews" function (:prototype-flag t) nil [1326426 1326473])
            ("register-definition-prefixes" code nil nil [1326474 1326530])
            ("register-definition-prefixes" code nil nil [1326579 1326632])
            ("url-recreate-url" function (:prototype-flag t) nil [1326683 1326786])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1326787 1328225])
            ("register-definition-prefixes" code nil nil [1328226 1328278])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1328331 1328445])
            ("register-definition-prefixes" code nil nil [1328446 1328511])
            ("register-definition-prefixes" code nil nil [1328562 1328614])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1328665 1329094])
            ("register-definition-prefixes" code nil nil [1329095 1329152])
            ("url-tramp-protocols" variable (:default-value '("ftp" "ssh" "scp" "rsync" "telnet")) nil [1329203 1329386])
            ("custom-autoload" code nil nil [1329387 1329439])
            ("url-tramp-file-handler" function (:prototype-flag t) nil [1329440 1329680])
            ("register-definition-prefixes" code nil nil [1329681 1329747])
            ("url-debug" variable nil nil [1329797 1330105])
            ("custom-autoload" code nil nil [1330106 1330147])
            ("url-debug" function (:prototype-flag t) nil [1330148 1330206])
            ("url-parse-args" function (:prototype-flag t) nil [1330207 1330280])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1330281 1330689])
            ("url-normalize-url" function (:prototype-flag t) nil [1330690 1330822])
            ("url-lazy-message" function (:prototype-flag t) nil [1330823 1331004])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1331005 1331146])
            ("define-obsolete-function-alias" code nil nil [1331147 1331230])
            ("define-obsolete-function-alias" code nil nil [1331231 1331315])
            ("url-display-message" function (:prototype-flag t) nil [1331316 1331443])
            ("url-display-percentage" function (:prototype-flag t) nil [1331444 1331520])
            ("make-obsolete" code nil nil [1331521 1331588])
            ("url-percentage" function (:prototype-flag t) nil [1331589 1331641])
            ("defalias" code nil nil [1331642 1331687])
            ("url-file-directory" function (:prototype-flag t) nil [1331688 1331790])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1331791 1331899])
            ("url-parse-query-string" function (:prototype-flag t) nil [1331900 1331996])
            ("url-build-query-string" function (:prototype-flag t) nil [1331997 1332611])
            ("url-unhex-string" function (:prototype-flag t) nil [1332612 1333026])
            ("url-hexify-string" function (:prototype-flag t) nil [1333027 1333678])
            ("url-encode-url" function (:prototype-flag t) nil [1333679 1333983])
            ("url-file-extension" function (:prototype-flag t) nil [1333984 1334192])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1334193 1334390])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1334391 1334635])
            ("url-domain" function (:prototype-flag t) nil [1334636 1334861])
            ("register-definition-prefixes" code nil nil [1334862 1334913])
            ("register-definition-prefixes" code nil nil [1334963 1335014])
            ("push" code nil nil [1335075 1335139])
            ("use-package-autoload-keymap" function (:prototype-flag t) nil [1335209 1335814])
            ("use-package-normalize-binder" function (:prototype-flag t) nil [1335815 1335907])
            ("defalias" code nil nil [1335908 1335977])
            ("defalias" code nil nil [1335978 1336048])
            ("defalias" code nil nil [1336049 1336116])
            ("defalias" code nil nil [1336117 1336185])
            ("use-package-handler/:bind" function (:prototype-flag t) nil [1336186 1336307])
            ("defalias" code nil nil [1336308 1336384])
            ("defalias" code nil nil [1336385 1336462])
            ("use-package-handler/:bind-keymap" function (:prototype-flag t) nil [1336463 1336589])
            ("use-package-handler/:bind-keymap*" function (:prototype-flag t) nil [1336590 1336697])
            ("register-definition-prefixes" code nil nil [1336698 1336783])
            ("use-package" function (:prototype-flag t) nil [1336849 1340396])
            ("function-put" code nil nil [1340397 1340453])
            ("register-definition-prefixes" code nil nil [1340454 1340521])
            ("use-package-normalize/:delight" function (:prototype-flag t) nil [1340590 1340714])
            ("use-package-handler/:delight" function (:prototype-flag t) nil [1340715 1340817])
            ("register-definition-prefixes" code nil nil [1340818 1340905])
            ("use-package-normalize/:diminish" function (:prototype-flag t) nil [1340975 1341070])
            ("use-package-handler/:diminish" function (:prototype-flag t) nil [1341071 1341174])
            ("register-definition-prefixes" code nil nil [1341175 1341264])
            ("use-package-normalize/:ensure" function (:prototype-flag t) nil [1341332 1341423])
            ("use-package-handler/:ensure" function (:prototype-flag t) nil [1341424 1341526])
            ("register-definition-prefixes" code nil nil [1341527 1341596])
            ("push" code nil nil [1341679 1341763])
            ("use-package-normalize/:ensure-system-package" function (:prototype-flag t) nil [1341764 1341969])
            ("use-package-handler/:ensure-system-package" function (:prototype-flag t) nil [1341970 1342173])
            ("register-definition-prefixes" code nil nil [1342174 1342280])
            ("use-package-jump-to-package-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1342346 1342689])
            ("register-definition-prefixes" code nil nil [1342690 1342769])
            ("use-package-lint" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1342835 1343058])
            ("register-definition-prefixes" code nil nil [1343059 1343142])
            ("put" code nil nil [1343188 1343242])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1343243 1343711])
            ("userlock--ask-user-about-supersession-threat" function (:prototype-flag t) nil [1343712 1343799])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1343800 1344303])
            ("userlock--handle-unlock-error" function (:prototype-flag t) nil [1344304 1344426])
            ("register-definition-prefixes" code nil nil [1344427 1344533])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1344590 1344651])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1344652 1344718])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1344719 1344784])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1344785 1344855])
            ("register-definition-prefixes" code nil nil [1344856 1344906])
            ("utf7-encode" function (:prototype-flag t) nil [1344962 1345096])
            ("register-definition-prefixes" code nil nil [1345097 1345145])
            ("register-definition-prefixes" code nil nil [1345202 1345263])
            ("register-definition-prefixes" code nil nil [1345315 1345386])
            ("register-definition-prefixes" code nil nil [1345449 1345516])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1345567 1345842])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1345843 1346067])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1346068 1346247])
            ("register-definition-prefixes" code nil nil [1346248 1346304])
            ("vc-checkout-hook" variable nil nil [1346347 1346460])
            ("custom-autoload" code nil nil [1346461 1346503])
            ("vc-checkin-hook" variable nil nil [1346504 1346633])
            ("custom-autoload" code nil nil [1346634 1346675])
            ("vc-before-checkin-hook" variable nil nil [1346676 1346803])
            ("custom-autoload" code nil nil [1346804 1346852])
            ("vc-responsible-backend" function (:prototype-flag t) nil [1346853 1347418])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1347419 1348860])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1348861 1349521])
            ("vc-ignore" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1349522 1350050])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1350051 1350420])
            ("vc-root-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1350421 1350550])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1350551 1351008])
            ("vc-diff-mergebase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1351009 1351204])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1351205 1351660])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1351661 1352058])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1352059 1352482])
            ("vc-root-dir" function (:prototype-flag t) nil [1352483 1352621])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1352622 1352874])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1352875 1353074])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1353075 1353743])
            ("vc-message-unresolved-conflicts" function (:prototype-flag t) nil [1353744 1353874])
            ("defalias" code nil nil [1353875 1353921])
            ("vc-find-conflicted-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1353922 1354023])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1354024 1354598])
            ("vc-create-branch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1354599 1355476])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1355477 1356322])
            ("vc-switch-branch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1356323 1356834])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1356835 1357636])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1357637 1358234])
            ("vc-print-branch-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1358235 1358401])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1358402 1358701])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1358702 1359007])
            ("vc-log-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1359008 1359525])
            ("vc-log-mergebase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1359526 1359724])
            ("vc-region-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1359725 1359898])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1359899 1360131])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1360132 1360810])
            ("defalias" code nil nil [1360811 1360841])
            ("vc-push" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1360842 1361325])
            ("vc-pull-and-push" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1361326 1362055])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1362056 1362475])
            ("make-obsolete" code nil nil [1362476 1362522])
            ("vc-transfer-file" function (:prototype-flag t) nil [1362523 1363123])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1363124 1363347])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1363348 1363579])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1363580 1364188])
            ("vc-edit-next-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1364189 1364385])
            ("put" code nil nil [1364387 1364454])
            ("vc-prepare-patch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1364455 1364999])
            ("register-definition-prefixes" code nil nil [1365000 1365065])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1365117 1366689])
            ("register-definition-prefixes" code nil nil [1366690 1366743])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1366790 1366894])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1366895 1367037])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1367039 1367209])
            ("register-definition-prefixes" code nil nil [1367210 1367262])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1367309 1367536])
            ("register-definition-prefixes" code nil nil [1367537 1367589])
            ("register-definition-prefixes" code nil nil [1367636 1367688])
            ("vc-dir-root" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1367735 1367936])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1367937 1368653])
            ("vc-dir-bookmark-jump" function (:prototype-flag t) nil [1368654 1368881])
            ("register-definition-prefixes" code nil nil [1368882 1368930])
            ("vc-do-command" function (:prototype-flag t) nil [1368984 1369945])
            ("register-definition-prefixes" code nil nil [1369946 1370001])
            ("register-definition-prefixes" code nil nil [1370053 1370106])
            ("put" code nil nil [1370153 1370247])
            ("vc-git-registered" function (:arguments ("file")) nil [1370249 1370462])
            ("register-definition-prefixes" code nil nil [1370463 1370511])
            ("vc-hg-registered" function (:arguments ("file")) nil [1370558 1370765])
            ("register-definition-prefixes" code nil nil [1370766 1370816])
            ("vc-rcs-master-templates" variable (:default-value (purecopy '("%sRCS/%s,v" "%s%s,v" "%sRCS/%s"))) nil [1370863 1371053])
            ("custom-autoload" code nil nil [1371054 1371107])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1371108 1371168])
            ("register-definition-prefixes" code nil nil [1371169 1371218])
            ("vc-sccs-master-templates" variable (:default-value (purecopy '("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir))) nil [1371266 1371475])
            ("custom-autoload" code nil nil [1371476 1371531])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1371532 1371594])
            ("vc-sccs-search-project-dir" function (:arguments ("_dirname" "basename")) nil [1371595 1372278])
            ("register-definition-prefixes" code nil nil [1372279 1372333])
            ("vc-src-master-templates" variable (:default-value (purecopy '("%s.src/%s,v"))) nil [1372380 1372551])
            ("custom-autoload" code nil nil [1372552 1372605])
            ("vc-src-registered" function (:arguments ("f")) nil [1372606 1372666])
            ("register-definition-prefixes" code nil nil [1372667 1372719])
            ("vc-svn-registered" function (:arguments ("f")) nil [1372767 1373088])
            ("register-definition-prefixes" code nil nil [1373089 1373141])
            ("register-definition-prefixes" code nil nil [1373186 1373240])
            ("push" code nil nil [1373297 1373358])
            ("add-to-list" code nil nil [1373360 1373436])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1373437 1375155])
            ("register-definition-prefixes" code nil nil [1375156 1375209])
            ("push" code nil nil [1375269 1375349])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1375350 1382030])
            ("register-definition-prefixes" code nil nil [1382031 1382116])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1382173 1407789])
            ("register-definition-prefixes" code nil nil [1407790 1407843])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1407899 1408014])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408015 1408276])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408277 1408403])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408404 1408665])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1408666 1408792])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1408793 1408857])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1408858 1408926])
            ("register-definition-prefixes" code nil nil [1408927 1409004])
            ("defvar-local" code nil nil [1409046 1409225])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1409226 1409350])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1409351 1409796])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1409797 1410369])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1410370 1410958])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1410959 1412044])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1412045 1412928])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1412929 1413810])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1413811 1419043])
            ("view-mode-enter" function (:prototype-flag t) nil [1419044 1419703])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1419704 1419800])
            ("register-definition-prefixes" code nil nil [1419801 1419857])
            ("push" code nil nil [1419910 1419969])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1419970 1420092])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1420093 1420198])
            ("register-definition-prefixes" code nil nil [1420199 1420249])
            ("register-definition-prefixes" code nil nil [1420306 1420360])
            ("register-definition-prefixes" code nil nil [1420416 1420475])
            ("register-definition-prefixes" code nil nil [1420533 1420588])
            ("register-definition-prefixes" code nil nil [1420646 1420701])
            ("register-definition-prefixes" code nil nil [1420759 1420820])
            ("register-definition-prefixes" code nil nil [1420878 1420933])
            ("register-definition-prefixes" code nil nil [1420991 1421045])
            ("register-definition-prefixes" code nil nil [1421098 1421170])
            ("register-definition-prefixes" code nil nil [1421225 1421276])
            ("register-definition-prefixes" code nil nil [1421321 1421371])
            ("register-definition-prefixes" code nil nil [1421417 1421468])
            ("put" code nil nil [1421521 1421575])
            ("wallpaper-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1421576 1422052])
            ("register-definition-prefixes" code nil nil [1422053 1422111])
            ("warning-prefix-function" variable nil nil [1422168 1422565])
            ("warning-series" variable nil nil [1422566 1423004])
            ("warning-fill-prefix" variable nil nil [1423005 1423114])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1423115 1423354])
            ("display-warning" function (:prototype-flag t) nil [1423355 1424837])
            ("lwarn" function (:prototype-flag t) nil [1424838 1425686])
            ("warn" function (:prototype-flag t) nil [1425687 1425966])
            ("register-definition-prefixes" code nil nil [1425967 1426021])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426065 1426444])
            ("register-definition-prefixes" code nil nil [1426445 1426497])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1426546 1426813])
            ("register-definition-prefixes" code nil nil [1426814 1426868])
            ("put" code nil nil [1426927 1426975])
            ("put" code nil nil [1426977 1427026])
            ("which-function-mode" variable nil nil [1427027 1427340])
            ("custom-autoload" code nil nil [1427341 1427396])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1427397 1428258])
            ("register-definition-prefixes" code nil nil [1428259 1428318])
            ("push" code nil nil [1428366 1428430])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1428431 1429285])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1429286 1430238])
            ("global-whitespace-mode" variable nil nil [1430239 1430564])
            ("custom-autoload" code nil nil [1430565 1430623])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1430624 1431425])
            ("global-whitespace-newline-mode" variable nil nil [1431426 1431783])
            ("custom-autoload" code nil nil [1431784 1431850])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1431851 1432878])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1432879 1435690])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1435691 1438638])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1438639 1440774])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1440775 1442387])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1442388 1442576])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1442577 1443992])
            ("register-definition-prefixes" code nil nil [1443993 1444053])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1444101 1444189])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1444190 1444283])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1444284 1444412])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1444413 1445054])
            ("register-definition-prefixes" code nil nil [1445055 1445111])
            ("widgetp" function (:prototype-flag t) nil [1445157 1445242])
            ("widget-prompt-value" function (:prototype-flag t) nil [1445243 1445452])
            ("widget-create" function (:prototype-flag t) nil [1445453 1445590])
            ("widget-delete" function (:prototype-flag t) nil [1445591 1445659])
            ("widget-convert" function (:prototype-flag t) nil [1445660 1445836])
            ("widget-insert" function (:prototype-flag t) nil [1445837 1445957])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" 'widget-forward) (define-key map "	" 'widget-backward) (define-key map [(shift tab)] 'widget-backward) (put 'widget-backward :advertised-binding [(shift tab)]) (define-key map [backtab] 'widget-backward) (define-key map [down-mouse-2] 'widget-button-click) (define-key map [down-mouse-1] 'widget-button-click) (define-key map [(control 109)] 'widget-button-press) map)) nil [1445958 1446587])
            ("widget-setup" function (:prototype-flag t) nil [1446588 1446681])
            ("register-definition-prefixes" code nil nil [1446682 1446736])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1446782 1447274])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1447275 1447754])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1447755 1448250])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1448251 1448734])
            ("windmove-mode" variable (:default-value t) nil [1448735 1448870])
            ("custom-autoload" code nil nil [1448871 1448918])
            ("windmove-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1448919 1449587])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1449588 1449955])
            ("windmove-display-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1449956 1450193])
            ("windmove-display-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1450194 1450420])
            ("windmove-display-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1450421 1450660])
            ("windmove-display-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1450661 1450889])
            ("windmove-display-same-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1450890 1451011])
            ("windmove-display-new-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1451012 1451127])
            ("windmove-display-new-tab" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1451128 1451239])
            ("windmove-display-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1451240 1451721])
            ("windmove-delete-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1451722 1451972])
            ("windmove-delete-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1451973 1452203])
            ("windmove-delete-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1452204 1452457])
            ("windmove-delete-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1452458 1452690])
            ("windmove-delete-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1452691 1453258])
            ("windmove-swap-states-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1453259 1453379])
            ("windmove-swap-states-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1453380 1453492])
            ("windmove-swap-states-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1453493 1453607])
            ("windmove-swap-states-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1453608 1453730])
            ("windmove-swap-states-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1453731 1454252])
            ("register-definition-prefixes" code nil nil [1454253 1454309])
            ("winner-mode" variable nil nil [1454353 1454634])
            ("custom-autoload" code nil nil [1454635 1454678])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1454679 1455694])
            ("register-definition-prefixes" code nil nil [1455695 1455747])
            ("register-definition-prefixes" code nil nil [1455813 1455910])
            ("register-definition-prefixes" code nil nil [1455969 1456052])
            ("woman-locale" variable nil nil [1456095 1456369])
            ("custom-autoload" code nil nil [1456370 1456411])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1456412 1457056])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1457057 1457159])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1457160 1457669])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1457670 1457772])
            ("register-definition-prefixes" code nil nil [1457773 1457831])
            ("word-wrap-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1457893 1458670])
            ("put" code nil nil [1458671 1458735])
            ("global-word-wrap-whitespace-mode" variable nil nil [1458736 1459101])
            ("custom-autoload" code nil nil [1459102 1459174])
            ("global-word-wrap-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1459175 1459764])
            ("register-definition-prefixes" code nil nil [1459765 1459849])
            ("register-definition-prefixes" code nil nil [1459892 1459942])
            ("register-definition-prefixes" code nil nil [1459983 1460029])
            ("xml-parse-file" function (:prototype-flag t) nil [1460070 1460797])
            ("xml-parse-region" function (:prototype-flag t) nil [1460798 1461756])
            ("xml-remove-comments" function (:prototype-flag t) nil [1461757 1461931])
            ("register-definition-prefixes" code nil nil [1461932 1461978])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1462027 1462675])
            ("register-definition-prefixes" code nil nil [1462676 1462728])
            ("push" code nil nil [1462780 1462837])
            ("xref-find-backend" function (:prototype-flag t) nil [1462838 1462874])
            ("define-obsolete-function-alias" code nil nil [1462875 1462952])
            ("xref-go-back" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1462953 1463074])
            ("xref-go-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1463075 1463178])
            ("xref-marker-stack-empty-p" function (:prototype-flag t) nil [1463179 1463267])
            ("xref-forward-history-empty-p" function (:prototype-flag t) nil [1463268 1463362])
            ("xref-show-xrefs" function (:prototype-flag t) nil [1463363 1463586])
            ("xref-find-definitions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1463587 1464079])
            ("xref-find-definitions-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1464080 1464217])
            ("xref-find-definitions-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1464218 1464353])
            ("xref-find-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1464354 1464757])
            ("xref-find-definitions-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1464758 1464940])
            ("xref-find-references-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1464941 1465122])
            ("xref-find-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1465123 1465389])
            ("define-key" code nil nil [1465391 1465439])
            ("define-key" code nil nil [1465441 1465480])
            ("define-key" code nil nil [1465482 1465528])
            ("define-key" code nil nil [1465530 1465577])
            ("define-key" code nil nil [1465579 1465627])
            ("define-key" code nil nil [1465629 1465694])
            ("define-key" code nil nil [1465696 1465760])
            ("xref-references-in-directory" function (:prototype-flag t) nil [1465761 1466042])
            ("xref-matches-in-directory" function (:prototype-flag t) nil [1466043 1466380])
            ("xref-matches-in-files" function (:prototype-flag t) nil [1466381 1466682])
            ("register-definition-prefixes" code nil nil [1466683 1466731])
            ("register-definition-prefixes" code nil nil [1466786 1466972])
            ("register-definition-prefixes" code nil nil [1467025 1467080])
            ("xterm-mouse-mode" variable nil nil [1467126 1467427])
            ("custom-autoload" code nil nil [1467428 1467478])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1467479 1468522])
            ("register-definition-prefixes" code nil nil [1468523 1468608])
            ("xwidget-webkit-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1468653 1468917])
            ("xwidget-webkit-bookmark-jump-handler" function (:prototype-flag t) nil [1468918 1469190])
            ("register-definition-prefixes" code nil nil [1469191 1469245])
            ("yaml-ts-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1469305 1469409])
            ("register-definition-prefixes" code nil nil [1469410 1469475])
            ("yank-media" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1469523 1469890])
            ("yank-media-handler" function (:prototype-flag t) nil [1469891 1470276])
            ("register-definition-prefixes" code nil nil [1470277 1470337])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1470384 1470511])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1470512 1470595])
            ("register-definition-prefixes" code nil nil [1470596 1470644])
            ("register-definition-prefixes" code nil nil [1470694 1470750])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1470797 1471071])
            ("register-definition-prefixes" code nil nil [1471072 1471120])
            ("loaddefs" package nil nil [1471148 1471167]))          
      :file "loaddefs.el.gz"
      :pointmax 1471328
      :fsize 375281
      :lastmodtime '(25788 57233 0 0)
      :unmatched-syntax '((close-paren 1089514 . 1089515) (symbol 1088690 . 1088706) (open-paren 1088689 . 1088690)))
    (semanticdb-table "semanticdb-table-4b464588"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("x-pointer-hand2" variable nil nil [4743 4767])
            ("x-pointer-top-left-arrow" variable nil nil [4768 4801])
            ("define-obsolete-function-alias" code nil nil [4816 4898])
            ("dframe" customgroup (:user-visible-flag t) nil [4919 5003])
            ("dframe-have-timer-flag" variable (:default-value (display-graphic-p)) nil [5005 5207])
            ("dframe-update-speed" variable (:default-value 1) nil [5209 5455])
            ("dframe-activity-change-focus-flag" variable nil nil [5457 5732])
            ("dframe-after-select-attached-frame-hook" variable nil nil [5734 5879])
            ("defvar-local" code nil nil [5881 6057])
            ("defvar-local" code nil nil [6059 6240])
            ("defvar-local" code nil nil [6242 6384])
            ("defvar-local" code nil nil [6386 6500])
            ("dframe-power-click" variable nil nil [6502 6603])
            ("defvar-local" code nil nil [6605 6687])
            ("defvar-local" code nil nil [6689 6862])
            ("defvar-local" code nil nil [6864 7014])
            ("dframe-update-keymap" function (:arguments ("map")) nil [7016 8375])
            ("dframe-live-p" function (:arguments ("frame")) nil [8377 8517])
            ("x-sensitive-text-pointer-shape" variable nil nil [8519 8558])
            ("x-pointer-shape" variable nil nil [8559 8583])
            ("dframe-frame-mode" function (:arguments ("arg" "frame-var" "cache-var" "buffer-var" "frame-name" "local-mode-fn" "parameters" "delete-hook" "popup-hook" "create-hook")) nil [8585 14519])
            ("declare-function" code nil nil [14588 14658])
            ("declare-function" code nil nil [14659 14730])
            ("dframe-reposition-frame" function (:arguments ("new-frame" "parent-frame" "location")) nil [14732 17893])
            ("dframe-detach" function (:arguments ("frame-var" "cache-var" "buffer-var")) nil [17895 18417])
            ("dframe-setup-hook" variable nil nil [18451 18532])
            ("dframe-set-special-events" function nil nil [18534 18915])
            ("when" code nil nil [18917 19011])
            ("dframe-make-frame-visible-function" variable nil nil [19013 19159])
            ("dframe-iconify-frame-function" variable nil nil [19160 19298])
            ("dframe-delete-frame-function" variable nil nil [19299 19443])
            ("dframe-handle-make-frame-visible" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [19445 19832])
            ("dframe-handle-iconify-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [19834 20198])
            ("dframe-handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [20200 20704])
            ("dframe-get-focus" function
               (:user-visible-flag t
                :arguments ("frame-var" "activator"))
                nil [20724 21375])
            ("dframe-close-frame" function (:user-visible-flag t) nil [21378 21580])
            ("dframe-current-frame" function (:arguments ("frame-var" "desired-major-mode")) nil [21582 22164])
            ("dframe-attached-frame" function (:arguments ("frame")) nil [22166 22438])
            ("dframe-select-attached-frame" function (:arguments ("frame")) nil [22440 22900])
            ("dframe-with-attached-buffer" function (:arguments ("forms")) nil [22902 23224])
            ("dframe-maybee-jump-to-attached-frame" function nil nil [23226 23551])
            ("dframe-suppress-message-flag" variable nil nil [23554 23664])
            ("dframe-message" function (:arguments ("fmt" "args")) nil [23666 24114])
            ("dframe-y-or-n-p" function (:arguments ("prompt")) nil [24116 24543])
            ("dframe-client-functions" variable nil nil [24973 25062])
            ("dframe-set-timer" function (:arguments ("timeout" "fn" "_null-on-error")) nil [25064 26070])
            ("dframe-set-timer-internal" function (:arguments ("timeout" "_null-on-error")) nil [26072 26377])
            ("dframe-timer-fn" function nil nil [26379 26656])
            ("dframe-popup-kludge" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [26658 26986])
            ("dframe-mouse-event-p" function (:arguments ("event")) nil [27036 27258])
            ("dframe-track-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [27260 27564])
            ("dframe-help-echo" function (:arguments ("_window" "buffer" "position")) nil [27566 27992])
            ("dframe-mouse-set-point" function (:arguments ("e")) nil [27994 28082])
            ("dframe-quick-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [28084 28367])
            ("dframe-power-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [28369 28705])
            ("dframe-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [28707 29035])
            ("dframe-double-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [29037 29444])
            ("dframe-temp-buffer-show-function" function (:arguments ("buffer")) nil [29622 30018])
            ("dframe-hack-buffer-menu" function
               (:user-visible-flag t
                :arguments ("_e"))
                nil [30020 30697])
            ("dframe-switch-buffer-attached-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [30699 31131])
            ("dframe-mouse-hscroll" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [31133 31714])
            ("dframe-version" variable (:default-value "1.3") nil [31732 31817])
            ("make-obsolete-variable" code nil nil [31818 31880])
            ("dframe" package nil nil [31882 31899]))          
      :file "dframe.el.gz"
      :pointmax 31925
      :fsize 9670
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4b465926"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("delete-selection-save-to-register" variable nil nil [2502 2653])
            ("delete-selection-temporary-region" variable nil nil [2655 3342])
            ("defalias" code nil nil [3359 3413])
            ("define-minor-mode" code nil nil [3430 4018])
            ("delsel--replace-text-or-position" variable nil nil [4020 4065])
            ("delete-active-region" function
               (:user-visible-flag t
                :arguments ("killp"))
                nil [4082 4804])
            ("delete-selection-repeat-replace-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4806 7583])
            ("delete-selection-helper" function (:arguments ("type")) nil [7585 11584])
            ("delete-selection-pre-hook" function nil nil [11586 12470])
            ("delete-selection-uses-region-p" function nil nil [12472 13202])
            ("put" code nil nil [13204 13280])
            ("put" code nil nil [13282 13320])
            ("put" code nil nil [13321 13361])
            ("put" code nil nil [13363 13398])
            ("put" code nil nil [13399 13438])
            ("put" code nil nil [13439 13489])
            ("put" code nil nil [13490 13535])
            ("put" code nil nil [13536 13578])
            ("put" code nil nil [13692 13739])
            ("put" code nil nil [13741 13800])
            ("put" code nil nil [13801 13846])
            ("put" code nil nil [13847 13881])
            ("put" code nil nil [13882 13942])
            ("put" code nil nil [13943 13979])
            ("minibuffer-keyboard-quit" function (:user-visible-flag t) nil [14084 14404])
            ("define-key" code nil nil [14406 14472])
            ("delsel-unload-function" function nil nil [14474 14894])
            ("delsel" package nil nil [14896 14913]))          
      :file "delsel.el.gz"
      :pointmax 14939
      :fsize 4690
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4696e41a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1005 1070])
            ("standard-indent" variable (:default-value 4) nil [1072 1206])
            ("indent-line-function" variable (:default-value 'indent-relative) nil [1208 1578])
            ("tab-always-indent" variable (:default-value t) nil [1580 2369])
            ("tab-first-completion" variable nil nil [2371 3394])
            ("indent-line-ignored-functions" variable (:default-value '(indent-relative indent-relative-maybe indent-relative-first-indent-point)) nil [3396 3649])
            ("indent-according-to-mode" function
               (:user-visible-flag t
                :arguments ("inhibit-widen"))
                nil [3651 4893])
            ("indent--default-inside-comment" function nil nil [4895 5454])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5456 8875])
            ("indent--funcall-widened" function (:arguments ("func")) nil [8877 8967])
            ("insert-tab" function (:arguments ("arg")) nil [8969 9261])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [9263 9748])
            ("defvar-keymap" code nil nil [9750 10119])
            ("put" code nil nil [10120 10183])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [10185 12053])
            ("indent-rigidly--pop-undo" function nil nil [12055 12342])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [12344 12592])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [12594 12844])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [12846 13244])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [13246 13642])
            ("indent-line-to" function (:arguments ("column")) nil [13644 14601])
            ("current-left-margin" function nil nil [14603 15007])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [15009 15924])
            ("indent-to-left-margin" function nil nil [16024 16335])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [16337 16901])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [16903 17778])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [17780 18339])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [18341 19009])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [19011 19847])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [19849 20330])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [20332 20985])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [20987 21518])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [21520 22542])
            ("indent-region-function" variable (:default-value nil) nil [22544 22744])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [22746 24852])
            ("indent-region-line-by-line" function (:arguments ("start" "end")) nil [24854 25344])
            ("define-obsolete-function-alias" code nil nil [25346 25446])
            ("indent-relative-first-indent-point" function (:user-visible-flag t) nil [25448 25745])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("first-only" "unindented-ok"))
                nil [25747 27371])
            ("tab-stop-list" variable nil nil [27373 27931])
            ("defvar-keymap" code nil nil [27933 28093])
            ("edit-tab-stops-buffer" variable nil nil [28095 28244])
            ("edit-tab-stops" function (:user-visible-flag t) nil [28246 29383])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [29385 29785])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [29787 30786])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [30788 31028])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [31030 31526])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [31528 32388])
            ("define-key" code nil nil [32390 32442])
            ("define-key" code nil nil [32443 32486])
            ("define-key" code nil nil [32487 32530])
            ("define-key" code nil nil [32531 32572]))          
      :file "indent.el.gz"
      :pointmax 32598
      :fsize 8968
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4a84fd86"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1219 1236])
            ("dnd" customgroup (:user-visible-flag t) nil [1239 1317])
            ("dnd-protocol-alist" variable (:default-value `((,(purecopy "^file:///") . dnd-open-local-file) (,(purecopy "^file://") . dnd-open-file) (,(purecopy "^file:") . dnd-open-local-file) (,(purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://") . dnd-open-file))) nil [1334 2433])
            ("dnd-open-remote-file-function" variable (:default-value (if (eq system-type 'windows-nt) #'dnd-open-local-file #'dnd-open-remote-url)) nil [2436 3120])
            ("dnd-open-file-other-window" variable nil nil [3123 3289])
            ("dnd-scroll-margin" variable nil nil [3291 3737])
            ("dnd-indicate-insertion-point" variable nil nil [3739 4091])
            ("dnd-direct-save-remote-files" variable (:default-value 'x) nil [4093 4609])
            ("dnd-handle-movement" function (:arguments ("posn")) nil [4625 6048])
            ("dnd-handle-one-url" function (:arguments ("window" "action" "url")) nil [6050 7007])
            ("dnd-get-local-file-uri" function (:arguments ("uri")) nil [7010 7853])
            ("dnd--unescape-uri" function (:arguments ("uri")) nil [7855 8134])
            ("dnd-get-local-file-name" function (:arguments ("uri" "must-exist")) nil [8197 9004])
            ("dnd-open-local-file" function (:arguments ("uri" "_action")) nil [9006 9830])
            ("dnd-open-remote-url" function (:arguments ("uri" "_action")) nil [9832 10315])
            ("dnd-open-file" function (:arguments ("uri" "action")) nil [10318 10994])
            ("dnd-insert-text" function (:arguments ("window" "action" "text")) nil [10997 11400])
            ("dnd-last-dragged-remote-file" variable nil nil [11605 12036])
            ("dnd-remove-last-dragged-remote-file" function nil nil [12038 12593])
            ("declare-function" code nil nil [12595 12635])
            ("dnd-begin-text-drag" function (:arguments ("text" "frame" "action" "allow-same-frame")) nil [12637 15131])
            ("dnd-begin-file-drag" function (:arguments ("file" "frame" "action" "allow-same-frame")) nil [15133 19484])
            ("dnd-begin-drag-files" function (:arguments ("files" "frame" "action" "allow-same-frame")) nil [19486 22796])
            ("declare-function" code nil nil [22798 22848])
            ("dnd-direct-save" function (:arguments ("file" "name" "frame" "allow-same-frame")) nil [22850 23701])
            ("dnd" package nil nil [23703 23717]))          
      :file "dnd.el.gz"
      :pointmax 23740
      :fsize 6928
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 1236 . 1237) (symbol 1199 . 1216) (open-paren 1198 . 1199)))
    (semanticdb-table "semanticdb-table-4b9ef89e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [891 1343])
            ("term-file-aliases" variable (:default-value '(("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200") ("alacritty" . "xterm") ("foot" . "xterm") ("contour" . "xterm"))) nil [1345 2001])
            ("declare-function" code nil nil [2003 2067])
            ("declare-function" code nil nil [2068 2140])
            ("help-xref-stack-item" variable nil nil [2142 2171])
            ("face-name-history" variable nil nil [2173 2354])
            ("font-selection" customgroup (:user-visible-flag t) nil [2525 2607])
            ("face-font-selection-order" variable (:default-value '(:width :height :weight :slant)) nil [2610 3400])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar 'purecopy arg)) '(("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed")))) nil [3574 5575])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar 'purecopy arg)) (if (featurep 'w32) '(("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")) '(("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))))) nil [5621 6693])
            ("make-obsolete-variable" code nil nil [6867 6982])
            ("frame-face-alist" function (:arguments ("frame")) nil [6984 7529])
            ("face-list" function nil nil [7531 7802])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7804 8505])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [8507 8769])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [8771 10022])
            ("facep" function (:arguments ("face")) nil [10202 10351])
            ("check-face" function (:arguments ("face")) nil [10354 10508])
            ("face-id" function (:arguments ("face" "_frame")) nil [10689 11031])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [11033 11446])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [11449 12690])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [12693 13037])
            ("face-list-p" function (:arguments ("face-or-list")) nil [13040 13469])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) '((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:extend (".attributeExtend" . "Face.AttributeExtend")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit"))))) nil [13667 15619])
            ("declare-function" code nil nil [15622 15717])
            ("declare-function" code nil nil [15719 15833])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [15835 16544])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [16547 16910])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [16913 17509])
            ("face-name" function (:arguments ("face")) nil [17693 17785])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [17788 18254])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [18256 20173])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [20175 20763])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [20766 21026])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [21028 22291])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [22293 23556])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [23558 24578])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [24581 25034])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [25037 25471])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [25474 25993])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [25996 26500])
            ("face-extend-p" function (:arguments ("face" "frame" "inherit")) nil [26502 26915])
            ("face-documentation" function (:arguments ("face")) nil [27090 27512])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [27515 27703])
            ("define-obsolete-function-alias" code nil nil [27706 27783])
            ("define-obsolete-function-alias" code nil nil [27784 27869])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [28050 37118])
            ("make-face-bold" function (:arguments ("face" "frame" "_noerror")) nil [37120 37585])
            ("make-face-unbold" function (:arguments ("face" "frame" "_noerror")) nil [37588 38002])
            ("make-face-italic" function (:arguments ("face" "frame" "_noerror")) nil [38005 38476])
            ("make-face-unitalic" function (:arguments ("face" "frame" "_noerror")) nil [38479 38898])
            ("make-face-bold-italic" function (:arguments ("face" "frame" "_noerror")) nil [38901 39412])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [39415 40178])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [40384 40853])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [40856 41325])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [41328 41933])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [41936 42705])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [42708 43281])
            ("define-obsolete-function-alias" code nil nil [43283 43404])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [43406 43822])
            ("define-obsolete-function-alias" code nil nil [43824 43895])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [43898 44334])
            ("define-obsolete-function-alias" code nil nil [44336 44411])
            ("set-face-extend" function
               (:user-visible-flag t
                :arguments ("face" "extend-p" "frame"))
                nil [44413 44897])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [44900 45700])
            ("crm-separator" variable nil nil [45886 45908])
            ("read-face-name-sample-text" variable
               (:constant-flag t
                :default-value "SAMPLE")
                nil [45924 46038])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [46040 49731])
            ("x-bitmap-file-path" variable nil nil [49790 49817])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [49819 52593])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value '((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:extend . "extend") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance")))
                nil [52596 53391])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [53394 53541])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [53544 54404])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [54407 55024])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [55185 57934])
            ("declare-function" code nil nil [57936 57982])
            ("declare-function" code nil nil [57983 58074])
            ("read-face-font" function (:arguments ("face" "frame")) nil [58076 58448])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [58451 58879])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [58881 59826])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [59828 60617])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [60788 60951])
            ("help-xref-stack" variable nil nil [61080 61104])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [61105 64140])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [64418 65008])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [65011 66818])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [66821 68316])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply 'append (mapcar (lambda (x) (list (car x) 'unspecified)) face-attribute-name-alist)))
                nil [68496 68655])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [68657 69758])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [69760 71863])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [71865 74465])
            ("face-spec-set-2" function (:arguments ("face" "frame" "face-attrs")) nil [74467 74921])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [74923 75997])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [75999 76194])
            ("face-default-spec" function (:arguments ("face")) nil [76196 76384])
            ("face-user-default-spec" function (:arguments ("face")) nil [76386 76669])
            ("defined-colors" function (:arguments ("frame")) nil [76927 77355])
            ("defalias" code nil nil [77356 77400])
            ("defined-colors-with-face-attributes" function (:arguments ("frame" "foreground")) nil [77402 78146])
            ("readable-foreground-color" function (:arguments ("color")) nil [78148 78641])
            ("color-luminance-dark-limit" variable
               (:constant-flag t
                :default-value 0.325)
                nil [78643 78903])
            ("color-dark-p" function (:arguments ("rgb")) nil [78905 79959])
            ("declare-function" code nil nil [79961 80031])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [80033 80668])
            ("defalias" code nil nil [80669 80715])
            ("declare-function" code nil nil [80717 80784])
            ("color-values" function (:arguments ("color" "frame")) nil [80786 81633])
            ("defalias" code nil nil [81635 81675])
            ("declare-function" code nil nil [81677 81744])
            ("display-color-p" function (:arguments ("display")) nil [81746 82129])
            ("defalias" code nil nil [82130 82176])
            ("declare-function" code nil nil [82178 82248])
            ("display-grayscale-p" function (:arguments ("display")) nil [82250 82608])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg" "foreground"))
                nil [82610 85653])
            ("face-at-point" function (:arguments ("text" "multiple")) nil [85655 86961])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [86963 88496])
            ("foreground-color-at-point" function nil nil [88498 88821])
            ("background-color-at-point" function nil nil [88823 89146])
            ("declare-function" code nil nil [89317 89362])
            ("declare-function" code nil nil [89363 89456])
            ("declare-function" code nil nil [89457 89551])
            ("declare-function" code nil nil [89552 89606])
            ("x-display-name" variable nil nil [89607 89630])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [89632 90527])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [90530 91536])
            ("declare-function" code nil nil [91538 91588])
            ("declare-function" code nil nil [91589 91655])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [91657 94387])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [94389 95788])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [95790 96466])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [96469 97228])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [97230 97797])
            ("tty-setup-hook" variable nil nil [97799 98031])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [98033 99953])
            ("tty-set-up-initial-frame-faces" function nil nil [100059 100216])
            ("basic-faces" customgroup (:user-visible-flag t) nil [100387 100462])
            ("default" variable
               (:default-value '((t nil))
                :type "face")
                nil [100464 100596])
            ("bold" variable
               (:default-value '((t :weight bold))
                :type "face")
                nil [100598 100677])
            ("italic" variable
               (:default-value '((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic))
                :type "face")
                nil [100679 101044])
            ("bold-italic" variable
               (:default-value '((t :weight bold :slant italic))
                :type "face")
                nil [101046 101153])
            ("underline" variable
               (:default-value '((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t))
                :type "face")
                nil [101155 101345])
            ("fixed-pitch" variable
               (:default-value '((t :family "Monospace"))
                :type "face")
                nil [101347 101451])
            ("fixed-pitch-serif" variable
               (:default-value '((t :family "Monospace Serif"))
                :type "face")
                nil [101453 101581])
            ("variable-pitch" variable
               (:default-value '((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif"))
                :type "face")
                nil [101583 102063])
            ("variable-pitch-text" variable
               (:default-value '((t :inherit variable-pitch :height 1.1))
                :type "face")
                nil [102065 102310])
            ("shadow" variable
               (:default-value '((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow"))
                :type "face")
                nil [102312 102750])
            ("link" variable
               (:default-value '((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline))
                :type "face")
                nil [102752 103219])
            ("link-visited" variable
               (:default-value '((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet"))
                :type "face")
                nil [103221 103471])
            ("highlight" variable
               (:default-value '((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [103473 104015])
            ("region" variable
               (:default-value '((((class color) (min-colors 88) (background dark)) :background "blue3" :extend t) (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2" :extend t) (((class color) (min-colors 16) (background dark)) :background "blue3" :extend t) (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2" :extend t) (((class color) (min-colors 8)) :background "blue" :foreground "white" :extend t) (((type tty) (class mono)) :inverse-video t) (t :background "gray" :extend t))
                :type "face")
                nil [104017 104686])
            ("secondary-selection" variable
               (:default-value '((((class color) (min-colors 88) (background light)) :background "yellow1" :extend t) (((class color) (min-colors 88) (background dark)) :background "SkyBlue4" :extend t) (((class color) (min-colors 16) (background light)) :background "yellow" :extend t) (((class color) (min-colors 16) (background dark)) :background "SkyBlue4" :extend t) (((class color) (min-colors 8)) :background "cyan" :foreground "black" :extend t) (t :inverse-video t))
                :type "face")
                nil [104688 105286])
            ("trailing-whitespace" variable
               (:default-value '((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t))
                :type "face")
                nil [105288 105565])
            ("line-number" variable
               (:default-value '((t :inherit (shadow default)))
                :type "face")
                nil [105567 105978])
            ("line-number-current-line" variable
               (:default-value '((t :inherit line-number))
                :type "face")
                nil [105980 106529])
            ("line-number-major-tick" variable
               (:default-value '((((class color grayscale) (background light)) :background "grey85" :bold t) (((class color grayscale) (background dark)) :background "grey75" :bold t) (t :inherit line-number))
                :type "face")
                nil [106531 107380])
            ("line-number-minor-tick" variable
               (:default-value '((((class color grayscale) (background light)) :background "grey95" :bold t) (((class color grayscale) (background dark)) :background "grey55" :bold t) (t :inherit line-number))
                :type "face")
                nil [107382 108231])
            ("fill-column-indicator" variable
               (:default-value '((t :inherit shadow :weight normal :slant normal :underline nil :overline nil :strike-through nil :box nil :inverse-video nil :stipple nil))
                :type "face")
                nil [108281 108669])
            ("escape-glyph" variable
               (:default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown"))
                :type "face")
                nil [108671 109101])
            ("homoglyph" variable
               (:default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown"))
                :type "face")
                nil [109103 109311])
            ("nobreak-space" variable
               (:default-value '((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t))
                :type "face")
                nil [109313 109573])
            ("nobreak-hyphen" variable
               (:default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown"))
                :type "face")
                nil [109575 109794])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [109796 109913])
            ("mode-line" variable
               (:default-value '((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [109915 110300])
            ("mode-line-active" variable
               (:default-value '((t :inherit mode-line))
                :type "face")
                nil [110302 110500])
            ("mode-line-inactive" variable
               (:default-value '((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30"))
                :type "face")
                nil [110502 111040])
            ("mode-line-highlight" variable
               (:default-value '((((supports :box t) (class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight))
                :type "face")
                nil [111042 111334])
            ("mode-line-emphasis" variable
               (:default-value '((t (:weight bold)))
                :type "face")
                nil [111336 111579])
            ("mode-line-buffer-id" variable
               (:default-value '((t (:weight bold)))
                :type "face")
                nil [111581 111764])
            ("header-line" variable
               (:default-value '((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t))
                :type "face")
                nil [111766 113102])
            ("header-line-highlight" variable
               (:default-value '((t :inherit mode-line-highlight))
                :type "face")
                nil [113104 113256])
            ("vertical-border" variable
               (:default-value '((((type tty)) :inherit mode-line-inactive))
                :type "face")
                nil [113258 113423])
            ("window-divider" variable
               (:default-value '((t :foreground "gray60"))
                :type "face")
                nil [113425 113893])
            ("window-divider-first-pixel" variable
               (:default-value '((t :foreground "gray80"))
                :type "face")
                nil [113895 114312])
            ("window-divider-last-pixel" variable
               (:default-value '((t :foreground "gray40"))
                :type "face")
                nil [114314 114727])
            ("internal-border" variable
               (:default-value '((t nil))
                :type "face")
                nil [114729 114932])
            ("child-frame-border" variable
               (:default-value '((t nil))
                :type "face")
                nil [114934 115155])
            ("minibuffer-prompt" variable
               (:default-value '((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue"))
                :type "face")
                nil [115157 115652])
            ("setq" code nil nil [115654 115765])
            ("fringe" variable
               (:default-value '((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray"))
                :type "face")
                nil [115767 116079])
            ("scroll-bar" variable
               (:default-value '((t nil))
                :type "face")
                nil [116081 116219])
            ("border" variable
               (:default-value '((t nil))
                :type "face")
                nil [116221 116350])
            ("cursor" variable
               (:default-value '((((background light)) :background "black") (((background dark)) :background "white"))
                :type "face")
                nil [116352 116802])
            ("put" code nil nil [116804 116836])
            ("mouse" variable
               (:default-value '((t nil))
                :type "face")
                nil [116838 116964])
            ("tool-bar" variable
               (:default-value '((default :box (:line-width 1 :style released-button) :foreground "black") (((type haiku)) :foreground "B_MENU_ITEM_TEXT_COLOR" :background "B_MENU_BACKGROUND_COLOR") (((type x w32 ns pgtk) (class color)) :background "grey75") (((type x) (class mono)) :background "grey"))
                :type "face")
                nil [116966 117367])
            ("tab-bar" variable
               (:default-value '((((class color) (min-colors 88)) :inherit variable-pitch :background "grey85" :foreground "black") (((class mono)) :background "grey") (t :inverse-video t))
                :type "face")
                nil [117369 117638])
            ("tab-line" variable
               (:default-value '((((class color) (min-colors 88)) :inherit variable-pitch :height 0.9 :background "grey85" :foreground "black") (((class mono)) :background "grey") (t :inverse-video t))
                :type "face")
                nil [117640 117928])
            ("menu" variable
               (:default-value '((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t))
                :type "face")
                nil [117930 118174])
            ("help-argument-name" variable
               (:default-value '((t :inherit italic))
                :type "face")
                nil [118176 118298])
            ("help-key-binding" variable
               (:default-value '((((class color) (min-colors 88) (background light)) :background "grey96" :foreground "DarkBlue" :box (:line-width (-1 . -1) :color "grey80") :inherit fixed-pitch) (((class color) (min-colors 88) (background dark)) :background "grey19" :foreground "LightBlue" :box (:line-width (-1 . -1) :color "grey35") :inherit fixed-pitch) (((class color grayscale) (background light)) :background "grey90" :inherit fixed-pitch) (((class color grayscale) (background dark)) :background "grey25" :inherit fixed-pitch) (t :background "grey90" :inherit fixed-pitch))
                :type "face")
                nil [118300 119743])
            ("glyphless-char" variable
               (:default-value '((((type tty)) :inherit escape-glyph :underline t) (((type pc)) :inherit escape-glyph) (t :height 0.6))
                :type "face")
                nil [119745 120035])
            ("error" variable
               (:default-value '((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t))
                :type "face")
                nil [120037 120567])
            ("warning" variable
               (:default-value '((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow"))
                :type "face")
                nil [120569 120803])
            ("success" variable
               (:default-value '((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green"))
                :type "face")
                nil [120805 121224])
            ("read-multiple-choice-face" variable
               (:default-value '((t (:inherit (help-key-binding underline) :weight bold)))
                :type "face")
                nil [121226 121434])
            ("tty-menu-enabled-face" variable
               (:default-value '((((class color)) :foreground "yellow" :background "blue" :weight bold) (t :weight bold))
                :type "face")
                nil [121460 121685])
            ("tty-menu-disabled-face" variable
               (:default-value '((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (((class color)) :foreground "white" :background "blue") (t :inherit shadow))
                :type "face")
                nil [121687 121989])
            ("tty-menu-selected-face" variable
               (:default-value '((((class color)) :background "red") (t :inverse-video t))
                :type "face")
                nil [121991 122201])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [122203 122338])
            ("show-paren-match" variable
               (:default-value '((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline))
                :type "face")
                nil [122340 122806])
            ("show-paren-match-expression" variable
               (:default-value '((t :inherit show-paren-match))
                :type "face")
                nil [122808 123043])
            ("show-paren-mismatch" variable
               (:default-value '((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t)))
                :type "face")
                nil [123045 123236])
            ("x-font-regexp" variable nil nil [123612 123638])
            ("x-font-regexp-head" variable nil nil [123639 123670])
            ("x-font-regexp-weight" variable nil nil [123671 123704])
            ("x-font-regexp-slant" variable nil nil [123705 123737])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [123739 123779])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [123780 123819])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [123820 123860])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [123861 123902])
            ("let" code nil nil [123985 125203])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [125206 126290])
            ("define-obsolete-function-alias" code nil nil [126292 126370])
            ("define-obsolete-function-alias" code nil nil [126371 126457])
            ("faces" package nil nil [126459 126475]))          
      :file "faces.el.gz"
      :pointmax 126500
      :fsize 31881
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4f835a34"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1177 1198])
            ("add-hook" code nil nil [1269 1320])
            ("add-hook" code nil nil [1321 1372])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1793 1903])
            ("help-window-old-frame" variable nil nil [1905 2001])
            ("help-buffer-under-preparation" variable nil nil [2003 2163])
            ("help-key" function nil nil [2165 2310])
            ("defvar-keymap" code nil nil [2312 3945])
            ("define-key" code nil nil [3947 4011])
            ("define-key" code nil nil [4012 4056])
            ("define-key" code nil nil [4057 4099])
            ("fset" code nil nil [4100 4129])
            ("help-button-cache" variable nil nil [4198 4228])
            ("help-quick-sections" variable (:default-value '(("File" (save-buffers-kill-terminal . "exit") (find-file . "find") (write-file . "write") (save-buffer . "save") (save-some-buffers . "all")) ("Buffer" (kill-buffer . "kill") (list-buffers . "list") (switch-to-buffer . "switch") (goto-line . "goto line") (read-only-mode . "read only")) ("Window" (delete-window . "only other") (delete-other-windows . "only this") (split-window-below . "split vert.") (split-window-right . "split horiz.") (other-window . "other window")) ("Mark & Kill" (set-mark-command . "mark") (kill-line . "kill line") (kill-ring-save . "kill region") (yank . "yank") (exchange-point-and-mark . "swap")) ("Projects" (project-switch-project . "switch") (project-find-file . "find file") (project-find-regexp . "search") (project-query-replace-regexp . "search & replace") (project-compile . "compile")) ("Misc." (undo . "undo") (isearch-forward . "search") (isearch-backward . "reverse search") (query-replace . "search & replace") (fill-paragraph . "reformat")))) nil [4233 5421])
            ("declare-function" code nil nil [5423 5489])
            ("help-quick" function (:user-visible-flag t) nil [5550 8817])
            ("help-quick-toggle" function (:user-visible-flag t) nil [8819 9131])
            ("defalias" code nil nil [9133 9169])
            ("help-quit" function (:user-visible-flag t) nil [9171 9265])
            ("help-return-method" variable nil nil [9267 9636])
            ("help-print-return-message" function (:arguments ("function")) nil [9638 11962])
            ("fset" code nil nil [12022 12083])
            ("help-for-help-buffer-name" variable (:default-value " *Metahelp*") nil [12127 12215])
            ("help-for-help-header" variable
               (:default-value '((t :height 1.26))
                :type "face")
                nil [12217 12339])
            ("help--for-help-make-commands" function (:arguments ("commands")) nil [12341 13068])
            ("help--for-help-make-sections" function (:arguments ("sections")) nil [13070 13439])
            ("defalias" code nil nil [13441 13472])
            ("make-help-screen" code nil nil [13473 16830])
            ("function-called-at-point" function nil nil [16835 18701])
            ("view-help-file" function (:arguments ("file" "dir")) nil [18732 18887])
            ("describe-distribution" function (:user-visible-flag t) nil [18889 19033])
            ("describe-copying" function (:user-visible-flag t) nil [19035 19173])
            ("describe-gnu-project" function (:user-visible-flag t) nil [19221 19378])
            ("describe-no-warranty" function (:user-visible-flag t) nil [19380 19626])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [19628 20456])
            ("setq" code nil nil [20548 20600])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [20602 23023])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [23025 23144])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [23146 23663])
            ("view-order-manuals" function (:user-visible-flag t) nil [23665 23813])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [23815 23935])
            ("view-emacs-problems" function (:user-visible-flag t) nil [23937 24085])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [24087 24210])
            ("view-external-packages" function (:user-visible-flag t) nil [24314 24471])
            ("view-lossage" function (:user-visible-flag t) nil [24473 25829])
            ("help--key-description-fontified" function (:arguments ("keys" "prefix")) nil [25850 26383])
            ("describe-bindings-outline" variable (:default-value t) nil [26385 26548])
            ("describe-bindings-show-prefix-commands" variable nil nil [26550 26731])
            ("declare-function" code nil nil [26733 26782])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [26784 28456])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [28458 31041])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [31043 31435])
            ("help--binding-undefined-p" function (:arguments ("defn")) nil [31437 31536])
            ("help--analyze-key" function (:arguments ("key" "untranslated" "buffer")) nil [31538 34015])
            ("help--filter-info-list" function (:arguments ("info-list" "i")) nil [34017 34344])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key-list" "insert" "buffer"))
                nil [34346 35610])
            ("help--key-binding-keymap" function (:arguments ("key" "accept-default" "no-remap" "position")) nil [35612 36674])
            ("help--binding-locus" function (:arguments ("key" "position")) nil [36676 38361])
            ("help--read-key-sequence" function (:arguments ("no-mouse-movement")) nil [38363 41285])
            ("describe-function-orig-buffer" variable nil nil [41314 41352])
            ("describe-key--helper" function (:arguments ("key-list" "buf")) nil [41517 41631])
            ("describe-function--helper" function (:arguments ("func" "buf")) nil [41633 41786])
            ("describe-key" function (:arguments ("key-list" "buffer" "up-event")) nil [41788 45722])
            ("search-forward-help-for-help" function (:user-visible-flag t) nil [45725 46220])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [46222 47109])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [47121 47335])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [47337 47682])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [47697 48014])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [48016 48565])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [48567 49357])
            ("help-link-key-to-documentation" variable (:default-value t) nil [49361 49623])
            ("substitute-command-keys" function (:arguments ("string" "no-face" "include-menus")) nil [49625 58839])
            ("substitute-quotes" function (:arguments ("string")) nil [58841 59336])
            ("help--keymaps-seen" variable nil nil [59338 59369])
            ("describe-map-tree" function (:arguments ("startmap" "partial" "shadow" "prefix" "title" "no-menu" "transl" "always-title" "mention-shadow" "buffer")) nil [59370 63148])
            ("help--shadow-lookup" function (:arguments ("keymap" "key" "accept-default" "remap")) nil [63150 63598])
            ("help--describe-command" function (:arguments ("definition" "translation")) nil [63600 64888])
            ("define-obsolete-function-alias" code nil nil [64890 64984])
            ("help--describe-map-compare" function (:arguments ("a" "b")) nil [64986 65500])
            ("describe-map" function (:arguments ("map" "prefix" "transl" "partial" "shadow" "nomenu" "mention-shadow" "buffer")) nil [65502 73038])
            ("describe-map--align-section" function (:arguments ("columns")) nil [73040 74523])
            ("describe-map--fill-columns" function (:arguments ("columns" "width")) nil [74525 74883])
            ("declare-function" code nil nil [78198 78269])
            ("declare-function" code nil nil [78270 78340])
            ("temp-buffer-max-height" variable (:default-value (lambda (_buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [78387 79157])
            ("temp-buffer-max-width" variable (:default-value (lambda (_buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [79159 79924])
            ("define-minor-mode" code nil nil [79926 80913])
            ("resize-temp-buffer-window-inhibit" variable nil nil [80915 81026])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [81028 83195])
            ("help-window-select" variable nil nil [83215 84222])
            ("help-window-keep-selected" variable nil nil [84224 84593])
            ("define-obsolete-variable-alias" code nil nil [84595 84681])
            ("help-enable-autoload" variable (:default-value t) nil [84683 85069])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [85071 86004])
            ("help-window-setup" function (:arguments ("window" "value")) nil [86006 88969])
            ("with-help-window" function (:arguments ("buffer-or-name" "body")) nil [88971 89362])
            ("help--window-setup" function (:arguments ("buffer" "callback")) nil [89364 90375])
            ("help-form-show" function nil nil [90503 90693])
            ("help--docstring-quote" function (:arguments ("string")) nil [90697 90919])
            ("help-split-fundoc" function (:arguments ("docstring" "def" "section")) nil [91144 92860])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [92862 93712])
            ("declare-function" code nil nil [93714 93765])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [93767 96272])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [96274 97106])
            ("define-obsolete-function-alias" code nil nil [97108 97182])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [97184 97339])
            ("help-uni-confusables" variable
               (:constant-flag t
                :default-value '((8216 . "'") (8217 . "'") (8219 . "'") (8220 . "\"") (8221 . "\"") (8223 . "\"") (12318 . "\"") (65282 . "'") (65287 . "'")))
                nil [97446 98208])
            ("help-uni-confusables-regexp" variable
               (:constant-flag t
                :default-value (concat "[" (mapcar #'car help-uni-confusables) "]"))
                nil [98210 98371])
            ("help-uni-confusable-suggestions" function (:arguments ("string")) nil [98373 99151])
            ("help-command-error-confusable-suggestions" function (:arguments ("data" "context" "signal")) nil [99153 99623])
            ("when" code nil nil [99625 99913])
            ("define-obsolete-function-alias" code nil nil [99915 99994])
            ("help" package nil nil [99998 100013]))          
      :file "help.el.gz"
      :pointmax 100037
      :fsize 27385
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 1198 . 1199) (symbol 1159 . 1176) (open-paren 1158 . 1159)))
    (semanticdb-table "semanticdb-table-4a84fdaa"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1223 1240])
            ("seq" include nil nil [1241 1255])
            ("help-mode" include nil nil [1256 1276])
            ("radix-tree" include nil nil [1277 1298])
            ("subr-x" include nil nil [1318 1335])
            ("help-fns-describe-function-functions" variable nil nil [1355 1864])
            ("help-fns-describe-variable-functions" variable nil nil [1866 2469])
            ("help-fns-describe-face-functions" variable nil nil [2471 2776])
            ("help-fns--activated-functions" variable nil nil [2778 3042])
            ("help-definition-prefixes" variable nil nil [3058 3584])
            ("help-definition-prefixes" function nil nil [3586 4141])
            ("help--loaded-p" function (:arguments ("file")) nil [4143 4686])
            ("help--load-prefixes" function (:arguments ("prefixes")) nil [4688 5139])
            ("define-obsolete-variable-alias" code nil nil [5142 5250])
            ("help-enable-completion-autoload" variable (:default-value t) nil [5252 5626])
            ("help-enable-variable-value-editing" variable nil nil [5628 6037])
            ("help-enable-symbol-autoload" variable nil nil [6039 6196])
            ("help--symbol-class" function (:arguments ("s")) nil [6198 6998])
            ("help--symbol-completion-table-affixation" function (:arguments ("completions")) nil [7000 7610])
            ("help--symbol-completion-table" function (:arguments ("string" "pred" "action")) nil [7612 8432])
            ("describe-function-orig-buffer" variable nil nil [8434 8635])
            ("help-fns--describe-function-or-command-prompt" function (:arguments ("want-command")) nil [8637 10241])
            ("describe-function" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [10258 11662])
            ("describe-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [11679 11939])
            ("help-C-file-name" function (:arguments ("subr-or-var" "kind")) nil [12331 13777])
            ("help-downcase-arguments" variable nil nil [13779 13932])
            ("help-highlight-arg" function (:arguments ("arg")) nil [13934 14238])
            ("help-do-arg-highlight" function (:arguments ("doc" "args")) nil [14240 15161])
            ("help-highlight-arguments" function (:arguments ("usage" "doc" "args")) nil [15163 16342])
            ("find-lisp-object-file-name" function (:arguments ("object" "type" "also-c-source")) nil [16982 21609])
            ("help-fns--key-bindings" function (:arguments ("function")) nil [21611 24511])
            ("help-fns--insert-bindings" function (:arguments ("keys")) nil [24513 24849])
            ("help-fns--insert-menu-bindings" function (:arguments ("menus" "heading")) nil [24851 26196])
            ("help-fns--compiler-macro" function (:arguments ("function")) nil [26198 27878])
            ("help-fns--signature" function (:arguments ("function" "doc" "real-def" "real-function" "buffer")) nil [27880 30401])
            ("help-fns--parent-mode" function (:arguments ("function")) nil [30403 30969])
            ("help-fns--obsolete" function (:arguments ("function")) nil [30971 31684])
            ("add-hook" code nil nil [31686 31778])
            ("help-fns--globalized-minor-mode" function (:arguments ("function")) nil [31779 32000])
            ("help-fns--autoloaded-p" function (:arguments ("function")) nil [32070 32232])
            ("help-fns--interactive-only" function (:arguments ("function")) nil [32234 33358])
            ("add-hook" code nil nil [33360 33433])
            ("help-fns--side-effects" function (:arguments ("function")) nil [33434 33720])
            ("add-hook" code nil nil [33722 33791])
            ("help-fns--disabled" function (:arguments ("function")) nil [33792 33956])
            ("help-fns--first-release-regexp" function (:arguments ("symbol")) nil [33958 35103])
            ("help-fns--first-release" function (:arguments ("symbol")) nil [35106 36868])
            ("add-hook" code nil nil [38795 38887])
            ("add-hook" code nil nil [38888 38980])
            ("help-fns--mention-first-release" function (:arguments ("object")) nil [38981 39487])
            ("declare-function" code nil nil [39489 39541])
            ("declare-function" code nil nil [39542 39596])
            ("add-hook" code nil nil [39598 39692])
            ("help-fns--mention-shortdoc-groups" function (:arguments ("object")) nil [39693 40858])
            ("help-fns-short-filename" function (:arguments ("filename")) nil [40860 41271])
            ("help-fns--analyze-function" function (:arguments ("function")) nil [41273 43252])
            ("help-fns-function-description-header" function (:arguments ("function")) nil [43254 47113])
            ("help-fns--ensure-empty-line" function nil nil [47115 47246])
            ("describe-function-1" function (:arguments ("function")) nil [47263 49590])
            ("add-hook" code nil nil [49651 49728])
            ("add-hook" code nil nil [49729 49801])
            ("add-hook" code nil nil [49802 49881])
            ("help-fns--generalized-variable" function (:arguments ("function")) nil [49883 50337])
            ("add-hook" code nil nil [50338 50429])
            ("variable-at-point" function (:arguments ("any-symbol")) nil [50462 51499])
            ("describe-variable-custom-version-info" function (:arguments ("variable" "type")) nil [51501 52482])
            ("describe-variable" function
               (:user-visible-flag t
                :arguments ("variable" "buffer" "frame"))
                nil [52499 61695])
            ("help-fns--editable-variable" function (:arguments ("start" "end" "variable" "value" "buffer")) nil [61697 62184])
            ("help-fns--edit-variable" variable nil nil [62186 62218])
            ("put" code nil nil [62220 62261])
            ("help-fns-edit-variable" function nil nil [62262 62961])
            ("defvar-keymap" code nil nil [62963 63086])
            ("define-derived-mode" code nil nil [63088 63178])
            ("help-fns-edit-mode-done" function
               (:user-visible-flag t
                :arguments ("kill"))
                nil [63180 63968])
            ("help-fns-edit-mode-cancel" function (:user-visible-flag t) nil [63970 64195])
            ("help-fns--run-describe-functions" function (:arguments ("functions" "args")) nil [64197 64768])
            ("add-hook" code nil nil [64770 64849])
            ("help-fns--customize-variable" function (:arguments ("variable" "text")) nil [64850 65344])
            ("add-hook" code nil nil [65346 65443])
            ("help-fns--customize-variable-version" function (:arguments ("variable")) nil [65444 65684])
            ("add-hook" code nil nil [65686 65761])
            ("help-fns--var-safe-local" function (:arguments ("variable")) nil [65762 66138])
            ("add-hook" code nil nil [66140 66210])
            ("help-fns--var-risky" function (:arguments ("variable")) nil [66211 66599])
            ("add-hook" code nil nil [66601 66679])
            ("help-fns--var-ignored-local" function (:arguments ("variable")) nil [66680 66846])
            ("add-hook" code nil nil [66848 66923])
            ("help-fns--var-file-local" function (:arguments ("variable")) nil [66924 68951])
            ("add-hook" code nil nil [68953 69029])
            ("help-fns--var-watchpoints" function (:arguments ("variable")) nil [69030 69303])
            ("help-fns--var-obsolete" function (:arguments ("variable")) nil [69305 69873])
            ("add-hook" code nil nil [69875 69945])
            ("help-fns--var-alias" function (:arguments ("variable")) nil [69946 70276])
            ("add-hook" code nil nil [70278 70350])
            ("help-fns--var-aliases" function (:arguments ("variable")) nil [70351 71016])
            ("add-hook" code nil nil [71018 71094])
            ("help-fns--var-bufferlocal" function (:arguments ("variable")) nil [71095 71880])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [71910 75461])
            ("add-hook" code nil nil [75463 75554])
            ("help-fns--face-custom-version-info" function (:arguments ("face" "_frame")) nil [75555 75731])
            ("add-hook" code nil nil [75733 75805])
            ("help-fns--face-attributes" function (:arguments ("face" "frame")) nil [75806 76940])
            ("help-xref-stack-item" variable nil nil [76942 76971])
            ("describe-symbol" function
               (:user-visible-flag t
                :arguments ("symbol" "buffer" "frame"))
                nil [76988 80187])
            ("describe-syntax" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [80204 80997])
            ("help-describe-category-set" function (:arguments ("value")) nil [80999 81237])
            ("describe-categories" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [81254 83717])
            ("help-fns-find-keymap-name" function (:arguments ("keymap")) nil [83719 84384])
            ("help-fns--most-relevant-active-keymap" function nil nil [84386 85076])
            ("keymap-name-history" variable nil nil [85078 85154])
            ("describe-keymap" function
               (:user-visible-flag t
                :arguments ("keymap"))
                nil [85171 88263])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [88281 91212])
            ("describe-mode--minor-modes" function (:arguments ("modes")) nil [91214 92414])
            ("help-fns--list-local-commands" function nil nil [92416 93223])
            ("describe-widget-functions" variable (:default-value '(button-describe widget-describe)) nil [93240 93487])
            ("describe-widget" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [93504 94929])
            ("doc-file-to-man" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [95058 96075])
            ("doc-file-to-info" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [96126 99109])
            ("help-fns" package nil nil [99111 99130]))          
      :file "help-fns.el.gz"
      :pointmax 99158
      :fsize 25228
      :lastmodtime '(25666 14220 0 0)
      :unmatched-syntax '((close-paren 1335 . 1336) (symbol 1300 . 1317) (open-paren 1299 . 1300)))
    (semanticdb-table "semanticdb-table-43f1645c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1030 1047])
            ("obarray" include nil nil [1049 1067])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1069 1183])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1185 1393])
            ("only-global-abbrevs" variable nil nil [1395 1646])
            ("define-minor-mode" code nil nil [1648 1940])
            ("put" code nil nil [1942 1991])
            ("define-obsolete-variable-alias" code nil nil [1995 2077])
            ("defvar-keymap" code nil nil [2078 2268])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2270 2441])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2443 2874])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2876 3161])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3163 3471])
            ("abbrev-table-name" function (:arguments ("table")) nil [3473 3765])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3767 4653])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4655 5743])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5745 5962])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5964 7252])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [7254 7782])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7784 8142])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [8144 9833])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9835 10201])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [10203 10462])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10466 11330])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11332 12092])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [12094 12944])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12946 13800])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [13802 14444])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [14446 15100])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15102 15795])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [15797 16492])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [16518 16671])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [16673 16903])
            ("defalias" code nil nil [16905 17057])
            ("defalias" code nil nil [17059 17229])
            ("abbrev-table-name-list" variable (:default-value '(fundamental-mode-abbrev-table global-abbrev-table)) nil [17285 17426])
            ("make-abbrev-table" function (:arguments ("props")) nil [17428 18167])
            ("abbrev-table-p" function (:arguments ("object")) nil [18169 18393])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [18395 18975])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [18977 19224])
            ("abbrev-minor-mode-table-alist" variable nil nil [19226 19531])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [19533 19808])
            ("abbrevs-changed" variable nil nil [19810 19957])
            ("abbrev-all-caps" variable nil nil [19959 20107])
            ("abbrev-start-location" variable nil nil [20109 20311])
            ("abbrev-start-location-buffer" variable nil nil [20313 20491])
            ("last-abbrev" variable nil nil [20493 20590])
            ("last-abbrev-text" variable nil nil [20592 20731])
            ("last-abbrev-location" variable nil nil [20733 20832])
            ("clear-abbrev-table" function (:arguments ("table")) nil [20963 21593])
            ("define-abbrev" function (:arguments ("table" "abbrev" "expansion" "hook" "props")) nil [21595 24771])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [24773 25516])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [25518 25890])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [25892 26328])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [26330 27388])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [27391 28342])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [28344 29058])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [29061 29321])
            ("abbrev--before-point" function nil nil [29324 31942])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [31944 35023])
            ("abbrev-expand-functions" variable nil nil [35025 35111])
            ("make-obsolete-variable" code nil nil [35112 35192])
            ("abbrev-expand-function" variable (:default-value nil) nil [35194 35399])
            ("abbrev-suggest" variable nil nil [35401 35758])
            ("abbrev-suggest-hint-threshold" variable (:default-value 3) nil [35760 36335])
            ("abbrev--suggest-get-active-tables-including-parents" function nil nil [36337 36630])
            ("abbrev--suggest-get-active-abbrev-expansions" function nil nil [36632 37095])
            ("abbrev--suggest-count-words" function (:arguments ("expansion")) nil [37097 37277])
            ("abbrev--suggest-get-previous-words" function (:arguments ("n")) nil [37279 37535])
            ("abbrev--suggest-above-threshold" function (:arguments ("expansion")) nil [37537 38027])
            ("abbrev--suggest-saved-recommendations" variable nil nil [38029 38210])
            ("abbrev--suggest-inform-user" function (:arguments ("expansion")) nil [38212 38650])
            ("abbrev--suggest-shortest-abbrev" function (:arguments ("new" "current")) nil [38652 38976])
            ("abbrev--suggest-maybe-suggest" function nil nil [38978 39752])
            ("abbrev--suggest-get-totals" function nil nil [39754 40283])
            ("abbrev-suggest-show-report" function (:user-visible-flag t) nil [40285 41031])
            ("expand-abbrev" function (:user-visible-flag t) nil [41033 41500])
            ("abbrev--default-expand" function nil nil [41502 43021])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [43023 43921])
            ("abbrev--write" function (:arguments ("sym")) nil [43923 44495])
            ("abbrev--describe" function (:arguments ("sym")) nil [44497 44891])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [44893 45970])
            ("abbrev--table-symbols" function (:arguments ("name" "system")) nil [45972 46444])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [46446 48764])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [48766 49641])
            ("abbrev-table-name" variable
               (:default-value '((t :inherit font-lock-function-name-face))
                :type "face")
                nil [49643 49810])
            ("edit-abbrevs-mode-font-lock-keywords" variable (:default-value `((,(rx bol "(" (regexp "\\(?:\\sw\\|\\s_\\|\\\\.\\)+") ")" eol) 0 'abbrev-table-name))) nil [49812 50009])
            ("define-derived-mode" code nil nil [50104 50479])
            ("abbrev--possibly-save" function (:arguments ("query" "arg")) nil [50481 51140])
            ("add-hook" code nil nil [51142 51205])
            ("abbrev" package nil nil [51207 51224]))          
      :file "abbrev.el.gz"
      :pointmax 51250
      :fsize 14436
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 1047 . 1048) (symbol 1012 . 1029) (open-paren 1011 . 1012)))
    (semanticdb-table "semanticdb-table-4b9b3134"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1086 1121])
            ("cua-enable-cua-keys" variable nil nil [1165 1193])
            ("or" code nil nil [1307 1417])
            ("setq" code nil nil [1571 1611])
            ("defvar-keymap" code nil nil [1739 1794])
            ("menu-bar-print-menu" variable (:default-value (let ((menu (make-sparse-keymap "Print"))) (bindings--define-key menu [ps-print-region] '(menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer")) (bindings--define-key menu [ps-print-buffer] '(menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer")) (bindings--define-key menu [ps-print-region-faces] '(menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer")) (bindings--define-key menu [ps-print-buffer-faces] '(menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer")) (bindings--define-key menu [print-region] '(menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position")) (bindings--define-key menu [print-buffer] '(menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings")) menu)) nil [1796 3387])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] '(menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit")) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [print] `(menu-item "Print" ,menu-bar-print-menu)) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [close-tab] '(menu-item "Close Tab" tab-close :visible (fboundp 'tab-close) :help "Close currently selected tab")) (bindings--define-key menu [make-tab] '(menu-item "New Tab" tab-new :visible (fboundp 'tab-new) :help "Open a new tab")) (bindings--define-key menu [separator-tab] menu-bar-separator) (bindings--define-key menu [undelete-frame-mode] '(menu-item "Allow Undeleting Frames" undelete-frame-mode :help "Allow frames to be restored after deletion" :button (:toggle . undelete-frame-mode))) (bindings--define-key menu [undelete-last-deleted-frame] '(menu-item "Undelete Frame" undelete-frame :enable (and undelete-frame-mode (car undelete-frame--deleted-frames)) :help "Undelete the most recently deleted frame")) (bindings--define-key menu [delete-this-frame] '(menu-item "Delete Frame" delete-frame :visible (fboundp 'delete-frame) :enable (delete-frame-enabled-p) :help "Delete currently selected frame")) (bindings--define-key menu [make-frame-on-monitor] '(menu-item "New Frame on Monitor..." make-frame-on-monitor :visible (fboundp 'make-frame-on-monitor) :help "Open a new frame on another monitor")) (bindings--define-key menu [make-frame-on-display] '(menu-item "New Frame on Display Server..." make-frame-on-display :visible (fboundp 'make-frame-on-display) :help "Open a new frame on a display server")) (bindings--define-key menu [make-frame] '(menu-item "New Frame" make-frame-command :visible (fboundp 'make-frame-command) :help "Open a new frame")) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] '(menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame")) (bindings--define-key menu [new-window-on-right] '(menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one")) (bindings--define-key menu [new-window-below] '(menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one")) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [recover-session] '(menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session")) (bindings--define-key menu [revert-buffer] '(menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function 'revert-buffer--default)) (not (eq revert-buffer-insert-file-contents-function 'revert-buffer-insert-file-contents--default-function)) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer))) (not (eq (not buffer-read-only) (file-writable-p buffer-file-name)))))) :help "Re-read current buffer from its file")) (bindings--define-key menu [write-file] '(menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file")) (bindings--define-key menu [save-buffer] '(menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file")) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] '(menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer")) (bindings--define-key menu [insert-file] '(menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer")) (bindings--define-key menu [project-dired] '(menu-item "Open Project Directory" project-dired :enable (menu-bar-non-minibuffer-window-p) :help "Read the root directory of the current project, to operate on its files")) (bindings--define-key menu [dired] '(menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files")) (bindings--define-key menu [project-open-file] '(menu-item "Open File In Project..." project-find-file :enable (menu-bar-non-minibuffer-window-p) :help "Read existing file that belongs to current project into an Emacs buffer")) (bindings--define-key menu [open-file] '(menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer")) (bindings--define-key menu [new-file] '(menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file")) menu)) nil [3389 10805])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [10807 11203])
            ("menu-bar-last-search-type" variable nil nil [11235 11343])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [11345 11738])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [11740 12137])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [12139 12734])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [12736 12956])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [12958 13297])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [13299 13650])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-forward-symbol-at-point] '(menu-item "Forward Symbol at Point..." isearch-forward-symbol-at-point :help "Search forward for a symbol found at point")) (bindings--define-key menu [isearch-forward-symbol] '(menu-item "Forward Symbol..." isearch-forward-symbol :help "Search forward for a symbol as you type it")) (bindings--define-key menu [isearch-forward-word] '(menu-item "Forward Word..." isearch-forward-word :help "Search forward for a word as you type it")) (bindings--define-key menu [isearch-backward-regexp] '(menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it")) (bindings--define-key menu [isearch-forward-regexp] '(menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it")) (bindings--define-key menu [isearch-backward] '(menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it")) (bindings--define-key menu [isearch-forward] '(menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it")) menu)) nil [13689 15059])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [tags-continue] '(menu-item "Continue Tags Search" fileloop-continue :enable (and (featurep 'fileloop) (not (eq fileloop--operate-function 'ignore))) :help "Continue last tags search operation")) (bindings--define-key menu [tags-srch] '(menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files")) (bindings--define-key menu [project-search] '(menu-item "Search in Project Files..." project-find-regexp :help "Search for a regexp in files belonging to current project")) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] '(menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type 'string) search-ring) (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring)) :help "Repeat last search backwards")) (bindings--define-key menu [repeat-search-fwd] '(menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type 'string) search-ring) (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring)) :help "Repeat last search forward")) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] '(menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression")) (bindings--define-key menu [re-search-forward] '(menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression")) (bindings--define-key menu [search-backward] '(menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string")) (bindings--define-key menu [search-forward] '(menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string")) menu)) nil [15061 17655])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] '(menu-item "Continue Replace" fileloop-continue :enable (and (featurep 'fileloop) (not (eq fileloop--operate-function 'ignore))) :help "Continue last tags replace operation")) (bindings--define-key menu [tags-repl] '(menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files")) (bindings--define-key menu [project-replace] '(menu-item "Replace in Project Files..." project-query-replace-regexp :help "Interactively replace a regexp in files belonging to current project")) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] '(menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence")) (bindings--define-key menu [query-replace] '(menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence")) menu)) nil [17687 19020])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] '(menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use")) (bindings--define-key menu [separator-tag-file] '(menu-item "--" nil :visible (menu-bar-goto-uses-etags-p))) (bindings--define-key menu [xref-forward] '(menu-item "Forward" xref-go-forward :visible (and (featurep 'xref) (not (xref-forward-history-empty-p))) :help "Forward to the position gone Back from")) (bindings--define-key menu [xref-pop] '(menu-item "Back" xref-go-back :visible (and (featurep 'xref) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search")) (bindings--define-key menu [xref-apropos] '(menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp")) (bindings--define-key menu [xref-find-otherw] '(menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window")) (bindings--define-key menu [xref-find-def] '(menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable")) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] '(menu-item "Goto End of Buffer" end-of-buffer)) (bindings--define-key menu [beg-of-buf] '(menu-item "Goto Beginning of Buffer" beginning-of-buffer)) (bindings--define-key menu [go-to-pos] '(menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N")) (bindings--define-key menu [go-to-line] '(menu-item "Goto Line..." goto-line :help "Read a line number and go to that line")) menu)) nil [19066 21256])
            ("menu-bar-goto-uses-etags-p" function nil nil [21258 21402])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [21404 21458])
            ("fset" code nil nil [21459 21501])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (if (featurep 'ns) (bindings--define-key menu [spell] '(menu-item "Spell" ispell-menu-map))) (bindings--define-key menu [fill] '(menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin")) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] '(menu-item "Bookmarks" menu-bar-bookmark-map)) (bindings--define-key menu [goto] `(menu-item "Go To" ,menu-bar-goto-menu)) (bindings--define-key menu [replace] `(menu-item "Replace" ,menu-bar-replace-menu)) (bindings--define-key menu [i-search] `(menu-item "Incremental Search" ,menu-bar-i-search-menu)) (bindings--define-key menu [search] `(menu-item "Search" ,menu-bar-search-menu)) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] '(menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy")) (bindings--define-key menu [clear] '(menu-item "Clear" delete-active-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position")) (bindings--define-key menu (if (featurep 'ns) [select-paste] [paste-from-menu]) `(menu-item ,(if (featurep 'ns) "Select and Paste" "Paste from Kill Menu") yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it")) (bindings--define-key menu [paste] `(menu-item "Paste" yank :enable (funcall ',(lambda nil (and (not buffer-read-only) (or (gui-backend-selection-exists-p 'CLIPBOARD) (if (featurep 'ns) (cdr yank-menu) kill-ring))))) :help "Paste (yank) text most recently cut/copied" :keys ,(lambda nil (if cua-mode "\\[cua-paste]" "\\[yank]")))) (bindings--define-key menu [copy] `(menu-item "Copy" ,(if (featurep 'ns) 'ns-copy-including-secondary 'kill-ring-save) :enable mark-active :help "Copy text in region between mark and current position" :keys ,(lambda nil (cond ((featurep 'ns) "\\[ns-copy-including-secondary]") ((and cua-mode mark-active) "\\[cua-copy-handler]") (t "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] `(menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position" :keys ,(lambda nil (if (and cua-mode mark-active) "\\[cua-cut-handler]" "\\[kill-region]")))) (if (featurep 'ns) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo-redo] '(menu-item "Redo" undo-redo :enable (and (not buffer-read-only) (undo--last-change-was-undo-p buffer-undo-list)) :help "Redo last undone edits")) (bindings--define-key menu [undo] '(menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command 'undo) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last edits")) menu)) nil [21503 26381])
            ("put" code nil nil [26525 26613])
            ("put" code nil nil [26614 26671])
            ("put" code nil nil [26672 26927])
            ("clipboard-yank" function (:user-visible-flag t) nil [26929 27289])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [27291 27626])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [27628 27951])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [27953 28574])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] '(menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list")) (bindings--define-key menu [customize-apropos-options] '(menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list")) (bindings--define-key menu [customize-apropos] '(menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list")) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] '(menu-item "Specific Group..." customize-group :help "Customize settings of specific group")) (bindings--define-key menu [customize-face] '(menu-item "Specific Face..." customize-face :help "Customize attributes of specific face")) (bindings--define-key menu [customize-option] '(menu-item "Specific Option..." customize-option :help "Customize value of specific option")) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed] '(menu-item "New Options..." customize-changed :help "Options and faces added or changed in recent Emacs versions")) (bindings--define-key menu [customize-saved] '(menu-item "Saved Options" customize-saved :help "Customize previously saved options")) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] '(menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups")) (bindings--define-key menu [customize] '(menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'")) (bindings--define-key menu [customize-themes] '(menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme")) menu)) nil [28606 30865])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [30930 31381])
            ("menu-bar-make-toggle" function (:arguments ("command" "variable" "item-name" "message" "help" "body")) nil [31383 31954])
            ("menu-bar-make-toggle-command" function (:arguments ("command" "variable" "item-name" "message" "help" "setting-sexp" "keywords")) nil [31956 34246])
            ("menu-set-font" function (:user-visible-flag t) nil [34294 34593])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [34595 36819])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [36928 37082])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [37084 37298])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [37300 37507])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [37509 37719])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [37721 37837])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] '(menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) '(x w32)))) (bindings--define-key menu [bottom-and-right] '(menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) '(x w32)) :button (:radio and (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters)))) (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters))))))) (bindings--define-key menu [right-only] '(menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) '(x w32)) :button (:radio and (not (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters))))) (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters))))))) (bindings--define-key menu [bottom-only] '(menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) '(x w32)) :button (:radio and (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters)))))))) (bindings--define-key menu [no-divider] '(menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) '(x w32)) :button (:radio and (not (window-divider-width-valid-p (cdr (assq 'bottom-divider-width (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq 'right-divider-width (frame-parameters)))))))) menu)) nil [38121 40563])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [40565 40745])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [40747 40972])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [40974 41185])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [41187 41372])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [41374 41556])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [41558 41728])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] '(menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries '(nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) (bindings--define-key menu [mixed] '(menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries '((t . right) (top . left))))) (bindings--define-key menu [box] '(menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries '((top . left) (bottom . right))))) (bindings--define-key menu [right] '(menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries 'right))) (bindings--define-key menu [left] '(menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries 'left))) (bindings--define-key menu [none] '(menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil))) menu)) nil [41730 44142])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [44144 44295])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [44297 44483])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [44485 44682])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [44684 44879])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [44881 45052])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] `(menu-item "Buffer Boundaries" ,menu-bar-showhide-fringe-ind-menu :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe")) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle-command toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] '(menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p))) (bindings--define-key menu [default] '(menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil))) (bindings--define-key menu [right] '(menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode '(0)))) (bindings--define-key menu [left] '(menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode '(nil . 0)))) (bindings--define-key menu [none] '(menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0))) menu)) nil [45054 47030])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [47032 47188])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [47190 47343])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [47345 47468])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] '(menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil 'vertical-scroll-bars) 'right)))) (bindings--define-key menu [left] '(menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil 'vertical-scroll-bars) 'left)))) (bindings--define-key menu [none] '(menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil))) menu)) nil [47470 49022])
            ("menu-bar-frame-for-menubar" function nil nil [49024 49207])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [49209 49329])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [49331 49479])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [49480 49632])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [49633 49794])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [49795 49959])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [49960 50118])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [50119 50286])
            ("when" code nil nil [50288 53067])
            ("display-line-numbers-type" variable nil nil [53069 53103])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [53104 53306])
            ("menu-bar--display-line-numbers-mode-visual" function (:user-visible-flag t) nil [53308 53503])
            ("menu-bar--display-line-numbers-mode-relative" function (:user-visible-flag t) nil [53505 53708])
            ("menu-bar--display-line-numbers-mode-absolute" function (:user-visible-flag t) nil [53710 53937])
            ("menu-bar--display-line-numbers-mode-none" function (:user-visible-flag t) nil [53939 54111])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] '(menu-item "Visual Line Numbers" menu-bar--display-line-numbers-mode-visual :help "Enable visual line numbers" :button (:radio eq display-line-numbers 'visual) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [relative] '(menu-item "Relative Line Numbers" menu-bar--display-line-numbers-mode-relative :help "Enable relative line numbers" :button (:radio eq display-line-numbers 'relative) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [absolute] '(menu-item "Absolute Line Numbers" menu-bar--display-line-numbers-mode-absolute :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [none] '(menu-item "No Line Numbers" menu-bar--display-line-numbers-mode-none :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [54113 55779])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] `(menu-item "Line Numbers for All Lines" ,menu-bar-showhide-line-numbers-menu)) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] '(menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp 'speedbar-frame) (frame-live-p (symbol-value 'speedbar-frame)) (frame-visible-p (symbol-value 'speedbar-frame))))) (bindings--define-key menu [showhide-tab-line-mode] '(menu-item "Window Tab Line" global-tab-line-mode :help "Turn window-local tab-lines on/off" :visible (fboundp 'global-tab-line-mode) :button (:toggle . global-tab-line-mode))) (bindings--define-key menu [showhide-window-divider] `(menu-item "Window Divider" ,menu-bar-showhide-window-divider-menu :visible (memq (window-system) '(x w32)))) (bindings--define-key menu [showhide-fringe] `(menu-item "Fringe" ,menu-bar-showhide-fringe-menu :visible (display-graphic-p))) (bindings--define-key menu [showhide-scroll-bar] `(menu-item "Scroll Bar" ,menu-bar-showhide-scroll-bar-menu :visible (display-graphic-p))) (bindings--define-key menu [showhide-tooltip-mode] '(menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp 'x-show-tip)) :button (:toggle . tooltip-mode))) (bindings--define-key menu [showhide-context-menu] '(menu-item "Context Menus" context-menu-mode :help "Turn mouse-3 context menus on/off" :button (:toggle . context-menu-mode))) (bindings--define-key menu [menu-bar-mode] '(menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) 'menu-bar-lines)))) (bindings--define-key menu [showhide-tab-bar] '(menu-item "Tab Bar" toggle-tab-bar-mode-from-frame :help "Turn tab bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) 'tab-bar-lines)))) (if (and (boundp 'menu-bar-showhide-tool-bar-menu) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] `(menu-item "Tool Bar" ,menu-bar-showhide-tool-bar-menu :visible (display-graphic-p))) (bindings--define-key menu [showhide-tool-bar] '(menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) 'tool-bar-lines))))) menu)) nil [55781 60688])
            ("menu-bar--visual-line-mode-enable" function (:user-visible-flag t) nil [60690 60871])
            ("menu-bar--toggle-truncate-long-lines" function (:user-visible-flag t) nil [60873 61060])
            ("menu-bar--wrap-long-lines-window-edge" function (:user-visible-flag t) nil [61062 61279])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] '(menu-item "Word Wrap (Visual Line mode)" menu-bar--visual-line-mode-enable :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p))) (bindings--define-key menu [truncate] '(menu-item "Truncate Long Lines" menu-bar--toggle-truncate-long-lines :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p)))) (bindings--define-key menu [window-wrap] '(menu-item "Wrap at Window Edge" menu-bar--wrap-long-lines-window-edge :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p)))) menu)) nil [61281 62888])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x '((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word"))) (bindings--define-key menu (vector (nth 0 x)) `(menu-item ,(nth 1 x) (lambda nil (interactive) (setq search-default-mode #',(nth 0 x)) (message ,(format "%s search enabled" (nth 2 x)))) :help ,(format "Enable %s search" (downcase (nth 2 x))) :button (:radio eq search-default-mode #',(nth 0 x))))) (bindings--define-key menu [regexp-search] '(menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t))) (bindings--define-key menu [regular-search] '(menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle-command toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [62890 64844])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] `(menu-item "Customize Emacs" ,menu-bar-custom-menu)) (bindings--define-key menu [package] '(menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages")) (bindings--define-key menu [save] '(menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above")) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] '(menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font")) (if (featurep 'system-font-setting) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle-command toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] `(menu-item "Show/Hide" ,menu-bar-showhide-menu)) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] `(menu-item "Multilingual Environment" ,mule-menu-keymap)) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle-command toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle-command toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-desktop] (menu-bar-make-toggle-command toggle-save-desktop-globally desktop-save-mode "Save State between Sessions" "Saving desktop state %s" "Visit desktop of previous session when restarting Emacs" (progn (require 'desktop) (set-default 'desktop-save-mode (not (symbol-value 'desktop-save-mode)))))) (bindings--define-key menu [save-place] (menu-bar-make-toggle-command toggle-save-place-globally save-place-mode "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (progn (require 'saveplace) (set-default 'save-place-mode (not (symbol-value 'save-place-mode)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle-command toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) 'post-forward-angle-brackets)))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Cut/Paste with C-x/C-c/C-v (CUA Mode)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp 'cua-enable-cua-keys)) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "CUA Mode (without C-x/C-c/C-v)" "Enable CUA Mode without rebinding C-x/C-c/C-v keys" (:visible (and (boundp 'cua-enable-cua-keys) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] `(menu-item "Default Search Options" ,menu-bar-search-options-menu)) (bindings--define-key menu [line-wrapping] `(menu-item "Line Wrapping in This Buffer" ,menu-bar-line-wrapping-menu)) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [64846 70438])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] '(menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle")) (bindings--define-key menu [tetris] '(menu-item "Tetris" tetris :help "Falling blocks game")) (bindings--define-key menu [solitaire] '(menu-item "Solitaire" solitaire :help "Get rid of all the stones")) (bindings--define-key menu [snake] '(menu-item "Snake" snake :help "Move snake around avoiding collisions")) (bindings--define-key menu [pong] '(menu-item "Pong" pong :help "Bounce the ball to your opponent")) (bindings--define-key menu [mult] '(menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication")) (bindings--define-key menu [life] '(menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves")) (bindings--define-key menu [hanoi] '(menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs")) (bindings--define-key menu [gomoku] '(menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)")) (bindings--define-key menu [bubbles] '(menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves")) (bindings--define-key menu [black-box] '(menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays")) (bindings--define-key menu [adventure] '(menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs")) (bindings--define-key menu [5x5] '(menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board")) menu)) nil [70469 72408])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] '(menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point")) (bindings--define-key menu [export-keys] '(menu-item "Export Keys" epa-export-keys :help "Export public keys to a file")) (bindings--define-key menu [import-keys-region] '(menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region")) (bindings--define-key menu [import-keys] '(menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file")) (bindings--define-key menu [list-keys] '(menu-item "List Keys" epa-list-keys :help "Browse your public keyring")) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] '(menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region")) (bindings--define-key menu [verify-region] '(menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region")) (bindings--define-key menu [encrypt-region] '(menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region")) (bindings--define-key menu [decrypt-region] '(menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region")) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] '(menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file")) (bindings--define-key menu [verify-file] '(menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file")) (bindings--define-key menu [encrypt-file] '(menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file")) (bindings--define-key menu [decrypt-file] '(menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file")) menu)) nil [72410 74751])
            ("menu-bar-shell-commands-menu" variable (:default-value (let ((menu (make-sparse-keymap "Shell Commands"))) (bindings--define-key menu [project-interactive-shell] '(menu-item "Run Shell In Project" project-shell :help "Run a subshell interactively, in the current project's root directory")) (bindings--define-key menu [interactive-shell] '(menu-item "Run Shell" shell :help "Run a subshell interactively")) (bindings--define-key menu [async-shell-command] '(menu-item "Async Shell Command..." async-shell-command :help "Invoke a shell command asynchronously in background")) (bindings--define-key menu [shell-on-region] '(menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command")) (bindings--define-key menu [shell] '(menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output")) menu)) nil [74753 75797])
            ("menu-bar-project-menu" variable (:default-value (let ((menu (make-sparse-keymap "Project"))) (bindings--define-key menu [project-execute-extended-command] '(menu-item "Execute Extended Command..." project-execute-extended-command :help "Execute an extended command in project root directory")) (bindings--define-key menu [project-query-replace-regexp] '(menu-item "Query Replace Regexp..." project-query-replace-regexp :help "Interactively replace a regexp in files belonging to current project")) (bindings--define-key menu [project-or-external-find-regexp] '(menu-item "Find Regexp Including External Roots..." project-or-external-find-regexp :help "Search for a regexp in files belonging to current project or external files")) (bindings--define-key menu [project-find-regexp] '(menu-item "Find Regexp..." project-find-regexp :help "Search for a regexp in files belonging to current project")) (bindings--define-key menu [separator-project-search] menu-bar-separator) (bindings--define-key menu [project-kill-buffers] '(menu-item "Kill Buffers..." project-kill-buffers :help "Kill the buffers belonging to the current project")) (bindings--define-key menu [project-list-buffers] '(menu-item "List Buffers..." project-list-buffers :help "Pop up a window listing all Emacs buffers belonging to current project")) (bindings--define-key menu [project-switch-to-buffer] '(menu-item "Switch To Buffer..." project-switch-to-buffer :help "Prompt for a buffer belonging to current project, and switch to it")) (bindings--define-key menu [separator-project-buffers] menu-bar-separator) (bindings--define-key menu [project-async-shell-command] '(menu-item "Async Shell Command..." project-async-shell-command :help "Invoke a shell command in project root asynchronously in background")) (bindings--define-key menu [project-shell-command] '(menu-item "Shell Command..." project-shell-command :help "Invoke a shell command in project root and catch its output")) (bindings--define-key menu [project-eshell] '(menu-item "Run Eshell" project-eshell :help "Run eshell for the current project")) (bindings--define-key menu [project-shell] '(menu-item "Run Shell" project-shell :help "Run a subshell interactively, in the current project's root directory")) (bindings--define-key menu [project-compile] '(menu-item "Compile..." project-compile :help "Invoke compiler or Make for current project, view errors")) (bindings--define-key menu [separator-project-programs] menu-bar-separator) (bindings--define-key menu [project-switch-project] '(menu-item "Switch Project..." project-switch-project :help "Switch to another project and then run a command")) (bindings--define-key menu [project-vc-dir] '(menu-item "VC Dir..." project-vc-dir :help "Show the VC status of the project repository")) (bindings--define-key menu [project-dired] '(menu-item "Open Project Root" project-dired :help "Read the root directory of the current project, to operate on its files")) (bindings--define-key menu [project-find-dir] '(menu-item "Open Directory..." project-find-dir :help "Open existing directory that belongs to current project")) (bindings--define-key menu [project-or-external-find-file] '(menu-item "Open File Including External Roots..." project-or-external-find-file :help "Open existing file that belongs to current project or its external roots")) (bindings--define-key menu [project-open-file] '(menu-item "Open File..." project-find-file :help "Open an existing file that belongs to current project")) menu)) nil [75799 79365])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [79367 79494])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] `(menu-item "Games" ,menu-bar-games-menu)) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] `(menu-item "Encryption/Decryption" ,menu-bar-encryption-decryption-menu)) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] '(menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator")) (bindings--define-key menu [calc] '(menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator")) (bindings--define-key menu [calendar] '(menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar")) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] '(menu-item "Browse the Web..." browse-web)) (bindings--define-key menu [directory-search] '(menu-item "Directory Servers" eudc-tools-menu)) (bindings--define-key menu [compose-mail] '(menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent 'ignore))) :help "Start writing a new mail message")) (bindings--define-key menu [rmail] '(menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command 'ignore))) :help "Read your mail")) (bindings--define-key menu [gnus] '(menu-item "Read Net News" gnus :help "Read network news groups")) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] '(menu-item "Apply Patch" menu-bar-epatch-menu)) (bindings--define-key menu [ediff-merge] '(menu-item "Merge" menu-bar-ediff-merge-menu)) (bindings--define-key menu [compare] '(menu-item "Compare (Ediff)" menu-bar-ediff-menu)) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] '(menu-item "Spell Checking" ispell-menu-map)) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] '(menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode))) (bindings--define-key menu [eglot] '(menu-item "Language Server Support (Eglot)" eglot :help "Start language server suitable for this buffer's major-mode")) (bindings--define-key menu [project] `(menu-item "Project" ,menu-bar-project-menu)) (bindings--define-key menu [ede] '(menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode))) (bindings--define-key menu [gdb] '(menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB")) (bindings--define-key menu [project-compile] '(menu-item "Compile Project..." project-compile :help "Invoke compiler or Make for current project, view errors")) (bindings--define-key menu [compile] '(menu-item "Compile..." compile :help "Invoke compiler or Make in current buffer's directory, view errors")) (bindings--define-key menu [shell-commands] `(menu-item "Shell Commands" ,menu-bar-shell-commands-menu)) (bindings--define-key menu [rgrep] '(menu-item "Recursive Grep..." rgrep :help "Interactively ask for parameters and search recursively")) (bindings--define-key menu [grep] '(menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)")) menu)) nil [79496 83963])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] '(menu-item "Show All of Mule Status" mule-diag :help "Display multilingual environment settings")) (bindings--define-key menu [describe-coding-system-briefly] '(menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly)) (bindings--define-key menu [describe-coding-system] '(menu-item "Describe Coding System..." describe-coding-system)) (bindings--define-key menu [describe-input-method] '(menu-item "Describe Input Method..." describe-input-method :help "Keyboard layout for specific input method")) (bindings--define-key menu [describe-language-environment] `(menu-item "Describe Language Environment" ,describe-language-environment-map)) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] '(menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)")) (bindings--define-key menu [list-recent-keystrokes] '(menu-item "Show Recent Inputs" view-lossage :help "Display last few input events and the commands they ran")) (bindings--define-key menu [describe-current-display-table] '(menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table")) (bindings--define-key menu [describe-package] '(menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package")) (bindings--define-key menu [describe-face] '(menu-item "Describe Face..." describe-face :help "Display the properties of a face")) (bindings--define-key menu [describe-variable] '(menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option")) (bindings--define-key menu [describe-function] '(menu-item "Describe Function..." describe-function :help "Display documentation of function/command")) (bindings--define-key menu [describe-command] '(menu-item "Describe Command..." describe-command :help "Display documentation of command")) (bindings--define-key menu [shortdoc-display-group] '(menu-item "Function Group Overview..." shortdoc-display-group :help "Display a function overview for a specific topic")) (bindings--define-key menu [describe-key-1] '(menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item")) (bindings--define-key menu [describe-mode] '(menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode")) menu)) nil [83992 87109])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [87111 87234])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [87236 87372])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [87374 87513])
            ("emacs-index--prompt" function nil nil [87515 87809])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [87811 87980])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [87982 88161])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] '(menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp")) (bindings--define-key menu [find-any-object-by-name] '(menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp")) (bindings--define-key menu [find-option-by-value] '(menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp")) (bindings--define-key menu [find-options-by-name] '(menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp")) (bindings--define-key menu [find-commands-by-name] '(menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp")) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-symbol-in-manual] '(menu-item "Look Up Symbol in Manual..." info-lookup-symbol :help "Display manual section that describes a symbol")) (bindings--define-key menu [lookup-command-in-manual] '(menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command")) (bindings--define-key menu [lookup-key-in-manual] '(menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key")) (bindings--define-key menu [lookup-subject-in-elisp-manual] '(menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual")) (bindings--define-key menu [lookup-subject-in-emacs-manual] '(menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual")) (bindings--define-key menu [emacs-terminology] '(menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual")) menu)) nil [88163 90583])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] '(menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries")) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] '(menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation")) (bindings--define-key menu [lookup-subject-in-all-manuals] '(menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals")) (bindings--define-key menu [other-manuals] '(menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals")) (bindings--define-key menu [emacs-lisp-reference] '(menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual")) (bindings--define-key menu [emacs-lisp-intro] '(menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming")) menu)) nil [90585 91859])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [91861 92009])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] '(menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux")) (bindings--define-key menu [about-emacs] '(menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help")) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] '(menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY")) (bindings--define-key menu [describe-copying] '(menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)")) (bindings--define-key menu [getting-new-versions] '(menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs")) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] '(menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs")) (bindings--define-key menu [find-emacs-packages] '(menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword")) (bindings--define-key menu [more-manuals] `(menu-item "More Manuals" ,menu-bar-manuals-menu)) (bindings--define-key menu [emacs-manual] '(menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features")) (bindings--define-key menu [describe] `(menu-item "Describe" ,menu-bar-describe-menu)) (bindings--define-key menu [search-documentation] `(menu-item "Search Documentation" ,menu-bar-search-documentation-menu)) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] '(menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better")) (bindings--define-key menu [send-emacs-bug-report] '(menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers")) (bindings--define-key menu [emacs-manual-bug] '(menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug")) (bindings--define-key menu [emacs-known-problems] '(menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs")) (bindings--define-key menu [emacs-news] '(menu-item "Emacs News" view-emacs-news :help "New features of this version")) (bindings--define-key menu [emacs-faq] '(menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs")) (bindings--define-key menu [emacs-tutorial-language-specific] '(menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)")) (bindings--define-key menu [emacs-tutorial] '(menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs")) (and (featurep 'ns) (not (eq system-type 'darwin)) (bindings--define-key menu [info-panel] '(menu-item "About Emacs..." ns-do-emacs-info-panel))) menu)) nil [92011 95759])
            ("bindings--define-key" code nil nil [95761 95848])
            ("bindings--define-key" code nil nil [95849 95943])
            ("bindings--define-key" code nil nil [95944 96037])
            ("bindings--define-key" code nil nil [96038 96122])
            ("bindings--define-key" code nil nil [96123 96207])
            ("bindings--define-key" code nil nil [96208 96308])
            ("define-key" code nil nil [96310 96373])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [96375 96679])
            ("menu-bar-non-minibuffer-window-p" function nil nil [96681 97127])
            ("kill-this-buffer" function (:user-visible-flag t) nil [97129 97673])
            ("kill-this-buffer-enabled-p" function nil nil [97675 98143])
            ("put" code nil nil [98145 98206])
            ("delete-frame-enabled-p" function nil nil [98281 98566])
            ("yank-menu-length" variable (:default-value 20) nil [98568 98699])
            ("yank-menu-max-items" variable (:default-value 60) nil [98701 98845])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [98847 99896])
            ("put" code nil nil [99898 99944])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [99945 100177])
            ("buffers-menu-max-size" variable (:default-value 10) nil [100199 100543])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [100545 100894])
            ("buffers-menu-show-directories" variable (:default-value 'unless-uniquify) nil [100896 101640])
            ("buffers-menu-show-status" variable (:default-value t) nil [101642 102015])
            ("defvar-local" code nil nil [102017 102132])
            ("menu-bar-select-buffer" function (:user-visible-flag t) nil [102134 102257])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [102259 102370])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [102372 103242])
            ("menu-bar-buffers-menu-command-entries" variable (:default-value (list '(command-separator "--") (list 'next-buffer 'menu-item "Next Buffer" 'next-buffer :help "Switch to the \"next\" buffer in a cyclic order") (list 'previous-buffer 'menu-item "Previous Buffer" 'previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order") (list 'select-named-buffer 'menu-item "Select Named Buffer..." 'switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window") (list 'list-all-buffers 'menu-item "List All Buffers" 'list-buffers :help "Pop up a window listing all Emacs buffers") (list 'select-buffer-in-project 'menu-item "Select Buffer In Project..." 'project-switch-to-buffer :help "Prompt for a buffer belonging to current project, and switch to it") (list 'list-buffers-in-project 'menu-item "List Buffers In Project..." 'project-list-buffers :help "Pop up a window listing all Emacs buffers belonging to current project"))) nil [103244 104434])
            ("menu-bar-select-buffer-function" variable (:default-value 'switch-to-buffer) nil [104436 104624])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [104626 105092])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [105094 108112])
            ("add-hook" code nil nil [108114 108171])
            ("menu-bar-update-buffers" code nil nil [108173 108198])
            ("dolist" code nil nil [108821 109117])
            ("let" code nil nil [109119 109608])
            ("let" code nil nil [109610 110679])
            ("define-minor-mode" code nil nil [110682 111952])
            ("put" code nil nil [112396 112437])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [112439 112808])
            ("declare-function" code nil nil [112810 112875])
            ("declare-function" code nil nil [112876 112945])
            ("declare-function" code nil nil [112946 113017])
            ("declare-function" code nil nil [113018 113088])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [113090 113304])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [113306 116559])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [116561 117309])
            ("tty-menu-open-use-tmm" variable nil nil [117311 117772])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [117774 117925])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame" "initial-x"))
                nil [117927 119875])
            ("global-set-key" code nil nil [119877 119914])
            ("menu-bar-open-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [119916 120662])
            ("menu-bar-keymap" function (:arguments ("keymap")) nil [120664 121753])
            ("menu-bar-current-active-maps" function nil nil [121755 122133])
            ("menu-bar-item-at-x" function (:arguments ("x-position")) nil [122135 123417])
            ("buffer-menu-open" function (:user-visible-flag t) nil [123419 123644])
            ("global-set-key" code nil nil [123646 123688])
            ("mouse-buffer-menu-keymap" function nil nil [123690 124017])
            ("menu-bar-define-mouse-key" function (:arguments ("map" "key" "def")) nil [124019 124510])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind '((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] 'tty-menu-exit) (define-key map [18] 'tty-menu-select) (define-key map [10] 'tty-menu-select) (define-key map [return] 'tty-menu-select) (define-key map [linefeed] 'tty-menu-select) (menu-bar-define-mouse-key map 'mouse-1 'tty-menu-select) (menu-bar-define-mouse-key map 'drag-mouse-1 'tty-menu-select) (menu-bar-define-mouse-key map 'mouse-2 'tty-menu-select) (menu-bar-define-mouse-key map 'drag-mouse-2 'tty-menu-select) (menu-bar-define-mouse-key map 'mouse-3 'tty-menu-select) (menu-bar-define-mouse-key map 'drag-mouse-3 'tty-menu-select) (menu-bar-define-mouse-key map 'wheel-down 'tty-menu-next-item) (menu-bar-define-mouse-key map 'wheel-up 'tty-menu-prev-item) (menu-bar-define-mouse-key map 'wheel-left 'tty-menu-prev-menu) (menu-bar-define-mouse-key map 'wheel-right 'tty-menu-next-menu) (menu-bar-define-mouse-key map 'S-mouse-1 'tty-menu-next-item) (menu-bar-define-mouse-key map 'S-drag-mouse-1 'tty-menu-next-item) (menu-bar-define-mouse-key map 'S-mouse-2 'tty-menu-prev-item) (menu-bar-define-mouse-key map 'S-drag-mouse-2 'tty-menu-prev-item) (menu-bar-define-mouse-key map 'S-mouse-3 'tty-menu-prev-item) (menu-bar-define-mouse-key map 'S-drag-mouse-3 'tty-menu-prev-item) (menu-bar-define-mouse-key map 'down-mouse-1 'tty-menu-ignore) (menu-bar-define-mouse-key map 'down-mouse-2 'tty-menu-ignore) (menu-bar-define-mouse-key map 'down-mouse-3 'tty-menu-ignore) (menu-bar-define-mouse-key map 'C-down-mouse-1 'tty-menu-ignore) (menu-bar-define-mouse-key map 'C-down-mouse-2 'tty-menu-ignore) (menu-bar-define-mouse-key map 'C-down-mouse-3 'tty-menu-ignore) (menu-bar-define-mouse-key map 'mouse-movement 'tty-menu-mouse-movement) map)) nil [124512 127976])
            ("menu-bar" package nil nil [127978 127997]))          
      :file "menu-bar.el.gz"
      :pointmax 128025
      :fsize 27338
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4b80849a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("emacs-major-version" variable
               (:constant-flag t
                :default-value (progn (string-match "^[0-9]+" emacs-version) (string-to-number (match-string 0 emacs-version))))
                nil [939 1128])
            ("emacs-minor-version" variable
               (:constant-flag t
                :default-value (progn (string-match "^[0-9]+\\.\\([0-9]+\\)" emacs-version) (string-to-number (match-string 1 emacs-version))))
                nil [1130 1334])
            ("emacs-build-system" variable
               (:constant-flag t
                :default-value (system-name))
                nil [1336 1453])
            ("emacs-build-time" variable
               (:constant-flag t
                :default-value (if emacs-build-system (current-time)))
                nil [1455 1586])
            ("emacs-build-number" variable
               (:constant-flag t
                :default-value 1)
                nil [1588 1866])
            ("motif-version-string" variable nil nil [1868 1897])
            ("gtk-version-string" variable nil nil [1898 1925])
            ("ns-version-string" variable nil nil [1926 1952])
            ("cairo-version-string" variable nil nil [1953 1982])
            ("declare-function" code nil nil [1984 2040])
            ("emacs-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [2042 3748])
            ("defalias" code nil nil [3807 3841])
            ("define-obsolete-variable-alias" code nil nil [3843 3959])
            ("emacs-repository-version" variable nil nil [4027 4246])
            ("define-obsolete-function-alias" code nil nil [4248 4372])
            ("emacs-repository-version-git" function (:arguments ("dir")) nil [4374 4837])
            ("emacs-repository-get-version" function (:arguments ("dir" "_external")) nil [4839 5437])
            ("emacs-repository-branch" variable nil nil [5439 5653])
            ("emacs-repository-branch-git" function (:arguments ("dir")) nil [5655 6170])
            ("emacs-repository-get-branch" function (:arguments ("dir")) nil [6172 6715]))          
      :file "version.el.gz"
      :pointmax 6742
      :fsize 2297
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4b8c4c3e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("epg-config" include nil nil [929 950])
            ("rfc6068" include nil nil [951 969])
            ("cl-lib" include nil nil [989 1006])
            ("define-error" code nil nil [1009 1046])
            ("epg-user-id" variable nil nil [1063 1126])
            ("epg-user-id-alist" variable nil nil [1128 1203])
            ("epg-last-status" variable nil nil [1205 1233])
            ("epg-read-point" variable nil nil [1234 1261])
            ("epg-process-filter-running" variable nil nil [1262 1301])
            ("epg-pending-status-list" variable nil nil [1302 1338])
            ("epg-key-id" variable nil nil [1339 1362])
            ("epg-context" variable nil nil [1363 1387])
            ("epg-debug-buffer" variable nil nil [1388 1417])
            ("epg-agent-file" variable nil nil [1418 1445])
            ("epg-agent-mtime" variable nil nil [1446 1474])
            ("epg-cipher-algorithm-alist" variable
               (:constant-flag t
                :default-value '((0 . "NONE") (1 . "IDEA") (2 . "3DES") (3 . "CAST5") (4 . "BLOWFISH") (7 . "AES") (8 . "AES192") (9 . "AES256") (10 . "TWOFISH") (11 . "CAMELLIA128") (12 . "CAMELLIA256") (110 . "DUMMY")))
                nil [1522 1795])
            ("epg-pubkey-algorithm-alist" variable
               (:constant-flag t
                :default-value '((1 . "RSA") (2 . "RSA_E") (3 . "RSA_S") (16 . "ELGAMAL_E") (17 . "DSA") (18 . "ECDH") (19 . "ECDSA") (20 . "ELGAMAL") (22 . "EDDSA") (110 . "PRIVATE10")))
                nil [1832 2063])
            ("epg-digest-algorithm-alist" variable
               (:constant-flag t
                :default-value '((1 . "MD5") (2 . "SHA1") (3 . "RIPEMD160") (8 . "SHA256") (9 . "SHA384") (10 . "SHA512") (11 . "SHA224") (110 . "PRIVATE10")))
                nil [2100 2295])
            ("epg-compress-algorithm-alist" variable
               (:constant-flag t
                :default-value '((0 . "NONE") (1 . "ZIP") (2 . "ZLIB") (3 . "BZIP2") (110 . "PRIVATE10")))
                nil [2332 2464])
            ("epg-invalid-recipients-reason-alist" variable
               (:constant-flag t
                :default-value '((0 . "No specific reason given") (1 . "Not Found") (2 . "Ambiguous specification") (3 . "Wrong key usage") (4 . "Key revoked") (5 . "Key expired") (6 . "No CRL known") (7 . "CRL too old") (8 . "Policy mismatch") (9 . "Not a secret key") (10 . "Key not trusted")))
                nil [2466 2819])
            ("epg-delete-problem-reason-alist" variable
               (:constant-flag t
                :default-value '((1 . "No such key") (2 . "Must delete secret key first") (3 . "Ambiguous specification")))
                nil [2821 2965])
            ("epg-import-ok-reason-alist" variable
               (:constant-flag t
                :default-value '((0 . "Not actually changed") (1 . "Entirely new key") (2 . "New user IDs") (4 . "New signatures") (8 . "New subkeys") (16 . "Contains private key")))
                nil [2967 3177])
            ("epg-import-problem-reason-alist" variable
               (:constant-flag t
                :default-value '((0 . "No specific reason given") (1 . "Invalid Certificate") (2 . "Issuer Certificate missing") (3 . "Certificate Chain too long") (4 . "Error storing certificate")))
                nil [3179 3407])
            ("epg-no-data-reason-alist" variable
               (:constant-flag t
                :default-value '((1 . "No armored data") (2 . "Expected a packet but did not find one") (3 . "Invalid packet found, this may indicate a non OpenPGP message") (4 . "Signature expected but not found")))
                nil [3409 3643])
            ("epg-unexpected-reason-alist" variable (:constant-flag t) nil [3645 3687])
            ("epg-key-validity-alist" variable (:default-value '((111 . unknown) (105 . invalid) (100 . disabled) (114 . revoked) (101 . expired) (45 . none) (113 . undefined) (110 . never) (109 . marginal) (102 . full) (117 . ultimate))) nil [3689 3927])
            ("epg-key-capability-alist" variable (:default-value '((101 . encrypt) (115 . sign) (99 . certify) (97 . authentication) (68 . disabled))) nil [3929 4063])
            ("epg-new-signature-type-alist" variable (:default-value '((68 . detached) (67 . clear) (83 . normal))) nil [4065 4158])
            ("epg-dn-type-alist" variable (:default-value '(("1.2.840.113549.1.9.1" . "EMail") ("2.5.4.12" . "T") ("2.5.4.42" . "GN") ("2.5.4.4" . "SN") ("0.2.262.1.10.7.20" . "NameDistinguisher") ("2.5.4.16" . "ADDR") ("2.5.4.15" . "BC") ("2.5.4.13" . "D") ("2.5.4.17" . "PostalCode") ("2.5.4.65" . "Pseudo") ("2.5.4.5" . "SerialNumber"))) nil [4160 4510])
            ("epg-prompt-alist" variable nil nil [4512 4541])
            ("epg-data" type
               (:members ("file" "string")
                :type "struct")
                nil [4573 4873])
            ("declare-function" code nil nil [4895 4955])
            ("epg-context" type
               (:members ("protocol" "program" "home-directory" "armor" "textmode" "include-certs" "cipher-algorithm" "digest-algorithm" "compress-algorithm" "passphrase-callback" "progress-callback" "edit-callback" "signers" "sender" "sig-notations" "process" "output-file" "result" "operation" "pinentry-mode" "error-output" "error-buffer")
                :type "struct")
                nil [4957 6046])
            ("epg-make-context" function (:arguments ("protocol" "armor" "textmode" "include-certs" "cipher-algorithm" "digest-algorithm" "compress-algorithm")) nil [6148 6508])
            ("epg-context-set-armor" function (:arguments ("context" "armor")) nil [6510 6695])
            ("epg-context-set-textmode" function (:arguments ("context" "textmode")) nil [6697 6894])
            ("epg-context-set-passphrase-callback" function (:arguments ("context" "passphrase-callback")) nil [6896 7733])
            ("epg-context-set-progress-callback" function (:arguments ("context" "progress-callback")) nil [7735 8330])
            ("epg-context-set-signers" function (:arguments ("context" "signers")) nil [8332 8503])
            ("epg-signature" type
               (:members ("status" "key-id" "validity" "fingerprint" "creation-time" "expiration-time" "pubkey-algorithm" "digest-algorithm" "class" "version" "notations")
                :type "struct")
                nil [8525 8886])
            ("epg-new-signature" type
               (:members ("type" "pubkey-algorithm" "digest-algorithm" "class" "creation-time" "fingerprint")
                :type "struct")
                nil [8888 9378])
            ("epg-key" type
               (:members ("owner-trust" "sub-key-list" "user-id-list")
                :type "struct")
                nil [9380 9627])
            ("epg-sub-key" type
               (:members ("validity" "capability" "secret-p" "algorithm" "length" "id" "creation-time" "expiration-time" "fingerprint")
                :type "struct")
                nil [9629 10017])
            ("epg-user-id" type
               (:members ("validity" "string" "signature-list")
                :type "struct")
                nil [10019 10240])
            ("epg-key-signature" type
               (:members ("validity" "pubkey-algorithm" "key-id" "creation-time" "expiration-time" "user-id" "class" "exportable-p")
                :type "struct")
                nil [10242 10680])
            ("epg-sig-notation" type
               (:members ("name" "value" "human-readable" "critical")
                :type "struct")
                nil [10682 10962])
            ("epg-import-status" type
               (:members ("fingerprint" "reason" "new" "user-id" "signature" "sub-key" "secret")
                :type "struct")
                nil [10964 11305])
            ("epg-import-result" type
               (:members ("considered" "no-user-id" "imported" "imported-rsa" "unchanged" "new-user-ids" "new-sub-keys" "new-signatures" "new-revocations" "secret-read" "secret-imported" "secret-unchanged" "not-imported" "imports")
                :type "struct")
                nil [11307 12013])
            ("epg-context-result-for" function (:arguments ("context" "name")) nil [12030 12179])
            ("epg-context-set-result-for" function (:arguments ("context" "name" "value")) nil [12181 12486])
            ("epg-signature-to-string" function (:arguments ("signature")) nil [12488 13912])
            ("epg-verify-result-to-string" function (:arguments ("verify-result")) nil [13914 14078])
            ("epg-new-signature-to-string" function (:arguments ("new-signature")) nil [14080 14715])
            ("epg-import-result-to-string" function (:arguments ("import-result")) nil [14717 16898])
            ("epg-error-to-string" function (:arguments ("error")) nil [16900 18491])
            ("epg-errors-to-string" function (:arguments ("errors")) nil [18493 18578])
            ("epg--start" function (:arguments ("context" "args")) nil [18580 22701])
            ("epg--process-filter" function (:arguments ("process" "input")) nil [22703 24331])
            ("epg-read-output" function (:arguments ("context")) nil [24333 24705])
            ("epg-wait-for-status" function (:arguments ("context" "status-list")) nil [24707 25237])
            ("epg-wait-for-completion" function (:arguments ("context")) nil [25239 26101])
            ("epg-reset" function (:arguments ("context")) nil [26103 26535])
            ("epg-delete-output-file" function (:arguments ("context")) nil [26537 26771])
            ("epg--status-USERID_HINT" function (:arguments ("_context" "string")) nil [26773 27219])
            ("epg--status-NEED_PASSPHRASE" function (:arguments ("_context" "string")) nil [27221 27368])
            ("epg--status-NEED_PASSPHRASE_SYM" function (:arguments ("_context" "_string")) nil [27370 27453])
            ("epg--status-NEED_PASSPHRASE_PIN" function (:arguments ("_context" "_string")) nil [27455 27538])
            ("epg--status-GET_HIDDEN" function (:arguments ("context" "string")) nil [27540 29210])
            ("epg--prompt-GET_BOOL" function (:arguments ("_context" "string")) nil [29212 29367])
            ("epg--prompt-GET_BOOL-untrusted_key.override" function (:arguments ("_context" "_string")) nil [29369 29902])
            ("epg--status-GET_BOOL" function (:arguments ("context" "string")) nil [29926 30449])
            ("epg--status-GET_LINE" function (:arguments ("context" "string")) nil [30451 30931])
            ("epg--status-*SIG" function (:arguments ("context" "status" "string")) nil [30933 31761])
            ("epg--status-GOODSIG" function (:arguments ("context" "string")) nil [31763 31849])
            ("epg--status-EXPSIG" function (:arguments ("context" "string")) nil [31851 31939])
            ("epg--status-EXPKEYSIG" function (:arguments ("context" "string")) nil [31941 32036])
            ("epg--status-REVKEYSIG" function (:arguments ("context" "string")) nil [32038 32133])
            ("epg--status-BADSIG" function (:arguments ("context" "string")) nil [32135 32219])
            ("epg--status-NO_PUBKEY" function (:arguments ("context" "string")) nil [32221 32703])
            ("epg--status-NO_SECKEY" function (:arguments ("context" "string")) nil [32705 32877])
            ("defalias" code nil nil [32879 32932])
            ("epg--status-ERRSIG" function (:arguments ("context" "string")) nil [32934 33791])
            ("epg--status-VALIDSIG" function (:arguments ("context" "string")) nil [33793 34950])
            ("epg--status-TRUST_UNDEFINED" function (:arguments ("context" "_string")) nil [34952 35203])
            ("epg--status-TRUST_NEVER" function (:arguments ("context" "_string")) nil [35205 35448])
            ("epg--status-TRUST_MARGINAL" function (:arguments ("context" "_string")) nil [35450 35699])
            ("epg--status-TRUST_FULLY" function (:arguments ("context" "_string")) nil [35701 35943])
            ("epg--status-TRUST_ULTIMATE" function (:arguments ("context" "_string")) nil [35945 36194])
            ("epg--status-NOTATION_NAME" function (:arguments ("context" "string")) nil [36196 36440])
            ("epg--status-NOTATION_DATA" function (:arguments ("context" "string")) nil [36442 36709])
            ("epg--status-POLICY_URL" function (:arguments ("context" "string")) nil [36711 36952])
            ("epg--status-PROGRESS" function (:arguments ("context" "string")) nil [36954 37434])
            ("epg--status-ENC_TO" function (:arguments ("context" "string")) nil [37436 37816])
            ("epg--status-DECRYPTION_FAILED" function (:arguments ("context" "_string")) nil [37818 37933])
            ("epg--status-DECRYPTION_OKAY" function (:arguments ("context" "_string")) nil [37935 38046])
            ("epg--status-NODATA" function (:arguments ("context" "string")) nil [38048 38234])
            ("epg--status-UNEXPECTED" function (:arguments ("context" "string")) nil [38236 38429])
            ("epg--status-KEYEXPIRED" function (:arguments ("context" "string")) nil [38431 38657])
            ("epg--status-KEYREVOKED" function (:arguments ("context" "_string")) nil [38659 38819])
            ("epg--status-BADARMOR" function (:arguments ("context" "_string")) nil [38821 38981])
            ("epg--status-INV_RECP" function (:arguments ("context" "string")) nil [38983 39345])
            ("epg--status-INV_SGNR" function (:arguments ("context" "string")) nil [39347 39706])
            ("epg--status-NO_RECP" function (:arguments ("context" "_string")) nil [39708 39871])
            ("epg--status-NO_SGNR" function (:arguments ("context" "_string")) nil [39873 40033])
            ("epg--status-DELETE_PROBLEM" function (:arguments ("context" "string")) nil [40035 40321])
            ("epg--status-SIG_CREATED" function (:arguments ("context" "string")) nil [40323 40961])
            ("epg--status-KEY_CREATED" function (:arguments ("context" "string")) nil [40963 41310])
            ("epg--status-KEY_NOT_CREATED" function (:arguments ("context" "_string")) nil [41312 41485])
            ("epg--status-IMPORTED" function (:arguments ("_context" "string")) nil [41487 41930])
            ("epg--status-IMPORT_OK" function (:arguments ("context" "string")) nil [41932 42505])
            ("epg--status-IMPORT_PROBLEM" function (:arguments ("context" "string")) nil [42507 42889])
            ("epg--status-IMPORT_RES" function (:arguments ("context" "string")) nil [42891 44006])
            ("epg--list-keys-1" function (:arguments ("context" "name" "mode")) nil [44023 45392])
            ("epg--make-sub-key-1" function (:arguments ("line")) nil [45394 45887])
            ("epg-list-keys" function (:arguments ("context" "name" "mode")) nil [45911 49100])
            ("epg--filter-revoked-keys" function (:arguments ("keys")) nil [49102 49750])
            ("epg--args-from-sig-notations" function (:arguments ("notations")) nil [49752 50467])
            ("epg-cancel" function (:arguments ("context")) nil [50469 50879])
            ("epg-start-decrypt" function (:arguments ("context" "cipher")) nil [50881 51698])
            ("epg--check-error-for-decrypt" function (:arguments ("context")) nil [51700 52095])
            ("epg-decrypt-file" function (:arguments ("context" "cipher" "plain")) nil [52097 52654])
            ("epg-decrypt-string" function (:arguments ("context" "cipher")) nil [52656 53319])
            ("epg-start-verify" function (:arguments ("context" "signature" "signed-text")) nil [53321 55034])
            ("epg-verify-file" function (:arguments ("context" "signature" "signed-text" "plain")) nil [55036 56331])
            ("epg-verify-string" function (:arguments ("context" "signature" "signed-text")) nil [56333 57797])
            ("epg-start-sign" function (:arguments ("context" "plain" "mode")) nil [57799 59961])
            ("epg-sign-file" function (:arguments ("context" "plain" "signature" "mode")) nil [59963 60889])
            ("epg-sign-string" function (:arguments ("context" "plain" "mode")) nil [60891 62155])
            ("epg-start-encrypt" function (:arguments ("context" "plain" "recipients" "sign" "always-trust")) nil [62157 64372])
            ("epg-encrypt-file" function (:arguments ("context" "plain" "recipients" "cipher" "sign" "always-trust")) nil [64374 65353])
            ("epg-encrypt-string" function (:arguments ("context" "plain" "recipients" "sign" "always-trust")) nil [65355 66550])
            ("epg-start-export-keys" function (:arguments ("context" "keys")) nil [66552 67195])
            ("epg-export-keys-to-file" function (:arguments ("context" "keys" "file")) nil [67197 67773])
            ("epg-export-keys-to-string" function (:arguments ("context" "keys")) nil [67775 67921])
            ("epg-start-import-keys" function (:arguments ("context" "keys")) nil [67923 68851])
            ("epg--import-keys-1" function (:arguments ("context" "keys")) nil [68853 69197])
            ("epg-import-keys-from-file" function (:arguments ("context" "keys")) nil [69199 69340])
            ("epg-import-keys-from-string" function (:arguments ("context" "keys")) nil [69342 69489])
            ("epg-start-receive-keys" function (:arguments ("context" "key-id-list")) nil [69491 70035])
            ("epg-receive-keys" function (:arguments ("context" "keys")) nil [70037 70434])
            ("defalias" code nil nil [70436 70493])
            ("epg-start-delete-keys" function (:arguments ("context" "keys" "allow-secret")) nil [70495 71181])
            ("epg-delete-keys" function (:arguments ("context" "keys" "allow-secret")) nil [71183 71595])
            ("epg-start-generate-key" function (:arguments ("context" "parameters")) nil [71597 72703])
            ("epg-generate-key-from-file" function (:arguments ("context" "parameters")) nil [72705 73182])
            ("epg-generate-key-from-string" function (:arguments ("context" "parameters")) nil [73184 73667])
            ("epg-start-edit-key" function (:arguments ("context" "key" "edit-callback" "handback")) nil [73669 74451])
            ("epg-edit-key" function (:arguments ("context" "key" "edit-callback" "handback")) nil [74453 74858])
            ("epg--decode-percent-escape" function (:arguments ("string")) nil [74882 75389])
            ("epg--decode-percent-escape-as-utf-8" function (:arguments ("string")) nil [75391 75565])
            ("epg--decode-hexstring" function (:arguments ("string")) nil [75567 75914])
            ("epg--decode-quotedstring" function (:arguments ("string")) nil [75916 76378])
            ("epg-dn-from-string" function (:arguments ("string")) nil [76380 78138])
            ("epg-decode-dn" function (:arguments ("alist")) nil [78140 78579])
            ("epg" package nil nil [78581 78595]))          
      :file "epg.el.gz"
      :pointmax 78618
      :fsize 15099
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 1006 . 1007) (symbol 971 . 988) (open-paren 970 . 971)))
    (semanticdb-table "semanticdb-table-4a822f24"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("epg" include nil nil [890 904])
            ("subr-x" include nil nil [924 941])
            ("derived" include nil nil [943 961])
            ("epa" customgroup (:user-visible-flag t) nil [976 1089])
            ("epa-replace-original-text" variable (:default-value 'ask) nil [1091 1521])
            ("epa-popup-info-window" variable (:default-value t) nil [1523 1669])
            ("epa-info-window-height" variable (:default-value 5) nil [1671 1794])
            ("epa-mail-aliases" variable nil nil [1796 2401])
            ("epa-faces" customgroup (:user-visible-flag t) nil [2414 2494])
            ("epa-validity-high" variable
               (:default-value '((default :weight bold) (((class color) (background dark)) :foreground "PaleTurquoise"))
                :type "face")
                nil [2496 2683])
            ("epa-validity-medium" variable
               (:default-value '((default :slant italic) (((class color) (background dark)) :foreground "PaleTurquoise"))
                :type "face")
                nil [2685 2877])
            ("epa-validity-low" variable
               (:default-value '((t :slant italic))
                :type "face")
                nil [2879 2995])
            ("epa-validity-disabled" variable
               (:default-value '((t :slant italic :inverse-video t))
                :type "face")
                nil [2997 3140])
            ("epa-string" variable
               (:default-value '((((class color) (background dark)) :foreground "lightyellow") (((class color) (background light)) :foreground "blue4"))
                :type "face")
                nil [3142 3361])
            ("epa-mark" variable
               (:default-value '((default :weight bold) (((class color) (background dark)) :foreground "orange") (((class color) (background light)) :foreground "red"))
                :type "face")
                nil [3363 3598])
            ("epa-field-name" variable
               (:default-value '((default :weight bold) (((class color) (background dark)) :foreground "PaleTurquoise"))
                :type "face")
                nil [3600 3804])
            ("epa-field-body" variable
               (:default-value '((default :slant italic) (((class color) (background dark)) :foreground "turquoise"))
                :type "face")
                nil [3806 4007])
            ("epa-validity-face-alist" variable (:default-value '((unknown . epa-validity-disabled) (invalid . epa-validity-disabled) (disabled . epa-validity-disabled) (revoked . epa-validity-disabled) (expired . epa-validity-disabled) (none . epa-validity-low) (undefined . epa-validity-low) (never . epa-validity-low) (marginal . epa-validity-medium) (full . epa-validity-high) (ultimate . epa-validity-high))) nil [4009 4557])
            ("epa-pubkey-algorithm-letter-alist" variable
               (:constant-flag t
                :default-value '((1 . 82) (2 . 114) (3 . 115) (16 . 103) (17 . 68) (20 . 71)))
                nil [4574 4700])
            ("epa-protocol" variable (:default-value 'OpenPGP) nil [4702 4869])
            ("epa-armor" variable nil nil [4871 5022])
            ("epa-textmode" variable nil nil [5024 5176])
            ("epa-keys-buffer" variable nil nil [5178 5206])
            ("epa-key-buffer-alist" variable nil nil [5207 5240])
            ("epa-key" variable nil nil [5241 5261])
            ("epa-list-keys-arguments" variable nil nil [5262 5298])
            ("epa-info-buffer" variable nil nil [5299 5327])
            ("epa-error-buffer" variable nil nil [5328 5357])
            ("epa-suppress-error-buffer" variable nil nil [5358 5396])
            ("epa-last-coding-system-specified" variable nil nil [5397 5442])
            ("defvar-keymap" code nil nil [5444 6081])
            ("easy-menu-define" code nil nil [6083 6841])
            ("defvar-keymap" code nil nil [6843 6899])
            ("epa-exit-buffer-function" variable (:default-value nil) nil [6901 6948])
            ("epa--button-key-text" function (:arguments ("key")) nil [6950 8007])
            ("define-derived-mode" code nil nil [8020 8307])
            ("define-derived-mode" code nil nil [8309 8524])
            ("define-derived-mode" code nil nil [8526 8693])
            ("epa-mark-key" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8722 9199])
            ("epa-unmark-key" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9201 9357])
            ("epa-exit-buffer" function (:user-visible-flag t) nil [9374 9515])
            ("epa--insert-keys" function (:arguments ("keys")) nil [9545 9785])
            ("epa--list-keys" function (:arguments ("name" "secret" "doc")) nil [9787 11233])
            ("epa-list-keys" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [11250 11903])
            ("epa-list-secret-keys" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [11920 12270])
            ("epa--key-list-revert-buffer" function (:arguments ("_ignore-auto" "_noconfirm")) nil [12272 12394])
            ("epa--marked-keys" function nil nil [12396 12785])
            ("epa--select-keys" function (:arguments ("prompt" "keys")) nil [12787 14046])
            ("epa-select-keys" function (:arguments ("context" "prompt" "names" "secret")) nil [14063 14491])
            ("epa-show-key" function (:user-visible-flag t) nil [14511 14733])
            ("epa--show-key" function (:arguments ("key")) nil [14735 17148])
            ("epa-display-info" function (:arguments ("info")) nil [17182 18023])
            ("epa-display-error" function (:arguments ("context")) nil [18025 19467])
            ("epa-passphrase-callback-function" function (:arguments ("context" "key-id" "handback")) nil [19469 20053])
            ("epa-progress-callback-function" function (:arguments ("_context" "what" "_char" "current" "total" "handback")) nil [20055 20590])
            ("epa-read-file-name" function (:arguments ("input")) nil [20592 20906])
            ("epa-decrypt-file" function
               (:user-visible-flag t
                :arguments ("decrypt-file" "plain-file"))
                nil [20923 22191])
            ("epa-verify-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [22208 23113])
            ("epa--read-signature-type" function nil nil [23115 23639])
            ("epa-sign-file" function
               (:user-visible-flag t
                :arguments ("file" "signers" "mode"))
                nil [23656 25185])
            ("epa-encrypt-file" function
               (:user-visible-flag t
                :arguments ("file" "recipients"))
                nil [25202 26372])
            ("epa-decrypt-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "make-buffer-function"))
                nil [26389 28718])
            ("epa--find-coding-system-for-mime-charset" function (:arguments ("mime-charset")) nil [28720 29050])
            ("epa-decrypt-armor-in-region" function (:arguments ("start" "end")) nil [29067 30079])
            ("epa-verify-region" function (:arguments ("start" "end")) nil [30096 32106])
            ("epa-verify-cleartext-in-region" function (:arguments ("start" "end")) nil [32123 33108])
            ("epa-sign-region" function (:arguments ("start" "end" "signers" "mode")) nil [33125 35574])
            ("define-obsolete-function-alias" code nil nil [35576 35652])
            ("epa-encrypt-region" function (:arguments ("start" "end" "recipients" "sign" "signers")) nil [35669 38151])
            ("epa-delete-keys" function
               (:user-visible-flag t
                :arguments ("keys" "allow-secret"))
                nil [38189 38760])
            ("epa-import-keys" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [38777 39562])
            ("epa-import-keys-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [39579 40125])
            ("epa-import-armor-in-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [40142 40772])
            ("epa-export-keys" function
               (:user-visible-flag t
                :arguments ("keys" "file"))
                nil [40789 41751])
            ("epa-insert-keys" function
               (:user-visible-flag t
                :arguments ("keys"))
                nil [41768 42314])
            ("epa" package nil nil [42316 42330]))          
      :file "epa.el.gz"
      :pointmax 42353
      :fsize 9490
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 941 . 942) (symbol 906 . 923) (open-paren 905 . 906)))
    (semanticdb-table "semanticdb-table-4f742476"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("image" include nil nil [1287 1303])
            ("ezimage-use-images" variable (:default-value (and (display-images-p) (image-type-available-p 'xpm))) nil [1305 1526])
            ("defezimage" function (:arguments ("variable" "imagespec" "docstring")) nil [1567 1884])
            ("ezimage-directory" variable
               (:default-value ((:type xpm :file "ezimage/dir.xpm" :ascent center))
                :type "image")
                nil [1886 2009])
            ("ezimage-directory-plus" variable
               (:default-value ((:type xpm :file "ezimage/dir-plus.xpm" :ascent center))
                :type "image")
                nil [2011 2164])
            ("ezimage-directory-minus" variable
               (:default-value ((:type xpm :file "ezimage/dir-minus.xpm" :ascent center))
                :type "image")
                nil [2166 2319])
            ("ezimage-page-plus" variable
               (:default-value ((:type xpm :file "ezimage/page-plus.xpm" :ascent center))
                :type "image")
                nil [2321 2464])
            ("ezimage-page-minus" variable
               (:default-value ((:type xpm :file "ezimage/page-minus.xpm" :ascent center))
                :type "image")
                nil [2466 2609])
            ("ezimage-page" variable
               (:default-value ((:type xpm :file "ezimage/page.xpm" :ascent center))
                :type "image")
                nil [2611 2749])
            ("ezimage-tag" variable
               (:default-value ((:type xpm :file "ezimage/tag.xpm" :ascent center))
                :type "image")
                nil [2751 2855])
            ("ezimage-tag-plus" variable
               (:default-value ((:type xpm :file "ezimage/tag-plus.xpm" :ascent center))
                :type "image")
                nil [2857 2984])
            ("ezimage-tag-minus" variable
               (:default-value ((:type xpm :file "ezimage/tag-minus.xpm" :ascent center))
                :type "image")
                nil [2986 3107])
            ("ezimage-tag-gt" variable
               (:default-value ((:type xpm :file "ezimage/tag-gt.xpm" :ascent center))
                :type "image")
                nil [3109 3245])
            ("ezimage-tag-v" variable
               (:default-value ((:type xpm :file "ezimage/tag-v.xpm" :ascent center))
                :type "image")
                nil [3247 3379])
            ("ezimage-tag-type" variable
               (:default-value ((:type xpm :file "ezimage/tag-type.xpm" :ascent center))
                :type "image")
                nil [3381 3522])
            ("ezimage-box-plus" variable
               (:default-value ((:type xpm :file "ezimage/box-plus.xpm" :ascent center))
                :type "image")
                nil [3524 3640])
            ("ezimage-box-minus" variable
               (:default-value ((:type xpm :file "ezimage/box-minus.xpm" :ascent center))
                :type "image")
                nil [3642 3759])
            ("ezimage-mail" variable
               (:default-value ((:type xpm :file "ezimage/mail.xpm" :ascent center))
                :type "image")
                nil [3761 3868])
            ("ezimage-checkout" variable
               (:default-value ((:type xpm :file "ezimage/checkmark.xpm" :ascent center))
                :type "image")
                nil [3870 4028])
            ("ezimage-object" variable
               (:default-value ((:type xpm :file "ezimage/bits.xpm" :ascent center))
                :type "image")
                nil [4030 4159])
            ("ezimage-object-out-of-date" variable
               (:default-value ((:type xpm :file "ezimage/bitsbang.xpm" :ascent center))
                :type "image")
                nil [4161 4335])
            ("ezimage-label" variable
               (:default-value ((:type xpm :file "ezimage/label.xpm" :ascent center))
                :type "image")
                nil [4337 4453])
            ("ezimage-lock" variable
               (:default-value ((:type xpm :file "ezimage/lock.xpm" :ascent center))
                :type "image")
                nil [4455 4590])
            ("ezimage-unlock" variable
               (:default-value ((:type xpm :file "ezimage/unlock.xpm" :ascent center))
                :type "image")
                nil [4592 4708])
            ("ezimage-key" variable
               (:default-value ((:type xpm :file "ezimage/key.xpm" :ascent center))
                :type "image")
                nil [4710 4809])
            ("ezimage-document-tag" variable
               (:default-value ((:type xpm :file "ezimage/doc.xpm" :ascent center))
                :type "image")
                nil [4811 4951])
            ("ezimage-document-plus" variable
               (:default-value ((:type xpm :file "ezimage/doc-plus.xpm" :ascent center))
                :type "image")
                nil [4953 5096])
            ("ezimage-document-minus" variable
               (:default-value ((:type xpm :file "ezimage/doc-minus.xpm" :ascent center))
                :type "image")
                nil [5098 5241])
            ("ezimage-info-tag" variable
               (:default-value ((:type xpm :file "ezimage/info.xpm" :ascent center))
                :type "image")
                nil [5243 5383])
            ("ezimage-expand-image-button-alist" variable (:default-value '(("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("%" . ezimage-lock))) nil [5385 5977])
            ("ezimage-insert-image-button-maybe" function (:arguments ("start" "length" "string")) nil [5979 6595])
            ("ezimage-image-over-string" function (:arguments ("string" "alist")) nil [6597 6977])
            ("ezimage-insert-over-text" function (:arguments ("image" "start" "end" "string")) nil [6979 7381])
            ("ezimage-image-association-dump" function (:user-visible-flag t) nil [7383 8185])
            ("ezimage-image-dump" function (:user-visible-flag t) nil [8187 8901])
            ("ezimage-all-images" function nil nil [8903 9187])
            ("ezimage" package nil nil [9189 9207]))          
      :file "ezimage.el.gz"
      :pointmax 9234
      :fsize 2628
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4a8d31be"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("epa-file" customgroup (:user-visible-flag t) nil [929 1048])
            ("epa-file--file-name-regexp-set" function (:arguments ("variable" "value")) nil [1050 1218])
            ("epa-file-name-regexp" variable (:default-value (purecopy "\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'")) nil [1220 1665])
            ("epa-file-inhibit-auto-save" variable (:default-value t) nil [1667 1811])
            ("epa-file-encrypt-to" variable nil nil [1813 1934])
            ("put" code nil nil [1936 2271])
            ("put" code nil nil [2273 2318])
            ("epa-file-handler" variable (:default-value (cons epa-file-name-regexp 'epa-file-handler)) nil [2320 2393])
            ("epa-file-auto-mode-alist-entry" variable (:default-value (list epa-file-name-regexp nil 'epa-file)) nil [2395 2478])
            ("epa-file-name-regexp-update" function (:user-visible-flag t) nil [2480 2827])
            ("epa-file-find-file-hook" function nil nil [2829 3006])
            ("epa-file-name-p" function (:arguments ("file")) nil [3008 3157])
            ("with-eval-after-load" code nil nil [3159 3263])
            ("define-minor-mode" code nil nil [3265 4200])
            ("put" code nil nil [4202 4239])
            ("put" code nil nil [4240 4312])
            ("epa-hook" package nil nil [4314 4333]))          
      :file "epa-hook.el.gz"
      :pointmax 4361
      :fsize 1729
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-bc17b10e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [4167 4184])
            ("pcomplete" include nil nil [4185 4205])
            ("files-x" include nil nil [4225 4243])
            ("subr-x" include nil nil [4278 4295])
            ("cl-lib" include nil nil [4315 4332])
            ("shell" customgroup (:user-visible-flag t) nil [4375 4475])
            ("shell-directories" customgroup (:user-visible-flag t) nil [4477 4562])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [4579 4965])
            ("shell-prompt-pattern" variable (:default-value "^[^#$%>
]*[#$%>] *") nil [4967 5607])
            ("shell-completion-fignore" variable nil nil [5609 5957])
            ("shell-delimiter-argument-list" variable (:default-value '(124 38 60 62 40 41 59)) nil [5959 6327])
            ("shell-file-name-chars" variable (:default-value (if (memq system-type '(ms-dos windows-nt cygwin)) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [6329 6704])
            ("shell-file-name-quote-list" variable (:default-value (if (memq system-type '(ms-dos windows-nt)) nil (append shell-delimiter-argument-list '(32 36 42 33 34 39 96 35 92)))) nil [6706 7122])
            ("shell-dynamic-complete-functions" variable (:default-value '(comint-c-a-p-replace-by-expanded-history shell-environment-variable-completion shell-command-completion shell-c-a-p-replace-by-expanded-directory pcomplete-completions-at-point shell-filename-completion comint-filename-completion)) nil [7124 7615])
            ("shell-command-regexp" variable (:default-value "[^;&|
]+") nil [7617 7816])
            ("shell-command-separator-regexp" variable (:default-value "[;&|
 	]*") nil [7818 8029])
            ("shell-completion-execonly" variable (:default-value t) nil [8031 8292])
            ("shell-popd-regexp" variable (:default-value "popd") nil [8294 8432])
            ("shell-pushd-regexp" variable (:default-value "pushd") nil [8434 8575])
            ("shell-pushd-tohome" variable nil nil [8577 8772])
            ("shell-pushd-dextract" variable nil nil [8774 8967])
            ("shell-pushd-dunique" variable nil nil [8969 9162])
            ("shell-cd-regexp" variable (:default-value "cd") nil [9164 9296])
            ("shell-chdrive-regexp" variable (:default-value (if (memq system-type '(ms-dos windows-nt)) "[]a-zA-Z^_`[\\]:" nil)) nil [9298 9608])
            ("shell-dirtrack-verbose" variable (:default-value t) nil [9610 9931])
            ("explicit-shell-file-name" variable nil nil [9933 10267])
            ("explicit-csh-args" variable (:default-value (if (eq system-type 'hpux) '("-i" "-T") '("-i"))) nil [10411 10784])
            ("explicit-bash-args" variable (:default-value '("--noediting" "-i")) nil [10942 11298])
            ("shell-input-autoexpand" variable (:default-value 'history) nil [11300 11923])
            ("shell-fontify-input-enable" variable (:default-value t) nil [11925 12222])
            ("shell-indirect-setup-hook" variable nil nil [12224 12800])
            ("shell-highlight-undef-enable" variable nil nil [12802 13128])
            ("shell-dirstack" variable nil nil [13130 13279])
            ("defvaralias" code nil nil [13281 13332])
            ("shell-dirtrackp" variable (:default-value t) nil [13334 13427])
            ("shell-last-dir" variable nil nil [13429 13513])
            ("shell-dirstack-query" variable nil nil [13515 13608])
            ("shell-has-auto-cd" variable nil nil [13610 13971])
            ("shell-kill-buffer-on-exit" variable nil nil [13973 14125])
            ("shell-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" 'shell-forward-command) (define-key map "" 'shell-backward-command) (define-key map "	" 'completion-at-point) (define-key map (kbd "M-RET") 'shell-resync-dirs) (define-key map "\277" 'comint-dynamic-list-filename-completions) (define-key map (kbd "C-x n d") 'shell-narrow-to-prompt) (define-key map [menu-bar completion] (cons "Complete" (copy-keymap (lookup-key comint-mode-map [menu-bar completion])))) (define-key-after (lookup-key map [menu-bar completion]) [complete-env-variable] '("Complete Env. Variable Name" . shell-dynamic-complete-environment-variable) 'complete-file) (define-key-after (lookup-key map [menu-bar completion]) [expand-directory] '("Expand Directory Reference" . shell-replace-by-expanded-directory) 'complete-expand) map)) nil [14127 15057])
            ("defvar-keymap" code nil nil [15059 15239])
            ("shell-mode-hook" variable (:default-value 'nil) nil [15241 15339])
            ("shell-font-lock-keywords" variable (:default-value '(("[ 	]\\([+-][^ 	
]+\\)" 1 font-lock-comment-face) ("^[^ 	
]+:.*" . font-lock-string-face) ("^\\[[1-9][0-9]*\\]" . font-lock-string-face))) nil [15341 15585])
            ("defvar-local" code nil nil [15587 15663])
            ("put" code nil nil [15664 15707])
            ("shell--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [15731 17645])
            ("shell--unquote-argument" function (:arguments ("str")) nil [17647 17730])
            ("shell--requote-argument" function (:arguments ("upos" "qstr")) nil [17731 17911])
            ("shell--parse-pcomplete-arguments" function nil nil [17913 19500])
            ("split-string-shell-command" function (:arguments ("string")) nil [19517 19874])
            ("shell-command-completion-function" function nil nil [19876 20330])
            ("shell-completion-vars" function nil nil [20332 22032])
            ("put" code nil nil [22034 22072])
            ("sh-shell-file" variable nil nil [22074 22096])
            ("define-derived-mode" code nil nil [22098 29358])
            ("shell-indirect-setup-hook" function nil nil [29360 29474])
            ("shell-apply-ansi-color" function (:arguments ("beg" "end" "face")) nil [29476 29714])
            ("shell-reapply-ansi-color" function nil nil [29716 30213])
            ("shell-filter-ctrl-a-ctrl-b" function (:arguments ("string")) nil [30215 30843])
            ("shell-filter-ring-bell" function (:arguments ("string")) nil [30845 31058])
            ("shell-write-history-on-exit" function (:arguments ("process" "event")) nil [31060 31657])
            ("shell" function
               (:user-visible-flag t
                :arguments ("buffer" "file-name"))
                nil [31674 37265])
            ("shell-directory-tracker" function (:arguments ("str")) nil [39310 42007])
            ("shell-unquote-argument" function (:arguments ("string")) nil [42009 42877])
            ("shell-process-popd" function (:arguments ("arg")) nil [42892 43437])
            ("shell-prefixed-directory-name" function (:arguments ("dir")) nil [43507 43855])
            ("shell-process-cd" function (:arguments ("arg")) nil [43869 44191])
            ("shell-process-pushd" function (:arguments ("arg")) nil [44213 45685])
            ("shell-extract-num" function (:arguments ("str")) nil [45751 45858])
            ("define-minor-mode" code nil nil [45860 46441])
            ("shell-cd" function (:arguments ("dir")) nil [46443 46614])
            ("shell-resync-dirs" function (:user-visible-flag t) nil [46616 48333])
            ("defalias" code nil nil [48367 48402])
            ("shell-dirstack-message" function nil nil [48680 49530])
            ("shell-snarf-envar" function (:arguments ("var")) nil [49582 50325])
            ("shell-copy-environment-variable" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [50327 50853])
            ("shell-forward-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50855 51227])
            ("shell-backward-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51230 51829])
            ("shell-dynamic-complete-command" function (:user-visible-flag t) nil [51831 52575])
            ("shell-command-completion" function nil nil [52577 52935])
            ("shell--command-completion-data" function nil nil [52937 55209])
            ("shell-dynamic-complete-filename" function (:user-visible-flag t) nil [55449 55730])
            ("shell-filename-completion" function nil nil [55732 56094])
            ("shell-match-partial-variable" function nil nil [56096 56499])
            ("shell-dynamic-complete-environment-variable" function (:user-visible-flag t) nil [56501 57481])
            ("shell-environment-variable-completion" function nil nil [57484 58685])
            ("shell-c-a-p-replace-by-expanded-directory" function nil nil [58688 59871])
            ("shell-replace-by-expanded-directory" function (:user-visible-flag t) nil [59873 60204])
            ("shell--prompt-begin-position" function nil nil [60206 61044])
            ("shell--prompt-end-position" function nil nil [61046 61188])
            ("shell-narrow-to-prompt" function (:user-visible-flag t) nil [61190 61640])
            ("shell-eval-command" function (:arguments ("command")) nil [61642 62905])
            ("shell-highlight-undef-aliases" variable nil nil [63133 63297])
            ("shell-highlight-undef-defined-face" variable
               (:default-value '((t :inherit 'font-lock-function-name-face))
                :type "face")
                nil [63299 63468])
            ("shell-highlight-undef-undefined-face" variable
               (:default-value '((t :inherit 'font-lock-warning-face))
                :type "face")
                nil [63470 63639])
            ("shell-highlight-undef-alias-face" variable
               (:default-value '((t :inherit 'font-lock-variable-name-face))
                :type "face")
                nil [63641 63806])
            ("shell-highlight-undef-remote-file-name-inhibit-cache" variable nil nil [63808 64550])
            ("shell--highlight-undef-exec-cache" variable nil nil [64552 64981])
            ("shell--highlight-undef-face" variable (:default-value 'shell-highlight-undef-defined-face) nil [64983 65055])
            ("shell-highlight-undef-keywords" variable (:default-value `((,#'shell-highlight-undef-matcher 6 shell--highlight-undef-face))) nil [65057 65166])
            ("defvar-local" code nil nil [65168 65230])
            ("shell--highlight-undef-executable-find" function (:arguments ("command")) nil [65232 66988])
            ("shell-highlight-undef-matcher" function (:arguments ("end")) nil [66990 68638])
            ("defvar-local" code nil nil [68640 68763])
            ("declare-function" code nil nil [68765 68833])
            ("sh-leading-keywords" variable nil nil [68834 68862])
            ("sh-other-keywords" variable nil nil [68863 68889])
            ("define-minor-mode" code nil nil [68891 71266])
            ("shell-highlight-undef-mode-restart" function nil nil [71268 71681])
            ("shell" package nil nil [71683 71699]))          
      :file "shell.el.gz"
      :pointmax 71724
      :fsize 20236
      :lastmodtime '(25521 36547 0 0)
      :unmatched-syntax '((close-paren 4332 . 4333) (symbol 4297 . 4314) (open-paren 4296 . 4297) (close-paren 4243 . 4244) (symbol 4207 . 4224) (open-paren 4206 . 4207)))
    (semanticdb-table "semanticdb-table-4b4df112"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("Electric-command-loop" function (:arguments ("return-tag" "prompt" "inhibit-quitting" "loop-function" "loop-state")) nil [3003 5178])
            ("Electric-pop-up-window" function (:arguments ("buffer" "max-height")) nil [5783 6620])
            ("electricity" customgroup (:user-visible-flag t) nil [6642 6732])
            ("electric--after-char-pos" function nil nil [6734 7341])
            ("electric-indent-chars" variable (:default-value '(10)) nil [7584 7679])
            ("electric-indent-functions" variable nil nil [7681 7989])
            ("defvar-local" code nil nil [7991 8221])
            ("electric-indent-functions-without-reindent" variable (:default-value '(indent-relative indent-to-left-margin indent-relative-maybe indent-relative-first-indent-point py-indent-line coffee-indent-line org-indent-line yaml-indent-line haskell-indentation-indent-line haskell-indent-cycle haskell-simple-indent yaml-indent-line)) nil [8223 8813])
            ("electric-indent-post-self-insert-function" function nil nil [8815 12319])
            ("electric-indent-just-newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12321 12509])
            ("define-key" code nil nil [12526 12591])
            ("electric-newline-and-maybe-indent" function (:user-visible-flag t) nil [12607 13160])
            ("define-minor-mode" code nil nil [13177 14370])
            ("define-minor-mode" code nil nil [14387 14960])
            ("electric-layout-rules" variable nil nil [15017 16033])
            ("electric-layout-allow-duplicate-newlines" variable nil nil [16067 16176])
            ("electric-layout-post-self-insert-function" function nil nil [16178 16310])
            ("electric-pair-open-newline-between-pairs" variable nil nil [16312 16361])
            ("electric-layout-post-self-insert-function-1" function nil nil [16405 20267])
            ("define-minor-mode" code nil nil [20284 20769])
            ("define-minor-mode" code nil nil [20786 21347])
            ("electric-quote-comment" variable (:default-value t) nil [21372 21542])
            ("electric-quote-string" variable nil nil [21544 21714])
            ("electric-quote-chars" variable (:default-value '(8216 8217 8220 8221)) nil [21716 22208])
            ("electric-quote-paragraph" variable (:default-value t) nil [22210 22381])
            ("electric-quote-context-sensitive" variable nil nil [22383 22772])
            ("electric-quote-replace-double" variable nil nil [22774 23107])
            ("electric-quote-replace-consecutive" variable (:default-value t) nil [23109 23497])
            ("electric-quote-inhibit-functions" variable nil nil [23499 24030])
            ("electric-pair-text-pairs" variable nil nil [24032 24065])
            ("electric-quote-post-self-insert-function" function nil nil [24067 27577])
            ("define-minor-mode" code nil nil [27594 28745])
            ("define-minor-mode" code nil nil [28762 29325])
            ("electric" package nil nil [29327 29346]))          
      :file "electric.el.gz"
      :pointmax 29374
      :fsize 8257
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4f7423f6"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("electric" include nil nil [885 904])
            ("cl-lib" include nil nil [924 941])
            ("electric-pair-pairs" variable (:default-value `((34 . 34) (,(nth 0 electric-quote-chars) \, (nth 1 electric-quote-chars)) (,(nth 2 electric-quote-chars) \, (nth 3 electric-quote-chars)))) nil [967 1490])
            ("electric-pair-text-pairs" variable (:default-value `((34 . 34) (,(nth 0 electric-quote-chars) \, (nth 1 electric-quote-chars)) (,(nth 2 electric-quote-chars) \, (nth 3 electric-quote-chars)))) nil [1492 2013])
            ("electric-pair-skip-self" variable (:default-value nil) nil [2015 2786])
            ("electric-pair-inhibit-predicate" variable (:default-value nil) nil [2788 3343])
            ("electric-pair-preserve-balance" variable (:default-value t) nil [3345 3807])
            ("electric-pair-delete-adjacent-pairs" variable (:default-value t) nil [3809 4177])
            ("electric-pair-open-newline-between-pairs" variable (:default-value t) nil [4179 4555])
            ("electric-pair-skip-whitespace" variable (:default-value t) nil [4557 5204])
            ("electric-pair-skip-whitespace-chars" variable (:default-value (list 9 32 10)) nil [5206 5562])
            ("defvar-local" code nil nil [5564 5887])
            ("electric-pair--skip-whitespace" function nil nil [5889 6238])
            ("electric-pair-text-syntax-table" variable (:default-value prog-mode-syntax-table) nil [6240 6533])
            ("electric-pair-conservative-inhibit" function (:arguments ("char")) nil [6535 6942])
            ("electric-pair--with-syntax" function (:arguments ("string-or-comment" "body")) nil [6944 7327])
            ("electric-pair--with-syntax-1" function (:arguments ("string-or-comment" "body-fun")) nil [7329 8073])
            ("electric-pair-syntax-info" function (:arguments ("command-event")) nil [8075 9725])
            ("electric-pair--insert" function (:arguments ("char")) nil [9727 10319])
            ("electric-pair--syntax-ppss" function (:arguments ("pos" "where")) nil [10321 11469])
            ("electric-pair--balance-info" function (:arguments ("direction" "string-or-comment")) nil [11965 16233])
            ("electric-pair-string-bound-function" variable (:default-value 'point-max) nil [16235 16565])
            ("electric-pair--unbalanced-strings-p" function (:arguments ("char")) nil [16567 17385])
            ("electric-pair--inside-string-p" function (:arguments ("char")) nil [17387 17822])
            ("electric-pair--save-literal-point-excursion" function (:arguments ("body")) nil [17824 18287])
            ("electric-pair-inhibit-if-helps-balance" function (:arguments ("char")) nil [18289 19458])
            ("electric-pair-skip-if-helps-balance" function (:arguments ("char")) nil [19460 20479])
            ("electric-pair-default-skip-self" function (:arguments ("char")) nil [20481 20620])
            ("electric-pair-default-inhibit" function (:arguments ("char")) nil [20622 20802])
            ("electric-pair-post-self-insert-function" function nil nil [20804 25139])
            ("electric-pair-open-newline-between-pairs-psif" function nil nil [25141 25819])
            ("electric-pair-will-use-region" function nil nil [25821 25983])
            ("electric-pair-delete-pair" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [25985 26273])
            ("electric-pair-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" `(menu-item "" electric-pair-delete-pair :filter ,(lambda (cmd) (let* ((prev (char-before)) (next (char-after)) (syntax-info (and prev (electric-pair-syntax-info prev))) (syntax (car syntax-info)) (pair (cadr syntax-info))) (and next pair (memq syntax '(40 34 36)) (eq pair next) (if (functionp electric-pair-delete-adjacent-pairs) (funcall electric-pair-delete-adjacent-pairs) electric-pair-delete-adjacent-pairs) cmd))))) map)) nil [26275 27122])
            ("define-minor-mode" code nil nil [27139 28678])
            ("define-minor-mode" code nil nil [28695 29236])
            ("elec-pair" package nil nil [29238 29258]))          
      :file "elec-pair.el.gz"
      :pointmax 29287
      :fsize 7780
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 941 . 942) (symbol 906 . 923) (open-paren 905 . 906)))
    (semanticdb-table "semanticdb-table-4f7424c0"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [960 977])
            ("epg-package-name" variable
               (:constant-flag t
                :default-value "epg")
                nil [980 1039])
            ("epg-version-number" variable
               (:constant-flag t
                :default-value "1.0.0")
                nil [1041 1114])
            ("define-obsolete-variable-alias" code nil nil [1116 1207])
            ("epg" customgroup (:user-visible-flag t) nil [1222 1355])
            ("epg-gpg-program" variable (:default-value (if (executable-find "gpg2") "gpg2" "gpg")) nil [1357 2065])
            ("epg-gpgsm-program" variable (:default-value "gpgsm") nil [2067 2269])
            ("epg-gpgconf-program" variable (:default-value "gpgconf") nil [2271 2376])
            ("epg-gpg-home-directory" variable nil nil [2378 2550])
            ("epg-passphrase-coding-system" variable nil nil [2552 2675])
            ("define-obsolete-variable-alias" code nil nil [2677 2756])
            ("epg-pinentry-mode" variable nil nil [2870 3426])
            ("epg-debug" variable nil nil [3428 3583])
            ("epg-gpg-minimum-version" variable
               (:constant-flag t
                :default-value "1.4.3")
                nil [3600 3642])
            ("epg-gpg2-minimum-version" variable
               (:constant-flag t
                :default-value "2.1.6")
                nil [3643 3686])
            ("epg-config--program-alist" variable
               (:constant-flag t
                :default-value `((OpenPGP epg-gpg-program ("gpg2" \, epg-gpg2-minimum-version) ("gpg" (,epg-gpg-minimum-version . "2.0") ,epg-gpg2-minimum-version)) (CMS epg-gpgsm-program ("gpgsm" . "2.0.4"))))
                nil [3688 4305])
            ("epg-config--configuration-constructor-alist" variable
               (:constant-flag t
                :default-value '((OpenPGP . epg-config--make-gpg-configuration) (CMS . epg-config--make-gpgsm-configuration)))
                nil [4307 4710])
            ("epg--configurations" variable nil nil [4733 4765])
            ("epg-find-configuration" function (:arguments ("protocol" "no-cache" "program-alist")) nil [4782 6935])
            ("epg-config--make-gpg-configuration" function (:arguments ("program")) nil [7003 8751])
            ("epg-config--make-gpgsm-configuration" function (:arguments ("program")) nil [8821 9257])
            ("epg-configuration" function nil nil [9274 9487])
            ("epg-check-configuration" function (:arguments ("config" "req-versions")) nil [9504 10514])
            ("epg-required-version-p" function (:arguments ("protocol" "required-version")) nil [10516 10961])
            ("epg-expand-group" function (:arguments ("config" "group")) nil [10978 11191])
            ("epg-config" package nil nil [11193 11214]))          
      :file "epg-config.el.gz"
      :pointmax 11244
      :fsize 3941
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 977 . 978) (symbol 942 . 959) (open-paren 941 . 942)))
    (semanticdb-table "semanticdb-table-4687548e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pp" include nil nil [1238 1251])
            ("tabulated-list" include nil nil [1252 1277])
            ("text-property-search" include nil nil [1278 1309])
            ("fringe" include nil nil [1310 1327])
            ("cl-lib" include nil nil [1372 1389])
            ("bookmark" customgroup (:user-visible-flag t) nil [1696 1788])
            ("bookmark-use-annotations" variable nil nil [1791 1922])
            ("bookmark-save-flag" variable (:default-value t) nil [1925 2758])
            ("define-obsolete-variable-alias" code nil nil [2761 2852])
            ("define-obsolete-variable-alias" code nil nil [2853 2930])
            ("bookmark-default-file" variable (:default-value (locate-user-emacs-file "bookmarks" ".emacs.bmk")) nil [2931 3247])
            ("bookmark-watch-bookmark-file" variable (:default-value t) nil [3249 3924])
            ("bookmark-version-control" variable (:default-value 'nospecial) nil [3926 4481])
            ("bookmark-completion-ignore-case" variable (:default-value t) nil [4484 4610])
            ("bookmark-sort-flag" variable (:default-value t) nil [4613 5169])
            ("bookmark-menu-confirm-deletion" variable nil nil [5172 5373])
            ("bookmark-automatically-show-annotations" variable (:default-value t) nil [5375 5508])
            ("bookmark-bmenu-buffer" variable
               (:constant-flag t
                :default-value "*Bookmark List*")
                nil [5510 5603])
            ("bookmark-bmenu-use-header-line" variable (:default-value t) nil [5605 5757])
            ("make-obsolete-variable" code nil nil [5758 5839])
            ("bookmark-bmenu-inline-header-height" variable
               (:constant-flag t
                :default-value 2)
                nil [5841 6020])
            ("make-obsolete-variable" code nil nil [6021 6107])
            ("bookmark-bmenu-marks-width" variable
               (:constant-flag t
                :default-value 2)
                nil [6109 6259])
            ("bookmark-bmenu-file-column" variable (:default-value 30) nil [6261 6498])
            ("bookmark-bmenu-toggle-filenames" variable (:default-value t) nil [6501 6676])
            ("bookmark-menu-bookmark" variable
               (:default-value '((t (:weight bold)))
                :type "face")
                nil [6678 6802])
            ("bookmark-menu-length" variable (:default-value 70) nil [6804 6920])
            ("bookmark-search-delay" variable (:default-value 0.2) nil [6975 7090])
            ("define-fringe-bitmap" code nil nil [7092 7242])
            ("define-obsolete-variable-alias" code nil nil [7244 7333])
            ("bookmark-fringe-mark" variable (:default-value 'bookmark-mark) nil [7335 7575])
            ("bookmark-face" variable
               (:default-value '((((class grayscale) (background light)) :foreground "DimGray") (((class grayscale) (background dark)) :foreground "LightGray") (((class color) (background light)) :foreground "DarkOrange1" :distant-foreground "DarkOrange3") (((class color) (background dark)) :foreground "DarkOrange1" :distant-foreground "Orange1"))
                :type "face")
                nil [7577 8036])
            ("defvar-keymap" code nil nil [8507 9361])
            ("bookmark-alist" variable nil nil [9455 11226])
            ("define-obsolete-variable-alias" code nil nil [11228 11325])
            ("bookmark-bookmarks-timestamp" variable nil nil [11326 11564])
            ("bookmark-file-coding-system" variable nil nil [11566 11671])
            ("defvar-local" code nil nil [11673 11860])
            ("bookmark-alist-modification-count" variable nil nil [11863 11977])
            ("bookmark-search-size" variable (:default-value 16) nil [11980 12085])
            ("bookmark-current-buffer" variable nil nil [12088 12339])
            ("bookmark-yank-point" variable nil nil [12342 12492])
            ("bookmark-quit-flag" variable nil nil [12495 12587])
            ("make-obsolete-variable" code nil nil [12588 12656])
            ("with-buffer-modified-unmodified" function (:arguments ("body")) nil [12693 13018])
            ("bookmark-name-from-full-record" function (:arguments ("bookmark-record")) nil [13202 13383])
            ("bookmark-type-from-full-record" function (:arguments ("bookmark-record")) nil [13385 13891])
            ("bookmark-all-names" function nil nil [13893 14066])
            ("bookmark-get-bookmark" function (:arguments ("bookmark-name-or-record" "noerror")) nil [14069 14855])
            ("bookmark-get-bookmark-record" function (:arguments ("bookmark-name-or-record")) nil [14858 15332])
            ("bookmark-set-name" function (:arguments ("bookmark-name-or-record" "newname")) nil [15335 15512])
            ("bookmark-prop-get" function (:arguments ("bookmark-name-or-record" "prop")) nil [15514 15718])
            ("bookmark-prop-set" function (:arguments ("bookmark-name-or-record" "prop" "val")) nil [15720 16085])
            ("bookmark-get-annotation" function (:arguments ("bookmark-name-or-record")) nil [16087 16272])
            ("bookmark-set-annotation" function (:arguments ("bookmark-name-or-record" "ann")) nil [16274 16455])
            ("bookmark-get-filename" function (:arguments ("bookmark-name-or-record")) nil [16458 16642])
            ("bookmark-set-filename" function (:arguments ("bookmark-name-or-record" "filename")) nil [16645 16840])
            ("bookmark-get-position" function (:arguments ("bookmark-name-or-record")) nil [16843 17036])
            ("bookmark-set-position" function (:arguments ("bookmark-name-or-record" "position")) nil [17039 17243])
            ("bookmark-get-front-context-string" function (:arguments ("bookmark-name-or-record")) nil [17246 17461])
            ("bookmark-set-front-context-string" function (:arguments ("bookmark-name-or-record" "string")) nil [17464 17684])
            ("bookmark-get-rear-context-string" function (:arguments ("bookmark-name-or-record")) nil [17687 17899])
            ("bookmark-set-rear-context-string" function (:arguments ("bookmark-name-or-record" "string")) nil [17902 18119])
            ("bookmark-get-handler" function (:arguments ("bookmark-name-or-record")) nil [18122 18308])
            ("bookmark-get-last-modified" function (:arguments ("bookmark-name-or-record")) nil [18311 18506])
            ("bookmark-update-last-modified" function (:arguments ("bookmark-name-or-record")) nil [18509 18730])
            ("bookmark-history" variable nil nil [18733 18807])
            ("bookmark--set-fringe-mark" function nil nil [18809 19238])
            ("bookmark--remove-fringe-mark" function (:arguments ("bm")) nil [19240 20086])
            ("bookmark-maybe-sort-alist" function nil nil [20088 21021])
            ("bookmark-completing-read" function (:arguments ("prompt" "default")) nil [21023 22194])
            ("bookmark-maybe-historicize-string" function (:arguments ("string")) nil [22197 22618])
            ("bookmark-make-record-function" variable (:default-value 'bookmark-make-record-default) nil [22620 23611])
            ("bookmark-inhibit-context-functions" variable nil nil [23613 23923])
            ("bookmark-make-record" function nil nil [23925 25029])
            ("bookmark-store" function (:arguments ("name" "alist" "no-overwrite")) nil [25031 26601])
            ("bookmark-make-record-default" function (:arguments ("no-file" "no-context" "posn")) nil [26603 28206])
            ("bookmark-file-format-version" variable
               (:constant-flag t
                :default-value 1)
                nil [31056 31197])
            ("bookmark-end-of-version-stamp-marker" variable
               (:constant-flag t
                :default-value "-*- End Of Bookmark File Format Version Stamp -*-
")
                nil [31200 31374])
            ("bookmark-alist-from-buffer" function nil nil [31377 31923])
            ("bookmark-upgrade-version-0-alist" function (:arguments ("old-list")) nil [31925 32681])
            ("bookmark-upgrade-file-format-from-0" function nil nil [32684 33546])
            ("bookmark-grok-file-format-version" function nil nil [33549 34053])
            ("bookmark-maybe-upgrade-file-format" function nil nil [34056 34803])
            ("bookmark-insert-file-format-version-stamp" function (:arguments ("coding")) nil [34806 35480])
            ("define-obsolete-function-alias" code nil nil [35528 35600])
            ("defvar-keymap" code nil nil [35602 35711])
            ("bookmark-set-internal" function (:arguments ("prompt" "name" "overwrite-or-push")) nil [35713 38948])
            ("bookmark-set" function
               (:user-visible-flag t
                :arguments ("name" "no-overwrite"))
                nil [38966 40450])
            ("bookmark-set-no-overwrite" function
               (:user-visible-flag t
                :arguments ("name" "push-bookmark"))
                nil [40467 41961])
            ("bookmark-kill-line" function (:arguments ("newline-too")) nil [41964 42279])
            ("defvar-local" code nil nil [42281 42392])
            ("defvar-local" code nil nil [42394 42532])
            ("bookmark-default-annotation-text" function (:arguments ("bookmark-name")) nil [42534 43264])
            ("bookmark-edit-annotation-text-func" variable (:default-value 'bookmark-default-annotation-text) nil [43267 43476])
            ("defvar-keymap" code nil nil [43478 43701])
            ("bookmark-insert-annotation" function (:arguments ("bookmark-name-or-record")) nil [43703 44182])
            ("define-derived-mode" code nil nil [44184 44530])
            ("bookmark-edit-annotation--maybe-display-list" function (:arguments ("body")) nil [44532 45032])
            ("bookmark-edit-annotation-cancel" function (:user-visible-flag t) nil [45034 45247])
            ("bookmark-edit-annotation-confirm" function (:user-visible-flag t) nil [45249 46182])
            ("bookmark-edit-annotation" function (:arguments ("bookmark-name-or-record" "from-bookmark-list")) nil [46185 46745])
            ("bookmark-buffer-name" function nil nil [46748 47587])
            ("bookmark-yank-word" function (:user-visible-flag t) nil [47590 48137])
            ("bookmark-buffer-file-name" function nil nil [48139 48710])
            ("bookmark--watch-already-asked-mtime" variable nil nil [48712 48816])
            ("bookmark--watch-file-already-queried-p" function (:arguments ("new-mtime")) nil [48818 49098])
            ("bookmark-maybe-load-default-file" function nil nil [49100 50104])
            ("bookmark-after-jump-hook" variable nil nil [50108 50254])
            ("bookmark--jump-via" function (:arguments ("bookmark-name-or-record" "display-function")) nil [50256 51538])
            ("bookmark-jump" function
               (:user-visible-flag t
                :arguments ("bookmark" "display-func"))
                nil [51556 52926])
            ("bookmark-jump-other-window" function
               (:user-visible-flag t
                :arguments ("bookmark"))
                nil [52944 53271])
            ("bookmark-jump-other-frame" function
               (:user-visible-flag t
                :arguments ("bookmark"))
                nil [53288 53624])
            ("bookmark-handle-bookmark" function (:arguments ("bookmark-name-or-record")) nil [53626 56232])
            ("define-error" code nil nil [56234 56284])
            ("define-error" code nil nil [56285 56395])
            ("bookmark-default-handler" function (:arguments ("bmk-record")) nil [56397 58008])
            ("bookmark-relocate" function
               (:user-visible-flag t
                :arguments ("bookmark-name"))
                nil [58025 59392])
            ("bookmark-insert-location" function
               (:user-visible-flag t
                :arguments ("bookmark-name" "no-history"))
                nil [59409 59838])
            ("defalias" code nil nil [59855 59908])
            ("bookmark-location" function (:arguments ("bookmark-name-or-record")) nil [59910 60478])
            ("bookmark-rename" function
               (:user-visible-flag t
                :arguments ("old-name" "new-name"))
                nil [60495 62097])
            ("bookmark-insert" function
               (:user-visible-flag t
                :arguments ("bookmark-name"))
                nil [62115 62879])
            ("bookmark-delete" function
               (:user-visible-flag t
                :arguments ("bookmark-name" "batch"))
                nil [62897 64146])
            ("bookmark-delete-all" function
               (:user-visible-flag t
                :arguments ("no-confirm"))
                nil [64164 65202])
            ("bookmark-time-to-save-p" function (:arguments ("final-time")) nil [65205 65780])
            ("bookmark-write" function nil nil [65798 66016])
            ("bookmark-save" function
               (:user-visible-flag t
                :arguments ("parg" "file" "make-default"))
                nil [66034 67881])
            ("bookmark-write-file" function (:arguments ("file")) nil [67885 71219])
            ("bookmark-import-new-list" function (:arguments ("new-list")) nil [71222 71688])
            ("bookmark-maybe-rename" function (:arguments ("full-record" "names")) nil [71691 72278])
            ("bookmark-load" function
               (:user-visible-flag t
                :arguments ("file" "overwrite" "no-msg" "default"))
                nil [72296 75193])
            ("bookmark-bmenu-hidden-bookmarks" variable nil nil [75297 75340])
            ("defvar-keymap" code nil nil [75342 76631])
            ("easy-menu-define" code nil nil [76633 78188])
            ("put" code nil nil [78269 78316])
            ("bookmark-bmenu-surreptitiously-rebuild-list" function nil nil [78452 78715])
            ("bookmark-bmenu--revert" function nil nil [78717 81590])
            ("bookmark-bmenu-get-buffer" function nil nil [81607 81896])
            ("custom-add-choice" code nil nil [81898 82016])
            ("bookmark-bmenu-list" function (:user-visible-flag t) nil [82033 82539])
            ("defalias" code nil nil [82556 82603])
            ("defalias" code nil nil [82619 82666])
            ("define-obsolete-function-alias" code nil nil [82668 82765])
            ("define-derived-mode" code nil nil [82767 87091])
            ("bookmark-bmenu--name-predicate" function (:arguments ("a" "b")) nil [87094 87323])
            ("bookmark-bmenu--type-predicate" function (:arguments ("a" "b")) nil [87325 87570])
            ("bookmark-bmenu--file-predicate" function (:arguments ("a" "b")) nil [87572 87887])
            ("bookmark-bmenu-toggle-filenames" function
               (:user-visible-flag t
                :arguments ("show"))
                nil [87890 88351])
            ("bookmark-bmenu-show-filenames" function (:arguments ("_")) nil [88354 88570])
            ("bookmark-bmenu-hide-filenames" function (:arguments ("_")) nil [88573 88791])
            ("bookmark-bmenu-ensure-position" function nil nil [88794 89042])
            ("bookmark-bmenu-bookmark" function nil nil [89045 89337])
            ("bookmark-show-annotation" function (:arguments ("bookmark-name-or-record")) nil [89340 90042])
            ("bookmark-show-all-annotations" function nil nil [90045 91064])
            ("bookmark-bmenu-mark" function (:user-visible-flag t) nil [91067 91309])
            ("bookmark-bmenu-mark-all" function (:user-visible-flag t) nil [91312 91635])
            ("bookmark-bmenu-select" function (:user-visible-flag t) nil [91638 92712])
            ("bookmark-bmenu-any-marks" function nil nil [92715 93086])
            ("bookmark-bmenu-save" function (:user-visible-flag t) nil [93089 93462])
            ("bookmark-bmenu-load" function (:user-visible-flag t) nil [93465 94397])
            ("bookmark-bmenu-1-window" function (:user-visible-flag t) nil [94400 94629])
            ("bookmark-bmenu-2-window" function (:user-visible-flag t) nil [94632 95019])
            ("bookmark-bmenu-this-window" function (:user-visible-flag t) nil [95022 95191])
            ("bookmark-bmenu-other-window" function (:user-visible-flag t) nil [95194 95464])
            ("bookmark-bmenu-other-frame" function (:user-visible-flag t) nil [95467 95709])
            ("bookmark-bmenu-switch-other-window" function (:user-visible-flag t) nil [95711 96014])
            ("bookmark-bmenu-other-window-with-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [96016 96434])
            ("bookmark-bmenu-show-annotation" function (:user-visible-flag t) nil [96437 96673])
            ("bookmark-bmenu-show-all-annotations" function (:user-visible-flag t) nil [96676 96857])
            ("bookmark-bmenu-edit-annotation" function (:user-visible-flag t) nil [96860 97098])
            ("bookmark-bmenu-unmark" function
               (:user-visible-flag t
                :arguments ("backup"))
                nil [97101 97573])
            ("bookmark-bmenu-backup-unmark" function (:user-visible-flag t) nil [97576 97866])
            ("bookmark-bmenu-unmark-all" function (:user-visible-flag t) nil [97869 98152])
            ("bookmark-bmenu-delete" function (:user-visible-flag t) nil [98155 98457])
            ("bookmark-bmenu-delete-backwards" function (:user-visible-flag t) nil [98460 98773])
            ("bookmark-bmenu-delete-all" function (:user-visible-flag t) nil [98776 99254])
            ("bookmark-bmenu-execute-deletions" function (:user-visible-flag t) nil [99257 100452])
            ("bookmark-bmenu-rename" function (:user-visible-flag t) nil [100455 100713])
            ("bookmark-bmenu-locate" function (:user-visible-flag t) nil [100716 100931])
            ("bookmark-bmenu-relocate" function (:user-visible-flag t) nil [100933 101245])
            ("bookmark-bmenu-filter-alist-by-regexp" function (:arguments ("regexp")) nil [101274 101610])
            ("bookmark-bmenu-search" function (:user-visible-flag t) nil [101628 102538])
            ("bookmark-bmenu-goto-bookmark" function (:arguments ("name")) nil [102540 102777])
            ("bookmark-menu-popup-paned-menu" function (:arguments ("event" "name" "entries")) nil [102831 103851])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] '(menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)")) (bindings--define-key map [write] '(menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)")) (bindings--define-key map [save] '(menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks")) (bindings--define-key map [edit] '(menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks")) (bindings--define-key map [delete] '(menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list")) (bindings--define-key map [delete-all] '(menu-item "Delete all Bookmarks..." bookmark-delete-all :help "Delete all bookmarks from the bookmark list")) (bindings--define-key map [rename] '(menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark")) (bindings--define-key map [locate] '(menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark")) (bindings--define-key map [insert] '(menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark")) (bindings--define-key map [set] '(menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file.")) (bindings--define-key map [jump] '(menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)")) map)) nil [104142 105900])
            ("defalias" code nil nil [105917 105972])
            ("if" code nil nil [106034 106187])
            ("bookmark-load-hook" variable nil nil [106239 106328])
            ("make-obsolete-variable" code nil nil [106329 106442])
            ("bookmark-exit-hook" variable nil nil [106486 106548])
            ("bookmark-exit-hook-internal" function nil nil [106550 106777])
            ("unless" code nil nil [106779 106861])
            ("bookmark-unload-function" function nil nil [106863 107014])
            ("run-hooks" code nil nil [107017 107048])
            ("define-obsolete-function-alias" code nil nil [107067 107176])
            ("bookmark" package nil nil [107178 107197]))          
      :file "bookmark.el.gz"
      :pointmax 107225
      :fsize 27643
      :lastmodtime '(25787 53164 0 0)
      :unmatched-syntax '((close-paren 1389 . 1390) (symbol 1354 . 1371) (open-paren 1353 . 1354)))
    (semanticdb-table "semanticdb-table-4bad07e8"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2340 2357])
            ("seq" include nil nil [2358 2372])
            ("kmacro" include nil nil [2373 2390])
            ("edmacro-eight-bits" variable nil nil [2441 2648])
            ("defvar-keymap" code nil nil [2650 2749])
            ("edmacro-label" variable
               (:default-value '((default :inherit bold) (((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "DarkBlue") (((class color) (background light)) :foreground "blue") (t :inherit bold))
                :type "face")
                nil [2751 3111])
            ("edmacro-mode-font-lock-keywords" variable (:default-value `((,(rx bol (group (or "Command" "Key" "Macro") ":")) 0 'edmacro-label) (,(rx bol (group ";; Keyboard Macro Editor.  Press ") (group (*? any)) (group " to finish; press ")) (1 'font-lock-comment-face) (2 'help-key-binding) (3 'font-lock-comment-face) (,(rx (group (*? any)) (group " to cancel" (* any))) nil nil (1 'help-key-binding) (2 'font-lock-comment-face))) (,(rx (one-or-more ";") (zero-or-more any)) 0 'font-lock-comment-face))) nil [3113 3679])
            ("edmacro-store-hook" variable nil nil [3681 3708])
            ("edmacro-finish-hook" variable nil nil [3709 3737])
            ("edmacro-original-buffer" variable nil nil [3738 3770])
            ("edit-kbd-macro" function
               (:user-visible-flag t
                :arguments ("keys" "prefix" "finish-hook" "store-hook"))
                nil [3787 8098])
            ("edit-last-kbd-macro" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [8201 8365])
            ("edit-named-kbd-macro" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [8382 8581])
            ("read-kbd-macro" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [8598 9404])
            ("format-kbd-macro" function (:arguments ("macro" "verbose")) nil [9421 9900])
            ("edmacro-finish-edit" function nil nil [9943 13892])
            ("edmacro-insert-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [13894 14131])
            ("edmacro-mode" function (:user-visible-flag t) nil [14133 17362])
            ("put" code nil nil [17363 17403])
            ("edmacro-format-keys" function (:arguments ("macro" "verbose")) nil [17464 24809])
            ("edmacro-sanitize-for-string" function (:arguments ("seq")) nil [24811 25173])
            ("mouse-wheel-down-event" variable nil nil [25219 25250])
            ("mouse-wheel-up-event" variable nil nil [25251 25280])
            ("mouse-wheel-right-event" variable nil nil [25281 25313])
            ("mouse-wheel-left-event" variable nil nil [25314 25345])
            ("edmacro-fix-menu-commands" function (:arguments ("macro" "noerror")) nil [25347 26376])
            ("edmacro-parse-keys" function (:arguments ("string" "_need-vector")) nil [26426 26589])
            ("edmacro" package nil nil [26591 26609]))          
      :file "edmacro.el.gz"
      :pointmax 26636
      :fsize 8341
      :lastmodtime '(25603 26496 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4684dd4e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2133 2150])
            ("thingatpt" package nil nil [2151 2171])
            ("thing-at-point-provider-alist" variable nil nil [2173 2983])
            ("forward-thing" function (:arguments ("thing" "n")) nil [3019 3552])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [3590 5886])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [5903 7066])
            ("bounds-of-thing-at-mouse" function (:arguments ("event" "thing")) nil [7083 7424])
            ("thing-at-mouse" function (:arguments ("event" "thing" "no-properties")) nil [7441 7767])
            ("beginning-of-thing" function (:arguments ("thing")) nil [7793 8059])
            ("end-of-thing" function (:arguments ("thing")) nil [8061 8315])
            ("put" code nil nil [8448 8540])
            ("put" code nil nil [8555 8636])
            ("thing-at-point-bounds-of-string-at-point" function nil nil [8638 9330])
            ("in-string-p" function nil nil [9332 9586])
            ("thing-at-point--end-of-sexp" function nil nil [9599 9915])
            ("define-obsolete-function-alias" code nil nil [9917 10067])
            ("put" code nil nil [10069 10117])
            ("thing-at-point--beginning-of-sexp" function nil nil [10119 10400])
            ("define-obsolete-function-alias" code nil nil [10402 10564])
            ("put" code nil nil [10566 10626])
            ("put" code nil nil [10640 10704])
            ("thing-at-point--beginning-of-symbol" function nil nil [10706 10892])
            ("put" code nil nil [10905 10982])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [10984 11447])
            ("put" code nil nil [11460 11506])
            ("put" code nil nil [11507 11547])
            ("put" code nil nil [11548 11588])
            ("define-thing-chars" function (:arguments ("thing" "chars")) nil [11631 12083])
            ("thing-at-point-file-name-chars" variable (:default-value "-@~/[:alnum:]_.${}#%,:") nil [12100 12203])
            ("define-thing-chars" code nil nil [12205 12265])
            ("thing-at-point-file-at-point" function (:arguments ("_lax" "_bounds")) nil [12277 12543])
            ("put" code nil nil [12545 12615])
            ("thing-at-point-face-at-point" function (:arguments ("_lax" "_bounds")) nil [12627 12826])
            ("put" code nil nil [12828 12885])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [12897 13068])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [13070 13224])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [13226 13395])
            ("thing-at-point-uri-schemes" variable (:default-value '("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "magnet:" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "gemini://" "fax:" "man:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://")) nil [13397 14786])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [14788 15073])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [15075 15198])
            ("thing-at-point-newsgroup-heads" variable (:default-value '("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk")) nil [15200 15361])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [15363 15532])
            ("put" code nil nil [15534 15609])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [15611 16815])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [16817 17326])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "pt")) nil [17328 18782])
            ("put" code nil nil [18784 18839])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [18841 21269])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [21271 22251])
            ("put" code nil nil [22253 22303])
            ("put" code nil nil [22305 22367])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [22772 24293])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [24316 24561])
            ("put" code nil nil [24804 25097])
            ("put" code nil nil [25099 25337])
            ("put" code nil nil [25362 25419])
            ("put" code nil nil [25420 25483])
            ("put" code nil nil [25484 25617])
            ("thing-at-point-uuid-regexp" variable
               (:constant-flag t
                :default-value (rx bow (repeat 8 hex-digit) "-" (repeat 4 hex-digit) "-" (repeat 4 hex-digit) "-" (repeat 4 hex-digit) "-" (repeat 12 hex-digit) eow))
                nil [25628 25928])
            ("put" code nil nil [25930 26106])
            ("word-at-point" function (:arguments ("no-properties")) nil [26121 26260])
            ("sentence-at-point" function (:arguments ("no-properties")) nil [26262 26413])
            ("thing-at-point--read-from-whole-string" function (:arguments ("str")) nil [26415 26884])
            ("define-obsolete-function-alias" code nil nil [26886 27058])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [27060 27362])
            ("sexp-at-point" function nil nil [27379 27482])
            ("symbol-at-point" function nil nil [27498 27654])
            ("number-at-point" function nil nil [27671 28178])
            ("put" code nil nil [28180 28219])
            ("put" code nil nil [28220 28266])
            ("list-at-point" function (:arguments ("ignore-comment-or-string")) nil [28283 28651]))          
      :file "thingatpt.el.gz"
      :pointmax 28680
      :fsize 8862
      :lastmodtime '(25521 36547 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-466358da"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1430 1467])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1469 2272])
            ("setenv-history" variable nil nil [2320 2347])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2349 2451])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2453 4024])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4026 4408])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4410 5420])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5490 7894])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7896 8946])
            ("with-environment-variables" function (:arguments ("variables" "body")) nil [8963 9590])
            ("env" package nil nil [9592 9606]))          
      :file "env.el.gz"
      :pointmax 9629
      :fsize 3530
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4f050b2a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cus-face" include nil nil [4447 4466])
            ("wid-edit" include nil nil [4467 4486])
            ("icons" include nil nil [4487 4503])
            ("custom-versions-load-alist" variable nil nil [4505 4540])
            ("recentf-exclude" variable nil nil [4557 4581])
            ("condition-case" code nil nil [4602 4660])
            ("condition-case" code nil nil [4662 4721])
            ("put" code nil nil [4723 4767])
            ("put" code nil nil [4768 4816])
            ("custom-add-to-group" code nil nil [4817 4886])
            ("emacs" customgroup (:user-visible-flag t) nil [4915 5015])
            ("editing" customgroup (:user-visible-flag t) nil [5070 5143])
            ("convenience" customgroup (:user-visible-flag t) nil [5145 5232])
            ("files" customgroup (:user-visible-flag t) nil [5234 5301])
            ("wp" customgroup (:user-visible-flag t) nil [5303 5434])
            ("text" customgroup (:user-visible-flag t) nil [5436 5582])
            ("data" customgroup (:user-visible-flag t) nil [5584 5662])
            ("abbrev" customgroup (:user-visible-flag t) nil [5664 5783])
            ("matching" customgroup (:user-visible-flag t) nil [5785 5871])
            ("emulations" customgroup (:user-visible-flag t) nil [5873 5993])
            ("external" customgroup (:user-visible-flag t) nil [5995 6073])
            ("comm" customgroup (:user-visible-flag t) nil [6075 6193])
            ("processes" customgroup (:user-visible-flag t) nil [6195 6299])
            ("programming" customgroup (:user-visible-flag t) nil [6301 6391])
            ("languages" customgroup (:user-visible-flag t) nil [6393 6484])
            ("lisp" customgroup (:user-visible-flag t) nil [6486 6661])
            ("c" customgroup (:user-visible-flag t) nil [6663 6863])
            ("tools" customgroup (:user-visible-flag t) nil [6865 6930])
            ("applications" customgroup (:user-visible-flag t) nil [6932 7010])
            ("calendar" customgroup (:user-visible-flag t) nil [7012 7100])
            ("mail" customgroup (:user-visible-flag t) nil [7102 7184])
            ("news" customgroup (:user-visible-flag t) nil [7186 7301])
            ("games" customgroup (:user-visible-flag t) nil [7303 7379])
            ("development" customgroup (:user-visible-flag t) nil [7381 7469])
            ("docs" customgroup (:user-visible-flag t) nil [7471 7549])
            ("extensions" customgroup (:user-visible-flag t) nil [7551 7634])
            ("internal" customgroup (:user-visible-flag t) nil [7636 7736])
            ("maint" customgroup (:user-visible-flag t) nil [7738 7855])
            ("environment" customgroup (:user-visible-flag t) nil [7857 7939])
            ("hardware" customgroup (:user-visible-flag t) nil [7941 8043])
            ("terminals" customgroup (:user-visible-flag t) nil [8045 8123])
            ("unix" customgroup (:user-visible-flag t) nil [8125 8227])
            ("i18n" customgroup (:user-visible-flag t) nil [8229 8398])
            ("x" customgroup (:user-visible-flag t) nil [8400 8463])
            ("frames" customgroup (:user-visible-flag t) nil [8465 8557])
            ("tex" customgroup (:user-visible-flag t) nil [8559 8705])
            ("faces" customgroup (:user-visible-flag t) nil [8707 8775])
            ("help" customgroup (:user-visible-flag t) nil [8777 8848])
            ("multimedia" customgroup (:user-visible-flag t) nil [8850 8947])
            ("local" customgroup (:user-visible-flag t) nil [8949 9014])
            ("customize" customgroup
               (:user-visible-flag t
                :value '((widgets custom-group)))
                nil [9016 9145])
            ("custom-faces" customgroup (:user-visible-flag t) nil [9147 9239])
            ("custom-browse" customgroup (:user-visible-flag t) nil [9241 9340])
            ("custom-buffer" customgroup (:user-visible-flag t) nil [9342 9441])
            ("custom-menu" customgroup (:user-visible-flag t) nil [9443 9538])
            ("alloc" customgroup (:user-visible-flag t) nil [9540 9669])
            ("undo" customgroup (:user-visible-flag t) nil [9671 9779])
            ("mode-line" customgroup (:user-visible-flag t) nil [9781 9858])
            ("editing-basics" customgroup (:user-visible-flag t) nil [9860 9942])
            ("display" customgroup (:user-visible-flag t) nil [9944 10033])
            ("execute" customgroup (:user-visible-flag t) nil [10035 10110])
            ("installation" customgroup (:user-visible-flag t) nil [10112 10189])
            ("dired" customgroup (:user-visible-flag t) nil [10191 10256])
            ("limits" customgroup (:user-visible-flag t) nil [10258 10325])
            ("debug" customgroup (:user-visible-flag t) nil [10327 10397])
            ("keyboard" customgroup (:user-visible-flag t) nil [10399 10473])
            ("menu" customgroup (:user-visible-flag t) nil [10475 10542])
            ("auto-save" customgroup (:user-visible-flag t) nil [10544 10624])
            ("processes-basics" customgroup (:user-visible-flag t) nil [10626 10717])
            ("mule" customgroup (:user-visible-flag t) nil [10719 10790])
            ("windows" customgroup (:user-visible-flag t) nil [10792 10906])
            ("defvar-keymap" code nil nil [10933 11434])
            ("defvar-keymap" code nil nil [11436 11664])
            ("custom-field-keymap" variable (:default-value (let ((map (copy-keymap widget-field-keymap))) (define-key map "" 'Custom-set) (define-key map "" 'Custom-save) map)) nil [11666 11906])
            ("widget-put" code nil nil [11908 11983])
            ("custom-split-regexp-maybe" function (:arguments ("regexp")) nil [12001 12313])
            ("custom-variable-prompt" function nil nil [12315 12840])
            ("custom-actioned-widget" variable nil nil [12842 13186])
            ("custom-menu-filter" function (:arguments ("menu" "widget")) nil [13188 13739])
            ("custom-prefix-list" variable nil nil [13757 13855])
            ("custom-unlispify-menu-entries" variable (:default-value t) nil [13857 14004])
            ("custom-unlispify-remove-prefixes" variable nil nil [14006 14362])
            ("custom-unlispify-menu-entry" function (:arguments ("symbol" "no-suffix")) nil [14364 15558])
            ("custom-unlispify-tag-names" variable (:default-value t) nil [15560 15703])
            ("custom-unlispify-tag-name" function (:arguments ("symbol")) nil [15705 15897])
            ("custom-prefix-add" function (:arguments ("symbol" "prefixes")) nil [15899 16077])
            ("custom-guess-name-alist" variable (:default-value '(("-p\\'" boolean) ("-flag\\'" boolean) ("-hook\\'" hook) ("-face\\'" face) ("-file\\'" file) ("-function\\'" function) ("-functions\\'" (repeat function)) ("-list\\'" (repeat sexp)) ("-alist\\'" (alist :key-type sexp :value-type sexp)))) nil [16091 16813])
            ("custom-guess-doc-alist" variable (:default-value '(("\\`\\*?Non-nil " boolean))) nil [16815 17328])
            ("custom-guess-type" function (:arguments ("symbol")) nil [17330 18132])
            ("custom-browse-sort-alphabetically" variable nil nil [18163 18329])
            ("custom-browse-order-groups" variable nil nil [18331 18627])
            ("custom-browse-only-groups" variable nil nil [18629 18784])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [18801 18981])
            ("custom-buffer-order-groups" variable (:default-value 'last) nil [18983 19281])
            ("custom-menu-sort-alphabetically" variable nil nil [19298 19455])
            ("custom-menu-order-groups" variable (:default-value 'first) nil [19457 19752])
            ("custom-sort-items" function (:arguments ("items" "sort-alphabetically" "order-groups")) nil [19754 20853])
            ("custom-commands" variable (:default-value '((" Apply " Custom-set t "Apply settings (for the current session only)." "index" "Apply" (modified)) (" Apply and Save " Custom-save (or custom-file user-init-file) "Apply settings and save for future sessions." "save" "Save" (modified set changed rogue)) (" Undo Edits " Custom-reset-current t "Restore customization buffer to reflect existing settings." "refresh" "Undo" (modified)) (" Reset Customizations " Custom-reset-saved t "Undo any settings applied only for the current session." "undo" "Reset" (modified set changed rogue)) (" Erase Customizations " Custom-reset-standard (or custom-file user-init-file) "Un-customize settings in this and future sessions." "delete" "Uncustomize" (modified set changed rogue saved)) (" Toggle hiding all values " custom-toggle-hide-all-widgets t "Toggle hiding all values." "hide" "Hide" t) (" Help for Customize " Custom-help t "Get help for using Customize." "help" "Help" t) (" Exit " Custom-buffer-done t "Exit Customize." "exit" "Exit" t))) nil [21028 22987])
            ("defvar-local" code nil nil [22989 23326])
            ("Custom-help" function (:user-visible-flag t) nil [23328 23464])
            ("custom-reset-menu" variable nil nil [23466 23829])
            ("custom-reset-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [Custom-reset-current] '(menu-item "Undo Edits in Customization Buffer" Custom-reset-current :enable (seq-some (lambda (option) (eq (widget-get option :custom-state) 'modified)) custom-options))) (define-key-after map [Custom-reset-saved] '(menu-item "Revert This Session's Customizations" Custom-reset-saved :enable (seq-some (lambda (option) (memq (widget-get option :custom-state) '(modified set changed rogue))) custom-options))) (when (or custom-file user-init-file) (define-key-after map [Custom-reset-standard] '(menu-item "Erase Customizations" Custom-reset-standard :enable (seq-some (lambda (option) (memq (widget-get option :custom-state) '(modified set changed rogue saved))) custom-options)))) map)) nil [23831 25184])
            ("custom-options" variable nil nil [25186 25262])
            ("custom-command-apply" function (:arguments ("fun" "query" "strong-query")) nil [25264 25886])
            ("Custom-set" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [25888 26194])
            ("Custom-save" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [26196 26965])
            ("custom-reset" function (:arguments ("_widget" "event")) nil [26967 27290])
            ("Custom-reset-current" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [27292 27651])
            ("Custom-reset-saved" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [27653 28078])
            ("custom-reset-standard-variables-list" variable nil nil [28500 28549])
            ("custom-reset-standard-faces-list" variable nil nil [28550 28595])
            ("custom-reset-standard-save-and-update" function nil nil [28849 30017])
            ("Custom-reset-standard" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [30019 30934])
            ("custom-prompt-variable" function (:arguments ("prompt-var" "prompt-val" "comment")) nil [30964 32744])
            ("customize-set-value" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [32761 33531])
            ("customize-set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [33548 34795])
            ("setopt" function (:arguments ("pairs")) nil [34812 35515])
            ("setopt--set" function (:arguments ("variable" "value")) nil [35532 35933])
            ("customize-save-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [35950 37429])
            ("customize-push-and-save" function (:arguments ("list-var" "elts")) nil [37714 38380])
            ("customize" function (:user-visible-flag t) nil [38397 38709])
            ("customize-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [38726 39360])
            ("customize-read-group" function nil nil [39362 39768])
            ("customize-group" function
               (:user-visible-flag t
                :arguments ("group" "other-window"))
                nil [39785 40585])
            ("customize-group-other-window" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [40602 40807])
            ("defalias" code nil nil [40824 40872])
            ("customize-option" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [40889 41354])
            ("defalias" code nil nil [41371 41445])
            ("customize-option-other-window" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [41462 42008])
            ("customize-changed-options-previous-release" variable (:default-value "28.2") nil [42010 42133])
            ("customize-package-emacs-version-alist" variable nil nil [42211 43551])
            ("define-obsolete-function-alias" code nil nil [43568 43656])
            ("customize-changed" function
               (:user-visible-flag t
                :arguments ("since-version"))
                nil [43673 46090])
            ("customize-package-emacs-version" function (:arguments ("symbol" "package-version")) nil [46092 47359])
            ("customize-version-lessp" function (:arguments ("version1" "version2")) nil [47361 48220])
            ("customize-face" function
               (:user-visible-flag t
                :arguments ("face" "other-window"))
                nil [48237 49526])
            ("customize-face-other-window" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [49543 50006])
            ("custom-unsaved-options" function nil nil [50008 50613])
            ("defalias" code nil nil [50615 50666])
            ("customize-unsaved" function (:user-visible-flag t) nil [50683 50999])
            ("customize-rogue" function (:user-visible-flag t) nil [51016 51692])
            ("customize-saved" function (:user-visible-flag t) nil [51708 52307])
            ("declare-function" code nil nil [52309 52386])
            ("apropos-regexp" variable nil nil [52387 52410])
            ("customize-apropos" function
               (:user-visible-flag t
                :arguments ("pattern" "type"))
                nil [52427 54214])
            ("customize-apropos-options" function
               (:user-visible-flag t
                :arguments ("regexp" "_ignored"))
                nil [54231 54449])
            ("customize-apropos-faces" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [54466 54644])
            ("customize-apropos-groups" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [54661 54843])
            ("custom-prompt-customize-unsaved-options" function nil nil [54860 55219])
            ("custom-buffer-style" variable (:default-value 'links) nil [55234 55621])
            ("custom-buffer-done-kill" variable nil nil [55623 55779])
            ("custom-buffer-indent" variable (:default-value 3) nil [55781 55902])
            ("custom-get-fresh-buffer" function (:arguments ("name")) nil [55904 56818])
            ("custom-buffer-create" function (:arguments ("options" "name" "_description")) nil [56835 57421])
            ("custom-buffer-create-other-window" function (:arguments ("options" "name" "_description")) nil [57438 58000])
            ("custom-reset-button-menu" variable (:default-value t) nil [58002 58231])
            ("custom-buffer-verbose-help" variable (:default-value t) nil [58233 58384])
            ("Custom-buffer-done" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [58386 58555])
            ("custom-button" variable nil nil [58557 58635])
            ("custom-button-mouse" variable nil nil [58637 58727])
            ("custom-button-pressed" variable nil nil [58729 58823])
            ("custom-search-field" variable (:default-value t) nil [58825 58972])
            ("custom-raised-buttons" variable (:default-value (not (equal (face-valid-attribute-values :box) '(("unspecified" . unspecified))))) nil [58974 59593])
            ("custom--invocation-options" variable nil nil [59595 59634])
            ("custom-buffer-create-internal" function (:arguments ("options" "_description")) nil [59636 64653])
            ("customize-browse" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [64693 66025])
            ("define-widget" code nil nil [66027 66201])
            ("custom-browse-visibility-action" function (:arguments ("widget" "_ignore")) nil [66203 66337])
            ("define-widget" code nil nil [66339 66525])
            ("custom-browse-group-tag-action" function (:arguments ("widget" "_ignore")) nil [66527 66692])
            ("define-widget" code nil nil [66694 66887])
            ("custom-browse-variable-tag-action" function (:arguments ("widget" "_ignore")) nil [66889 67060])
            ("define-widget" code nil nil [67062 67243])
            ("custom-browse-face-tag-action" function (:arguments ("widget" "_ignore")) nil [67245 67408])
            ("custom-browse-alist" variable
               (:constant-flag t
                :default-value '(("   " "space") (" | " "vertical") ("-\\ " "top") (" |-" "middle") (" `-" "bottom")))
                nil [67410 67563])
            ("custom-browse-insert-prefix" function (:arguments ("prefix")) nil [67565 67683])
            ("widget-put" code nil nil [68007 68059])
            ("widget-put" code nil nil [68060 68296])
            ("widget-put" code nil nil [68297 68356])
            ("define-widget" code nil nil [68391 68700])
            ("custom-magic-faces" customgroup (:user-visible-flag t) nil [68734 68850])
            ("custom-invalid" variable
               (:default-value '((((class color)) :foreground "yellow1" :background "red1") (t :weight bold :slant italic :underline t))
                :type "face")
                nil [68852 69072])
            ("custom-rogue" variable
               (:default-value '((((class color)) :foreground "pink" :background "black") (t :underline t))
                :type "face")
                nil [69074 69281])
            ("custom-modified" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic))
                :type "face")
                nil [69283 69572])
            ("custom-set" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "blue1" :background "white") (((class color)) :foreground "blue" :background "white") (t :slant italic))
                :type "face")
                nil [69574 69861])
            ("custom-changed" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic))
                :type "face")
                nil [69863 70146])
            ("custom-themed" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic))
                :type "face")
                nil [70148 70433])
            ("custom-saved" variable
               (:default-value '((t :underline t))
                :type "face")
                nil [70435 70560])
            ("custom-magic-alist" variable
               (:constant-flag t
                :default-value '((nil "#" underline "UNINITIALIZED, you should not see this.") (unknown "?" italic "UNKNOWN, you should not see this.") (hidden "-" default "HIDDEN, invoke \"Show\" in the previous line to show." "group now hidden, invoke \"Show\", above, to show contents.") (invalid "x" custom-invalid "INVALID, the displayed value cannot be set.") (modified "*" custom-modified "EDITED, shown value does not take effect until you set or save it." "something in this group has been edited but not set.") (set "+" custom-set "SET for current session only." "something in this group has been set but not saved.") (changed ":" custom-changed "CHANGED outside Customize." "something in this group has been changed outside customize.") (saved "!" custom-saved "SAVED and set." "something in this group has been set and saved.") (themed "o" custom-themed "THEMED." "visible group members are set by enabled themes.") (rogue "@" custom-rogue "NO CUSTOMIZATION DATA; not intended to be customized." "something in this group is not prepared for customization.") (standard " " nil "STANDARD." "visible group members are all at standard values.")))
                nil [70562 72987])
            ("custom-magic-show" variable (:default-value 'long) nil [72989 73249])
            ("custom-magic-show-hidden" variable (:default-value '(option face)) nil [73251 73599])
            ("custom-magic-show-button" variable nil nil [73601 73761])
            ("define-widget" code nil nil [73763 74034])
            ("widget-magic-mouse-down-action" function (:arguments ("widget" "_event")) nil [74036 74238])
            ("custom-magic-value-create" function (:arguments ("widget")) nil [74240 76768])
            ("custom-magic-reset" function (:arguments ("widget" "buffer")) nil [76770 77051])
            ("custom-button" variable
               (:default-value '((((type x w32 ns haiku pgtk) (class color)) :box (:line-width 2 :style released-button) :background "lightgrey" :foreground "black"))
                :type "face")
                nil [77079 77390])
            ("custom-button-mouse" variable
               (:default-value '((((type x w32 ns haiku pgtk) (class color)) :box (:line-width 2 :style released-button) :background "grey90" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [77392 77883])
            ("custom-button-unraised" variable
               (:default-value '((t :inherit underline))
                :type "face")
                nil [77885 78056])
            ("setq" code nil nil [78058 78150])
            ("setq" code nil nil [78152 78243])
            ("custom-button-pressed" variable
               (:default-value '((((type x w32 ns haiku pgtk) (class color)) :box (:line-width 2 :style pressed-button) :background "lightgrey" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [78245 78564])
            ("custom-button-pressed-unraised" variable
               (:default-value '((default :inherit custom-button-unraised) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet"))
                :type "face")
                nil [78566 78890])
            ("setq" code nil nil [78892 79014])
            ("custom-documentation" variable
               (:default-value '((t nil))
                :type "face")
                nil [79016 79146])
            ("custom-state" variable
               (:default-value '((((class color) (background dark)) :foreground "lime green") (((class color) (background light)) :foreground "dark green"))
                :type "face")
                nil [79148 79392])
            ("custom-link" variable
               (:default-value '((t :inherit link))
                :type "face")
                nil [79394 79522])
            ("define-widget" code nil nil [79524 80005])
            ("custom-convert-widget" function (:arguments ("widget")) nil [80007 80368])
            ("custom-notify" function (:arguments ("widget" "args")) nil [80370 81259])
            ("custom-redraw" function (:arguments ("widget")) nil [81261 81856])
            ("custom-redraw-magic" function (:arguments ("widget")) nil [81858 82330])
            ("custom-show" function (:arguments ("widget" "value")) nil [82332 82616])
            ("custom-load-widget" function (:arguments ("widget")) nil [82618 82736])
            ("custom-unloaded-symbol-p" function (:arguments ("symbol")) nil [82738 83216])
            ("custom-unloaded-widget-p" function (:arguments ("widget")) nil [83218 83385])
            ("custom-toggle-hide" function (:arguments ("widget")) nil [83387 83846])
            ("custom-toggle-parent" function (:arguments ("widget" "_ignore")) nil [83848 83993])
            ("custom-add-see-also" function (:arguments ("widget" "prefix")) nil [83995 84897])
            ("custom-add-parent-links" function (:arguments ("widget" "initial-string" "_doc-initial-string")) nil [84899 85775])
            ("custom-comment" variable
               (:default-value '((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic))
                :type "face")
                nil [85838 86227])
            ("custom-comment-tag" variable
               (:default-value '((((class color) (background dark)) :foreground "gray80") (((class color) (background light)) :foreground "blue4") (((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (t :weight bold))
                :type "face")
                nil [86260 86711])
            ("define-widget" code nil nil [86713 86934])
            ("custom-comment-create" function (:arguments ("widget")) nil [86936 87347])
            ("custom-comment-hide" function (:arguments ("widget")) nil [87349 87447])
            ("custom-comment-show" function (:arguments ("widget")) nil [87550 88402])
            ("custom-comment-invisible-p" function (:arguments ("widget")) nil [88404 88582])
            ("custom-variable-obsolete" variable
               (:default-value '((((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :slant italic))
                :type "face")
                nil [88619 88972])
            ("custom-variable-tag" variable
               (:default-value '((((class color) (background dark)) :foreground "light blue" :weight bold) (((min-colors 88) (class color) (background light)) :foreground "blue1" :weight bold) (((class color) (background light)) :foreground "blue" :weight bold) (t :weight bold))
                :type "face")
                nil [88974 89348])
            ("custom-variable-button" variable
               (:default-value '((t :underline t :weight bold))
                :type "face")
                nil [89350 89480])
            ("custom-variable-default-form" variable (:default-value 'edit) nil [89482 89665])
            ("custom-variable-documentation" function (:arguments ("variable")) nil [89667 90980])
            ("define-widget" code nil nil [90982 92552])
            ("custom-variable-type" function (:arguments ("symbol")) nil [92554 93379])
            ("custom-variable-value-create" function (:arguments ("widget")) nil [93381 99382])
            ("custom--hidden-state" variable nil nil [99384 99413])
            ("custom-toggle-hide-all-widgets" function (:user-visible-flag t) nil [99415 100843])
            ("custom-toggle-hide-variable" function (:arguments ("visibility-widget" "_ignore")) nil [100845 101946])
            ("custom-tag-action" function (:arguments ("widget" "args")) nil [101948 102141])
            ("custom-tag-mouse-down-action" function (:arguments ("widget" "args")) nil [102143 102369])
            ("custom-variable-state" function (:arguments ("symbol" "val")) nil [102371 104134])
            ("custom-variable-modified-p" function (:arguments ("widget")) nil [104136 105205])
            ("custom-variable-state-set" function (:arguments ("widget" "state")) nil [105207 105832])
            ("custom-variable-standard-value" function (:arguments ("widget")) nil [105834 105927])
            ("custom-variable-current-value" function (:arguments ("widget")) nil [105929 106361])
            ("custom-variable-menu" variable nil nil [106363 106916])
            ("custom-variable-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [custom-variable-set] '(menu-item "Set for Current Session" custom-variable-set :enable (eq (widget-get custom-actioned-widget :custom-state) 'modified))) (when (or custom-file init-file-user) (define-key-after map [custom-variable-save] '(menu-item "Save for Future Sessions" custom-variable-save :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed rogue))))) (define-key-after map [custom-redraw] '(menu-item "Undo Edits" custom-redraw :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified changed)))) (define-key-after map [custom-variable-reset-saved] '(menu-item "Revert This Session's Customization" custom-variable-reset-saved :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed rogue)))) (when (or custom-file init-file-user) (define-key-after map [custom-variable-reset-standard] '(menu-item "Erase Customization" custom-variable-reset-standard :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed saved rogue))))) (define-key-after map [custom-variable-reset-backup] '(menu-item "Set to Backup Value" custom-variable-reset-backup :enable (get (widget-value custom-actioned-widget) 'backup-value))) (define-key-after map [sep0] '(menu-item "---")) (define-key-after map [custom-comment-show] '(menu-item "Add Comment" custom-comment-show :enable (custom-comment-invisible-p custom-actioned-widget))) (define-key-after map [sep1] '(menu-item "---")) (define-key-after map [custom-variable-edit] '(menu-item "Show Current Value" custom-variable-edit :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'edit))) (define-key-after map [custom-variable-edit-lisp] '(menu-item "Show Saved Lisp Expression" custom-variable-edit-lisp :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'lisp))) map)) nil [106918 110334])
            ("custom-variable-action" function (:arguments ("widget" "event")) nil [110336 111487])
            ("custom-variable-edit" function (:arguments ("widget")) nil [111489 111663])
            ("custom-variable-edit-lisp" function (:arguments ("widget")) nil [111665 111875])
            ("custom-variable-set" function (:arguments ("widget")) nil [111877 113814])
            ("custom-variable-mark-to-save" function (:arguments ("widget")) nil [113816 115535])
            ("custom-variable-state-set-and-redraw" function (:arguments ("widget")) nil [115537 115735])
            ("custom-variable-save" function (:arguments ("widget")) nil [115737 115934])
            ("custom-variable-reset-saved" function (:arguments ("widget")) nil [115936 117367])
            ("custom-variable-mark-to-reset-standard" function (:arguments ("widget")) nil [117369 118949])
            ("custom-variable-reset-standard" function (:arguments ("widget")) nil [118951 119395])
            ("custom-variable-backup-value" function (:arguments ("widget")) nil [119397 119696])
            ("custom-variable-reset-backup" function (:arguments ("widget")) nil [119698 120734])
            ("define-widget" code nil nil [120772 121013])
            ("custom-visibility" variable
               (:default-value '((t :height 0.8 :inherit link))
                :type "face")
                nil [121015 121163])
            ("define-widget" code nil nil [121201 122110])
            ("custom-face-edit-value-create" function (:arguments ("widget")) nil [122112 123557])
            ("custom-face-edit-value-visibility-action" function (:arguments ("widget" "_ignore")) nil [123559 123837])
            ("custom-face-edit-fix-value" function (:arguments ("_widget" "value")) nil [123839 124035])
            ("custom-face-edit-convert-widget" function (:arguments ("widget")) nil [124037 124384])
            ("custom-face-edit" variable
               (:constant-flag t
                :default-value (widget-convert 'custom-face-edit))
                nil [124386 124504])
            ("custom-face-edit-deactivate" function (:arguments ("widget")) nil [124506 125060])
            ("custom-face-edit-activate" function (:arguments ("widget")) nil [125062 125536])
            ("custom-face-edit-delete" function (:arguments ("widget")) nil [125538 126100])
            ("custom-face-edit-attribute-tag" function (:arguments ("widget")) nil [126103 126458])
            ("define-widget" code nil nil [126494 129094])
            ("custom-face-tag" variable
               (:default-value '((t :inherit custom-variable-tag))
                :type "face")
                nil [129127 129242])
            ("custom-face-default-form" variable (:default-value 'selected) nil [129244 129446])
            ("custom-face-documentation" function (:arguments ("face")) nil [129448 130208])
            ("define-widget" code nil nil [130210 131762])
            ("define-widget" code nil nil [131764 132192])
            ("custom-face-all" variable
               (:constant-flag t
                :default-value (widget-convert 'custom-face-all))
                nil [132194 132309])
            ("custom-filter-face-spec" function (:arguments ("spec" "filter-index" "default-filter")) nil [132311 133438])
            ("custom-pre-filter-face-spec" function (:arguments ("spec")) nil [133440 133631])
            ("custom-post-filter-face-spec" function (:arguments ("spec")) nil [133633 133783])
            ("custom-face-widget-to-spec" function (:arguments ("widget")) nil [133785 134197])
            ("custom-face-get-current-spec" function (:arguments ("face")) nil [134199 134723])
            ("custom-toggle-hide-face" function (:arguments ("visibility-widget" "_ignore")) nil [134725 135768])
            ("custom-face-value-create" function (:arguments ("widget")) nil [135770 140420])
            ("cus--face-link" function (:arguments ("widget" "_format")) nil [140422 140638])
            ("custom-face-menu" variable nil nil [140640 141177])
            ("custom-face-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [custom-face-set] '(menu-item "Set for Current Session" custom-face-set)) (when (or custom-file init-file-user) (define-key-after map [custom-face-save] '(menu-item "Save for Future Sessions" custom-face-save))) (define-key-after map [custom-redraw] '(menu-item "Undo Edits" custom-redraw :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified changed)))) (define-key-after map [custom-face-reset-saved] '(menu-item "Revert This Session's Customization" custom-face-reset-saved :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed)))) (when (or custom-file init-file-user) (define-key-after map [custom-face-reset-standard] '(menu-item "Erase Customization" custom-face-reset-standard :enable (get (widget-value custom-actioned-widget) 'face-defface-spec)))) (define-key-after map [sep0] '(menu-item "---")) (define-key-after map [custom-comment-show] '(menu-item "Add Comment" custom-comment-show :enable (custom-comment-invisible-p custom-actioned-widget))) (define-key-after map [sep1] '(menu-item "---")) (define-key-after map [custom-face-edit-selected] '(menu-item "For Current Display" custom-face-edit-selected :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'selected))) (define-key-after map [custom-face-edit-all] '(menu-item "For All Kinds of Displays" custom-face-edit-all :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'all))) (define-key-after map [custom-face-edit-lisp] '(menu-item "Show Lisp Expression" custom-face-edit-lisp :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'lisp))) map)) nil [141179 143674])
            ("custom-face-edit-selected" function (:arguments ("widget")) nil [143676 143886])
            ("custom-face-edit-all" function (:arguments ("widget")) nil [143888 144083])
            ("custom-face-edit-lisp" function (:arguments ("widget")) nil [144085 144291])
            ("custom-face-state" function (:arguments ("face")) nil [144293 145312])
            ("custom-face-state-set" function (:arguments ("widget")) nil [145314 145768])
            ("custom-face-action" function (:arguments ("widget" "event")) nil [145770 146561])
            ("custom-face-set" function (:arguments ("widget")) nil [146563 148027])
            ("custom-face-mark-to-save" function (:arguments ("widget")) nil [148029 149085])
            ("custom-face-state-set-and-redraw" function (:arguments ("widget")) nil [149087 149273])
            ("custom-face-save" function (:arguments ("widget")) nil [149275 150637])
            ("custom-face-reset-saved" function (:arguments ("widget")) nil [150639 152115])
            ("custom-face-standard-value" function (:arguments ("widget")) nil [152117 152209])
            ("custom-face-mark-to-reset-standard" function (:arguments ("widget")) nil [152211 154217])
            ("custom-face-reset-standard" function (:arguments ("widget")) nil [154219 154542])
            ("widget-face-prompt-value-history" variable nil nil [154568 154665])
            ("define-widget" code nil nil [154667 155340])
            ("widget-face-sample-face-get" function (:arguments ("widget")) nil [155342 155471])
            ("widget-face-notify" function (:arguments ("widget" "child" "event")) nil [155473 155726])
            ("define-widget" code nil nil [155753 156334])
            ("custom-hook-convert-widget" function (:arguments ("widget")) nil [156336 156764])
            ("widget-fringe-bitmap-prompt-value-history" variable nil nil [156799 156914])
            ("fringe-bitmap-p" function (:prototype-flag t) nil [156962 156998])
            ("define-widget" code nil nil [157000 157849])
            ("define-widget" code nil nil [157888 158209])
            ("custom-group-link-action" function (:arguments ("widget" "_ignore")) nil [158211 158308])
            ("custom-group-tag-faces" variable nil nil [158342 158600])
            ("custom-group-tag-1" variable
               (:default-value '((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "pink") (((min-colors 88) (class color) (background light)) :foreground "red1") (((class color) (background light)) :foreground "red"))
                :type "face")
                nil [158602 158936])
            ("custom-group-tag" variable
               (:default-value '((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :weight bold))
                :type "face")
                nil [158938 159309])
            ("custom-group-subtitle" variable
               (:default-value '((t :weight bold))
                :type "face")
                nil [159311 159447])
            ("custom-group-doc-align-col" variable (:default-value 20) nil [159449 159487])
            ("define-widget" code nil nil [159489 160226])
            ("custom-group-sample-face-get" function (:arguments ("widget")) nil [160228 160395])
            ("define-widget" code nil nil [160397 160551])
            ("custom-group-visibility-create" function (:arguments ("widget")) nil [160553 160713])
            ("custom--filter-obsolete-variables" function (:arguments ("items")) nil [160715 160978])
            ("custom-group-members" function (:arguments ("symbol" "groups-only")) nil [160980 161359])
            ("custom-group--draw-horizontal-line" function nil nil [161361 162025])
            ("custom-group-value-create" function (:arguments ("widget")) nil [162027 169609])
            ("custom-group-menu" variable nil nil [169611 170152])
            ("custom-group-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [custom-group-set] '(menu-item "Set for Current Session" custom-group-set :enable (eq (widget-get custom-actioned-widget :custom-state) 'modified))) (when (or custom-file init-file-user) (define-key-after map [custom-group-save] '(menu-item "Save for Future Sessions" custom-group-save :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set))))) (define-key-after map [custom-group-reset-current] '(menu-item "Undo Edits" custom-group-reset-current :enable (eq (widget-get custom-actioned-widget :custom-state) 'modified))) (define-key-after map [custom-group-reset-saved] '(menu-item "Revert This Session's Customizations" custom-group-reset-saved :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set)))) (when (or custom-file init-file-user) (define-key-after map [custom-group-reset-standard] '(menu-item "Erase Customization" custom-group-reset-standard :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set saved))))) map)) nil [170154 171761])
            ("custom-group-action" function (:arguments ("widget" "event")) nil [171763 172547])
            ("custom-group-set" function (:arguments ("widget")) nil [172549 172776])
            ("custom-group-mark-to-save" function (:arguments ("widget")) nil [172778 173032])
            ("custom-group-state-set-and-redraw" function (:arguments ("widget")) nil [173034 173330])
            ("custom-group-save" function (:arguments ("widget")) nil [173332 173505])
            ("custom-group-reset-current" function (:arguments ("widget")) nil [173507 173745])
            ("custom-group-reset-saved" function (:arguments ("widget")) nil [173747 173996])
            ("custom-group-reset-standard" function (:arguments ("widget")) nil [173998 174283])
            ("custom-group-mark-to-reset-standard" function (:arguments ("widget")) nil [174285 174580])
            ("custom-group-state-update" function (:arguments ("widget")) nil [174582 175175])
            ("custom-file" variable nil nil [175235 177078])
            ("custom-file" function (:arguments ("no-error")) nil [177080 177582])
            ("declare-function" code nil nil [177632 177692])
            ("custom-save-all" function nil nil [177709 179407])
            ("customize-save-customized" function (:user-visible-flag t) nil [179424 180423])
            ("custom-save-delete" function (:arguments ("symbol")) nil [180476 181779])
            ("custom-save-variables" function nil nil [181781 184688])
            ("custom-save-faces" function nil nil [184690 186534])
            ("custom-menu-nesting" variable (:default-value 2) nil [186580 186689])
            ("custom-face-menu-create" function (:arguments ("_widget" "symbol")) nil [186691 186894])
            ("custom-variable-menu-create" function (:arguments ("_widget" "symbol")) nil [186896 187314])
            ("widget-put" code nil nil [187363 187585])
            ("custom-group-menu-create" function (:arguments ("_widget" "symbol")) nil [187587 187881])
            ("custom-menu-create" function (:arguments ("symbol")) nil [187898 188858])
            ("customize-menu-create" function (:arguments ("symbol" "name")) nil [188875 189328])
            ("easy-menu-define" code nil nil [189363 190367])
            ("tool-bar-map" variable nil nil [190369 190390])
            ("custom-tool-bar-map" variable nil nil [190578 190649])
            ("Custom-no-edit" function
               (:user-visible-flag t
                :arguments ("_pos" "_event"))
                nil [190673 190869])
            ("Custom-newline" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [190871 191546])
            ("Custom-goto-parent" function (:user-visible-flag t) nil [191548 191946])
            ("Custom-mode-hook" variable nil nil [191948 192061])
            ("custom-state-buffer-message" function (:arguments ("widget")) nil [192063 192269])
            ("custom--initialize-widget-variables" function nil nil [192271 193188])
            ("define-derived-mode" code nil nil [193190 194887])
            ("custom--revert-buffer" function (:arguments ("_ignore-auto" "_noconfirm")) nil [194889 195114])
            ("put" code nil nil [195116 195155])
            ("define-widget" code nil nil [195168 196316])
            ("custom-icon-value-create" function (:arguments ("widget")) nil [196318 200605])
            ("custom-toggle-hide-icon" function (:arguments ("visibility-widget" "_ignore")) nil [200607 201347])
            ("custom--icons-widget-value" function (:arguments ("widget")) nil [201349 201558])
            ("custom-icon-set" function (:arguments ("widget")) nil [201560 202108])
            ("customize-icon" function
               (:user-visible-flag t
                :arguments ("icon"))
                nil [202125 202661])
            ("custom-icon-state-set" function (:arguments ("widget" "state")) nil [202663 202970])
            ("custom-icon-state" function (:arguments ("symbol" "value")) nil [203075 203474])
            ("custom-theme-set-icons" function (:arguments ("theme" "specs")) nil [203476 203799])
            ("custom-set-icons" function (:arguments ("args")) nil [203816 204147])
            ("custom-save-icons" function nil nil [204164 205066])
            ("cus-edit" package nil nil [205068 205087]))          
      :file "cus-edit.el.gz"
      :pointmax 205115
      :fsize 49184
      :lastmodtime '(25787 50587 0 0)
      :unmatched-syntax nil))
  :file "!Applications!Emacs.app!Contents!Resources!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
