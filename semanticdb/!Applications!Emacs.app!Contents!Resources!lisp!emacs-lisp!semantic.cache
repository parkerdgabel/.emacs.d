;; Object semanticdb-project-database-file-4b82a29a
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4b82a29a"
  :tables
  (list
    (semanticdb-table "semanticdb-table-bc1426c4"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1345 2625])
            ("defalias" code nil nil [2627 3519]))          
      :file "debug-early.el.gz"
      :pointmax 3551
      :fsize 1493
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4a838e14"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [996 1013])
            ("backtrace" include nil nil [1014 1034])
            ("debugger" customgroup (:user-visible-flag t) nil [1036 1143])
            ("debugger-mode-hook" variable nil nil [1145 1279])
            ("debugger-batch-max-lines" variable (:default-value 40) nil [1281 1635])
            ("debugger-print-function" variable (:default-value nil) nil [1637 1855])
            ("debugger-bury-or-kill" variable (:default-value 'bury) nil [1857 3110])
            ("debug-allow-recursive-debug" variable nil nil [3112 3260])
            ("debugger-step-after-exit" variable nil nil [3262 3359])
            ("debugger-value" variable nil nil [3361 3455])
            ("debugger-old-buffer" variable nil nil [3457 3560])
            ("debugger-previous-window" variable nil nil [3562 3656])
            ("debugger-previous-window-height" variable nil nil [3658 3762])
            ("debugger-outer-match-data" variable nil nil [3764 3798])
            ("debugger-will-be-back" variable nil nil [3799 3892])
            ("inhibit-debug-on-entry" variable nil nil [3894 3982])
            ("debugger-jumping-flag" variable nil nil [3984 4203])
            ("inhibit-trace" variable nil nil [4205 4227])
            ("debugger-args" variable nil nil [4268 4651])
            ("debugger--buffer-state" type
               (:members ("mode" "header" "frames" "content" "pos")
                :type "struct")
                nil [4653 5081])
            ("debugger--restore-buffer-state" function (:arguments ("state")) nil [5083 5538])
            ("setq" code nil nil [5555 5577])
            ("debug" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [5593 12765])
            ("debugger--print" function (:arguments ("obj" "stream")) nil [12768 12972])
            ("make-obsolete" code nil nil [12974 13111])
            ("debugger-insert-backtrace" function (:arguments ("frames" "do-xrefs")) nil [13113 13395])
            ("debugger-setup-buffer" function (:arguments ("args")) nil [13397 14521])
            ("debugger--insert-header" function (:arguments ("args")) nil [14523 16540])
            ("debugger-step-through" function (:user-visible-flag t) nil [16544 16957])
            ("debugger-continue" function (:user-visible-flag t) nil [16959 17448])
            ("debugger-return-value" function
               (:user-visible-flag t
                :arguments ("val"))
                nil [17450 18279])
            ("debugger-jump" function (:user-visible-flag t) nil [18281 18600])
            ("debugger-reenable" function nil nil [18602 18866])
            ("debugger-frame-number" function (:arguments ("skip-base")) nil [18868 19457])
            ("debugger-frame" function (:user-visible-flag t) nil [19459 19811])
            ("debugger-frame-clear" function (:user-visible-flag t) nil [19813 20171])
            ("debugger-env-macro" function (:arguments ("body")) nil [20173 20421])
            ("debugger--backtrace-base" function nil nil [20423 20683])
            ("debugger-eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "nframe"))
                nil [20685 21886])
            ("define-obsolete-function-alias" code nil nil [21888 21978])
            ("defvar-keymap" code nil nil [21982 23793])
            ("put" code nil nil [23795 23836])
            ("define-derived-mode" code nil nil [23838 24735])
            ("debugger-record-buffer" variable (:default-value "*Debugger-record*") nil [24738 24920])
            ("debugger-record-expression" function
               (:user-visible-flag t
                :arguments ("exp"))
                nil [24922 25460])
            ("define-obsolete-function-alias" code nil nil [25462 25552])
            ("debug--implement-debug-on-entry" function (:arguments ("_ignore")) nil [25658 25982])
            ("debug-on-entry" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [25999 27190])
            ("debug--function-list" function nil nil [27192 27433])
            ("cancel-debug-on-entry" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [27450 28282])
            ("debugger-list-functions" function (:user-visible-flag t) nil [28284 29410])
            ("debugger-quit" function (:user-visible-flag t) nil [29412 29567])
            ("debug--implement-debug-watch" function (:arguments ("symbol" "newval" "op" "where")) nil [29569 29890])
            ("debug-on-variable-change" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [29907 31047])
            ("defalias" code nil nil [31064 31114])
            ("debug--variable-list" function nil nil [31117 31377])
            ("cancel-debug-on-variable-change" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [31394 32277])
            ("defalias" code nil nil [32294 32358])
            ("make-obsolete-variable" code nil nil [32360 32462])
            ("debugger-previous-backtrace" variable nil nil [32463 32503])
            ("debug" package nil nil [32505 32521]))          
      :file "debug.el.gz"
      :pointmax 32546
      :fsize 9271
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4f70692c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("derived-mode-hook-name" function (:arguments ("mode")) nil [4259 4403])
            ("derived-mode-map-name" function (:arguments ("mode")) nil [4405 4541])
            ("derived-mode-syntax-table-name" function (:arguments ("mode")) nil [4543 4706])
            ("derived-mode-abbrev-table-name" function (:arguments ("mode")) nil [4708 4872])
            ("define-derived-mode" function (:arguments ("child" "parent" "name" "docstring" "body")) nil [4962 12303])
            ("derived-mode-make-docstring" function (:arguments ("parent" "child" "docstring" "syntax" "abbrev")) nil [12320 15085])
            ("derived-mode-setup-function-name" function (:arguments ("mode")) nil [15245 15435])
            ("derived-mode-init-mode-variables" function (:arguments ("mode")) nil [15505 16724])
            ("derived-mode-set-keymap" function (:arguments ("mode")) nil [16777 17172])
            ("derived-mode-set-syntax-table" function (:arguments ("mode")) nil [17174 17600])
            ("derived-mode-set-abbrev-table" function (:arguments ("mode")) nil [17602 17989])
            ("derived-mode-run-hooks" function (:arguments ("mode")) nil [17991 18177])
            ("derived-mode-merge-keymaps" function (:arguments ("old" "new")) nil [18219 19366])
            ("derived-mode-merge-syntax-tables" function (:arguments ("old" "new")) nil [19368 19576])
            ("derived-mode-merge-abbrev-tables" function (:arguments ("old" "new")) nil [19848 20110])
            ("derived" package nil nil [20112 20130]))          
      :file "derived.el.gz"
      :pointmax 20157
      :fsize 6338
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4b498616"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [6255 6272])
            ("subr-x" include nil nil [6292 6309])
            ("epg" include nil nil [6330 6344])
            ("inline" include nil nil [6391 6408])
            ("seq" include nil nil [6433 6447])
            ("tabulated-list" include nil nil [6449 6474])
            ("macroexp" include nil nil [6475 6494])
            ("url-handlers" include nil nil [6495 6518])
            ("browse-url" include nil nil [6519 6540])
            ("package" customgroup (:user-visible-flag t) nil [6542 6642])
            ("package-enable-at-startup" variable (:default-value t) nil [6688 7341])
            ("package-load-list" variable (:default-value '(all)) nil [7343 8482])
            ("package-archives" variable (:default-value `(("gnu" \, (format "http%s://elpa.gnu.org/packages/" (if (gnutls-available-p) "s" ""))) ("nongnu" \, (format "http%s://elpa.nongnu.org/nongnu/" (if (gnutls-available-p) "s" ""))))) nil [8484 9608])
            ("package-menu-hide-low-priority" variable (:default-value 'archive) nil [9610 10591])
            ("package-archive-priorities" variable nil nil [10593 11349])
            ("package-pinned-packages" variable nil nil [11351 12414])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [12431 12796])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [12813 13467])
            ("declare-function" code nil nil [13469 13585])
            ("package-gnupghome-dir" variable (:default-value (expand-file-name "gnupg" package-user-dir)) nil [13587 14286])
            ("package-check-signature" variable (:default-value 'allow-unsigned) nil [14288 15347])
            ("package-check-signature" function nil nil [15349 15800])
            ("package-unsigned-archives" variable nil nil [15802 16094])
            ("package-selected-packages" variable nil nil [16096 16653])
            ("package-native-compile" variable nil nil [16655 17090])
            ("package-menu-async" variable (:default-value t) nil [17092 17366])
            ("package-name-column-width" variable (:default-value 30) nil [17368 17501])
            ("package-version-column-width" variable (:default-value 14) nil [17503 17642])
            ("package-status-column-width" variable (:default-value 12) nil [17644 17781])
            ("package-archive-column-width" variable (:default-value 8) nil [17783 17921])
            ("package--default-summary" variable (:default-value "No description available.") nil [18317 18378])
            ("define-inline" code nil nil [18380 18556])
            ("package-desc" type
               (:members ("name" "version" "summary" "reqs" "kind" "archive" "dir" "extras" "signed")
                :type "struct")
                nil [18558 21459])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [21461 21811])
            ("package-version-join" function (:arguments ("vlist")) nil [21831 22964])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [22966 23329])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [23331 23763])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [23765 24148])
            ("package-desc-priority" function (:arguments ("pkg-desc")) nil [24150 24323])
            ("package--parse-elpaignore" function (:arguments ("pkg-desc")) nil [24325 25076])
            ("package--bi-desc" type
               (:members ("version" "reqs" "summary")
                :type "struct")
                nil [25078 25312])
            ("package--builtins" variable nil nil [25558 25904])
            ("put" code nil nil [25905 25953])
            ("package-alist" variable nil nil [25955 26391])
            ("put" code nil nil [26392 26436])
            ("package-activated-list" variable nil nil [26453 26608])
            ("put" code nil nil [26609 26662])
            ("declare-function" code nil nil [26861 26917])
            ("package-process-define-package" function (:arguments ("exp")) nil [26919 28197])
            ("declare-function" code nil nil [28199 28254])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [28256 29102])
            ("package-load-all-descriptors" function nil nil [29104 29767])
            ("package--alist" function nil nil [29769 29945])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [29947 30576])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [30668 31397])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [31399 32006])
            ("package--active-built-in-p" function (:arguments ("package")) nil [32008 32675])
            ("package--autoloads-file-name" function (:arguments ("pkg-desc")) nil [32677 32937])
            ("Info-directory-list" variable nil nil [32939 32967])
            ("declare-function" code nil nil [32968 33012])
            ("package--quickstart-pkgs" variable (:default-value t) nil [33014 33116])
            ("package--library-stem" function (:arguments ("file")) nil [33118 33361])
            ("package--reload-previously-loaded" function (:arguments ("pkg-desc")) nil [33363 35868])
            ("package-activate-1" function (:arguments ("pkg-desc" "reload" "deps")) nil [35870 37949])
            ("package--get-activatable-pkg" function (:arguments ("pkg-name")) nil [37976 38515])
            ("package-activate" function (:arguments ("package" "force")) nil [38687 39308])
            ("tar-parse-info" variable nil nil [39579 39602])
            ("declare-function" code nil nil [39603 39652])
            ("declare-function" code nil nil [39653 39713])
            ("declare-function" code nil nil [39714 39779])
            ("package-untar-buffer" function (:arguments ("dir")) nil [39781 40670])
            ("package--alist-to-plist-args" function (:arguments ("alist")) nil [40672 40847])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [40849 43401])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-file")) nil [43403 44659])
            ("declare-function" code nil nil [44676 44751])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [44753 45193])
            ("autoload-timestamps" variable nil nil [45195 45223])
            ("version-control" variable nil nil [45224 45248])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [45250 46375])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [46377 46869])
            ("warning-minimum-level" variable nil nil [46888 46918])
            ("byte-compile-ignore-files" variable nil nil [46919 46953])
            ("package--compile" function (:arguments ("pkg-desc")) nil [46954 47324])
            ("package--native-compile-async" function (:arguments ("pkg-desc")) nil [47326 47656])
            ("package-read-from-string" function (:arguments ("str")) nil [47701 48103])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [48105 48797])
            ("declare-function" code nil nil [48799 48847])
            ("declare-function" code nil nil [48848 48906])
            ("declare-function" code nil nil [48907 48964])
            ("declare-function" code nil nil [48965 49028])
            ("declare-function" code nil nil [49029 49090])
            ("declare-function" code nil nil [49091 49148])
            ("package-buffer-info" function nil nil [49150 51503])
            ("package--read-pkg-desc" function (:arguments ("kind")) nil [51505 52024])
            ("declare-function" code nil nil [52026 52086])
            ("declare-function" code nil nil [52087 52142])
            ("package-tar-file-info" function nil nil [52144 53155])
            ("package-dir-info" function nil nil [53157 54334])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [54460 54690])
            ("declare-function" code nil nil [54692 54750])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [54752 55081])
            ("declare-function" code nil nil [55083 55332])
            ("declare-function" code nil nil [55333 55462])
            ("declare-function" code nil nil [55463 55525])
            ("declare-function" code nil nil [55526 55585])
            ("declare-function" code nil nil [55586 55646])
            ("package--display-verify-error" function (:arguments ("context" "sig-file")) nil [55648 56423])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [56425 57375])
            ("package--with-response-buffer" function (:arguments ("url" "body" "async" "file" "error-form" "noerror")) nil [57377 58371])
            ("package--unless-error" function (:arguments ("body" "before-body")) nil [58373 58801])
            ("package--with-response-buffer-1" function (:arguments ("url" "body" "async" "file" "error-function" "noerror")) nil [58803 60888])
            ("define-error" code nil nil [60890 60948])
            ("package--check-signature-content" function (:arguments ("content" "string" "sig-file")) nil [60950 62456])
            ("package--check-signature" function (:arguments ("location" "file" "string" "async" "callback" "unwind")) nil [62458 64320])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [64713 64886])
            ("package-archive-contents" variable nil nil [64951 65151])
            ("put" code nil nil [65152 65207])
            ("package--compatibility-table" variable nil nil [65209 65760])
            ("package--build-compatibility-table" function nil nil [65762 66086])
            ("package--add-to-compatibility-table" function (:arguments ("pkg")) nil [66088 66700])
            ("package--ac-desc" type
               (:members ("version" "reqs" "summary" "kind" "extras")
                :type "struct")
                nil [66864 67077])
            ("package--append-to-alist" function (:arguments ("pkg-desc" "alist")) nil [67079 68033])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [68035 69229])
            ("package--read-archive-file" function (:arguments ("file")) nil [69231 69910])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [69912 70706])
            ("package--old-archive-priorities" variable nil nil [70708 71006])
            ("package-read-archive-hook" variable (:default-value (list #'package-read-archive-contents)) nil [71008 71285])
            ("package-read-all-archive-contents" function nil nil [71287 71667])
            ("package--initialized" variable nil nil [71854 71937])
            ("package--activated" variable nil nil [71954 72037])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [72054 73292])
            ("progn" code nil nil [73309 74381])
            ("package--activate-all" function nil nil [74398 74694])
            ("package--downloads-in-progress" variable nil nil [74871 74962])
            ("declare-function" code nil nil [74964 75029])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [75046 75587])
            ("package--post-download-archives-hook" variable nil nil [75589 75799])
            ("put" code nil nil [75800 75867])
            ("package--update-downloads-in-progress" function (:arguments ("entry")) nil [75869 76531])
            ("package--download-one-archive" function (:arguments ("archive" "file" "async")) nil [76533 78783])
            ("package--download-and-read-archives" function (:arguments ("async")) nil [78785 79281])
            ("package-refresh-contents-hook" variable (:default-value (list #'package--download-and-read-archives)) nil [79283 79539])
            ("package-refresh-contents" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [79556 80501])
            ("package-compute-transaction" function (:arguments ("packages" "requirements" "seen")) nil [80761 85309])
            ("package--find-non-dependencies" function nil nil [85311 85873])
            ("package--save-selected-packages" function (:arguments ("value")) nil [85875 86219])
            ("package--user-selected-p" function (:arguments ("pkg")) nil [86221 86590])
            ("package--get-deps" function (:arguments ("pkgs")) nil [86592 87000])
            ("package--user-installed-p" function (:arguments ("package")) nil [87002 87394])
            ("package--removable-packages" function nil nil [87396 87908])
            ("package--used-elsewhere-p" function (:arguments ("pkg-desc" "pkg-list" "all")) nil [87910 88784])
            ("package--sort-deps-in-alist" function (:arguments ("package" "only")) nil [88786 89445])
            ("package--sort-by-dependence" function (:arguments ("package-list")) nil [89447 90300])
            ("package-archive-base" function (:arguments ("desc")) nil [90695 90833])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [90835 93253])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [93270 94351])
            ("package-download-transaction" function (:arguments ("packages")) nil [94353 94696])
            ("package--archives-initialize" function nil nil [94698 94936])
            ("package-install-upgrade-built-in" variable nil nil [94938 95240])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg" "dont-select"))
                nil [95257 97760])
            ("declare-function" code nil nil [97762 97818])
            ("package-upgrade" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [97835 98654])
            ("package--upgradeable-packages" function nil nil [98656 99218])
            ("package-upgrade-all" function
               (:user-visible-flag t
                :arguments ("query"))
                nil [99235 100311])
            ("package--dependencies" function (:arguments ("pkg")) nil [100313 100681])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [100683 101177])
            ("declare-function" code nil nil [101179 101236])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [101253 103616])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [103633 104147])
            ("package-install-selected-packages" function
               (:user-visible-flag t
                :arguments ("noconfirm"))
                nil [104164 105676])
            ("package--newest-p" function (:arguments ("pkg")) nil [105702 105871])
            ("declare-function" code nil nil [105873 105924])
            ("package-vc-repository-store" variable nil nil [105925 105961])
            ("package--delete-directory" function (:arguments ("dir")) nil [105962 106417])
            ("package-delete" function
               (:user-visible-flag t
                :arguments ("pkg-desc" "force" "nosave"))
                nil [106420 110019])
            ("package-reinstall" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [110036 110587])
            ("package-recompile" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [110604 111415])
            ("package-recompile-all" function (:user-visible-flag t) nil [111432 111726])
            ("package-autoremove" function (:user-visible-flag t) nil [111743 112742])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [112795 114112])
            ("package-help-section-name" variable
               (:default-value '((t :inherit (bold font-lock-function-name-face)))
                :type "face")
                nil [114114 114284])
            ("package--print-help-section" function (:arguments ("name" "strings")) nil [114286 114733])
            ("declare-function" code nil nil [114735 114795])
            ("package--get-description" function (:arguments ("desc")) nil [114797 115879])
            ("package--describe-add-library-links" function nil nil [115881 116339])
            ("describe-package-1" function (:arguments ("pkg")) nil [116341 127351])
            ("package-install-button-action" function (:arguments ("button")) nil [127353 127825])
            ("package-delete-button-action" function (:arguments ("button")) nil [127827 128291])
            ("package-keyword-button-action" function (:arguments ("button")) nil [128293 128660])
            ("package-make-button" function (:arguments ("text" "properties")) nil [128662 129306])
            ("package--finder-goto-xref" function (:arguments ("button")) nil [129308 129562])
            ("define-button-type" code nil nil [129564 129642])
            ("package--print-email-button" function (:arguments ("recipient")) nil [129644 130336])
            ("defvar-keymap" code nil nil [130365 131484])
            ("easy-menu-define" code nil nil [131486 134081])
            ("package-menu--new-package-list" variable nil nil [134083 134202])
            ("package-menu--transaction-status" variable nil nil [134204 134302])
            ("define-derived-mode" code nil nil [134304 135923])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [135925 136327])
            ("package-list-unversioned" variable nil nil [136329 136445])
            ("package-list-unsigned" variable nil nil [136447 136566])
            ("package--emacs-version-list" variable (:default-value (version-to-list emacs-version)) nil [136568 136689])
            ("package--ensure-package-menu-mode" function nil nil [136691 136908])
            ("package--incompatible-p" function (:arguments ("pkg" "shallow")) nil [136910 138080])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [138082 139841])
            ("package-menu--hide-packages" variable (:default-value t) nil [139843 140067])
            ("package-menu-toggle-hiding" function (:user-visible-flag t) nil [140069 140657])
            ("package--remove-hidden" function (:arguments ("pkg-list")) nil [140659 142687])
            ("package-hidden-regexps" variable nil nil [142689 143118])
            ("package-menu-use-current-if-no-marks" variable (:default-value t) nil [143120 143708])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [143710 145905])
            ("package-all-keywords" function nil nil [145907 146171])
            ("package--mapc" function (:arguments ("function" "packages")) nil [146173 147432])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [147434 148024])
            ("package-menu--display" function (:arguments ("remember-pos" "suffix")) nil [148026 148454])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [148456 149056])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [149058 149291])
            ("make-obsolete" code nil nil [149292 149388])
            ("package-name" variable
               (:default-value '((t :inherit link))
                :type "face")
                nil [149416 149531])
            ("package-description" variable
               (:default-value '((t :inherit default))
                :type "face")
                nil [149533 149674])
            ("package-status-built-in" variable
               (:default-value '((t :inherit font-lock-builtin-face))
                :type "face")
                nil [149752 149906])
            ("package-status-external" variable
               (:default-value '((t :inherit package-status-built-in))
                :type "face")
                nil [149908 150063])
            ("package-status-available" variable
               (:default-value '((t :inherit default))
                :type "face")
                nil [150065 150206])
            ("package-status-new" variable
               (:default-value '((t :inherit (bold package-status-available)))
                :type "face")
                nil [150208 150361])
            ("package-status-held" variable
               (:default-value '((t :inherit font-lock-constant-face))
                :type "face")
                nil [150363 150510])
            ("package-status-disabled" variable
               (:default-value '((t :inherit font-lock-warning-face))
                :type "face")
                nil [150512 150666])
            ("package-status-installed" variable
               (:default-value '((t :inherit font-lock-comment-face))
                :type "face")
                nil [150668 150824])
            ("package-status-from-source" variable
               (:default-value '((t :inherit font-lock-negation-char-face))
                :type "face")
                nil [150826 150990])
            ("package-status-dependency" variable
               (:default-value '((t :inherit package-status-installed))
                :type "face")
                nil [150992 151152])
            ("package-status-unsigned" variable
               (:default-value '((t :inherit font-lock-warning-face))
                :type "face")
                nil [151154 151308])
            ("package-status-incompat" variable
               (:default-value '((t :inherit error))
                :type "face")
                nil [151310 151447])
            ("package-status-avail-obso" variable
               (:default-value '((t :inherit package-status-incompat))
                :type "face")
                nil [151449 151608])
            ("package-menu--print-info-simple" function (:arguments ("pkg")) nil [151639 153531])
            ("package-menu--old-archive-contents" variable nil nil [153533 153638])
            ("package-menu--refresh-contents" function (:arguments ("_arg" "_noconfirm")) nil [153640 154210])
            ("define-obsolete-function-alias" code nil nil [154211 154287])
            ("package-menu-hide-package" function nil nil [154289 155944])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [155947 156440])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [156468 156878])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [156880 157269])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [157271 157544])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [157546 157775])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [157777 158142])
            ("package--quick-help-keys" variable (:default-value '((("mark for installation," . 9) ("mark for deletion," . 9) "unmark," ("execute marked actions" . 1)) ("next," "previous") ("Hide-package," "(-toggle-hidden") ("g-refresh-contents," "/-filter," "help"))) nil [158144 158400])
            ("package--prettify-quick-help-key" function (:arguments ("desc")) nil [158402 158906])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [158908 159249])
            ("package-menu-get-status" function nil nil [159251 159544])
            ("package-archive-priority" function (:arguments ("archive")) nil [159546 159808])
            ("package-desc-priority-version" function (:arguments ("pkg-desc")) nil [159810 160148])
            ("package-menu--find-upgrades" function nil nil [160150 161538])
            ("package-menu--mark-upgrades-pending" variable nil nil [161540 161650])
            ("package-menu--mark-upgrades-1" function nil nil [161652 162509])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [162512 163243])
            ("package-menu--list-to-prompt" function (:arguments ("packages" "include-dependencies")) nil [163245 164432])
            ("package-menu--prompt-transaction-p" function (:arguments ("delete" "install" "upgrade")) nil [164434 165043])
            ("package-menu--partition-transaction" function (:arguments ("install" "delete")) nil [165046 165749])
            ("package-menu--perform-transaction" function (:arguments ("install-list" "delete-list")) nil [165751 167060])
            ("package--update-selected-packages" function (:arguments ("add" "remove")) nil [167062 167730])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [167732 170822])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [170824 171225])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [171227 172531])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [172533 172932])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [172934 173212])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [173214 173581])
            ("package-menu--populate-new-package-list" function nil nil [173583 174046])
            ("package-menu--find-and-notify-upgrades" function nil nil [174048 174385])
            ("package-menu--post-refresh" function nil nil [174388 175103])
            ("package-menu--mark-or-notify-upgrades" function nil nil [175105 175726])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [175743 177166])
            ("defalias" code nil nil [177183 177231])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [177254 177925])
            ("package-menu--filter-by" function (:arguments ("predicate" "suffix")) nil [177927 178754])
            ("package-menu-filter-by-archive" function
               (:user-visible-flag t
                :arguments ("archive"))
                nil [178756 179720])
            ("package-menu-filter-by-description" function
               (:user-visible-flag t
                :arguments ("description"))
                nil [179722 180497])
            ("package-menu-filter-by-keyword" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [180499 181555])
            ("define-obsolete-function-alias" code nil nil [181557 181652])
            ("package-menu-filter-by-name-or-description" function
               (:user-visible-flag t
                :arguments ("name-or-description"))
                nil [181654 182724])
            ("package-menu-filter-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [182726 183429])
            ("package-menu-filter-by-status" function
               (:user-visible-flag t
                :arguments ("status"))
                nil [183431 184933])
            ("package-menu-filter-by-version" function
               (:user-visible-flag t
                :arguments ("version" "predicate"))
                nil [184935 186927])
            ("package-menu-filter-marked" function (:user-visible-flag t) nil [186929 188113])
            ("package-menu-filter-upgradable" function (:user-visible-flag t) nil [188115 188435])
            ("package-menu-clear-filter" function (:user-visible-flag t) nil [188437 188649])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [188651 188877])
            ("package-get-version" function nil nil [188894 190456])
            ("package-quickstart" variable nil nil [191174 191445])
            ("package-quickstart-file" variable (:default-value (locate-user-emacs-file "package-quickstart.el")) nil [191462 191720])
            ("package--quickstart-maybe-refresh" function nil nil [191722 192015])
            ("package-quickstart-refresh" function (:user-visible-flag t) nil [192017 195105])
            ("package--imenu-prev-index-position-function" function nil nil [195107 195332])
            ("package--imenu-extract-index-name-function" function nil nil [195334 195789])
            ("package--query-desc" function (:arguments ("alist")) nil [195791 196224])
            ("package-browse-url" function
               (:user-visible-flag t
                :arguments ("desc" "secondary"))
                nil [196226 196921])
            ("declare-function" code nil nil [196923 197023])
            ("package-maintainers" function (:arguments ("pkg-desc" "no-error")) nil [197025 198089])
            ("package-report-bug" function
               (:user-visible-flag t
                :arguments ("desc"))
                nil [198091 199066])
            ("package-get-descriptor" function (:arguments ("pkg-name")) nil [199088 199382])
            ("package" package nil nil [199384 199402]))          
      :file "package.el.gz"
      :pointmax 199429
      :fsize 50721
      :lastmodtime '(25787 50587 0 0)
      :unmatched-syntax '((close-paren 6408 . 6409) (symbol 6373 . 6390) (open-paren 6372 . 6373) (close-paren 6344 . 6345) (symbol 6312 . 6329) (open-paren 6311 . 6312) (close-paren 6309 . 6310) (symbol 6274 . 6291) (open-paren 6273 . 6274)))
    (semanticdb-table "semanticdb-table-4663467c"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defun-prompt-regexp" variable nil nil [1098 1347])
            ("make-variable-buffer-local" code nil nil [1348 1397])
            ("parens-require-spaces" variable (:default-value t) nil [1399 1588])
            ("forward-sexp-function" variable nil nil [1590 2091])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [2093 3182])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [3184 3673])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [3675 5730])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [5732 6553])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [6555 7115])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [7117 8040])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [8042 8783])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [8785 12290])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [12292 12995])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [12997 13427])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13445 13943])
            ("beginning-of-defun-function" variable nil nil [13946 14515])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14517 15843])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15845 19594])
            ("beginning-of-defun--in-emptyish-line-p" function nil nil [19596 20155])
            ("beginning-of-defun-comments" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20157 21122])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [21124 21492])
            ("end-of-defun-moves-to-eol" variable (:default-value t) nil [21494 21700])
            ("buffer-end" function (:arguments ("arg")) nil [21702 21933])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [21935 25122])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [25124 28213])
            ("narrow-to-defun-include-comments" variable nil nil [28215 28339])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("include-comments"))
                nil [28341 30433])
            ("insert-pair-alist" variable (:default-value '((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39))) nil [30435 31388])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [31390 33659])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33661 34225])
            ("delete-pair-blink-delay" variable (:default-value blink-matching-delay) nil [34227 34477])
            ("delete-pair" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [34479 35802])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [35804 36698])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [36700 37697])
            ("check-parens" function (:user-visible-flag t) nil [37699 38612])
            ("field-complete" function (:arguments ("table" "predicate")) nil [38615 38860])
            ("lisp-complete-symbol" function (:arguments ("_predicate")) nil [38862 39849]))          
      :file "lisp.el.gz"
      :pointmax 39873
      :fsize 10466
      :lastmodtime '(25778 25386 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4ab15330"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1074 1091])
            ("timer" type
               (:members ("triggered" "high-seconds" "low-seconds" "usecs" "repeat-delay" "function" "args" "idle-delay" "psecs" "integral-multiple")
                :type "struct")
                nil [1203 2204])
            ("timer-create" function nil nil [2206 2445])
            ("timerp" function (:arguments ("object")) nil [2447 2675])
            ("timer--check" function (:arguments ("timer")) nil [2677 2782])
            ("timer--time-setter" function (:arguments ("timer" "time")) nil [2784 3081])
            ("timer--time" function (:arguments ("timer")) nil [3107 3293])
            ("timer-set-time" function (:arguments ("timer" "time" "delta")) nil [3295 3651])
            ("timer-set-idle-time" function (:arguments ("timer" "secs" "repeat")) nil [3653 4111])
            ("timer-next-integral-multiple-of-time" function (:arguments ("time" "secs")) nil [4113 4788])
            ("timer-relative-time" function (:arguments ("time" "secs" "usecs" "psecs")) nil [4790 5160])
            ("timer--time-less-p" function (:arguments ("t1" "t2")) nil [5162 5304])
            ("timer-inc-time" function (:arguments ("timer" "secs" "usecs" "psecs")) nil [5306 5671])
            ("timer-set-function" function (:arguments ("timer" "function" "args")) nil [5673 5903])
            ("timer--activate" function (:arguments ("timer" "triggered-p" "reuse-cell" "idle")) nil [5906 7339])
            ("timer-activate" function (:arguments ("timer" "triggered-p" "reuse-cell")) nil [7341 7857])
            ("timer-activate-when-idle" function (:arguments ("timer" "dont-wait" "reuse-cell")) nil [7859 8736])
            ("defalias" code nil nil [8738 8780])
            ("cancel-timer" function (:arguments ("timer")) nil [8782 8986])
            ("cancel-timer-internal" function (:arguments ("timer")) nil [8988 9410])
            ("cancel-function-timers" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [9412 9950])
            ("timer-event-last" variable nil nil [9999 10057])
            ("timer-event-last-1" variable nil nil [10058 10126])
            ("timer-event-last-2" variable nil nil [10127 10196])
            ("timer-max-repeats" variable (:default-value 10) nil [10198 10575])
            ("timer-until" function (:arguments ("timer" "time")) nil [10577 10839])
            ("timer-event-handler" function (:arguments ("timer")) nil [10841 14217])
            ("timeout-event-p" function (:arguments ("event")) nil [14280 14404])
            ("declare-function" code nil nil [14408 14459])
            ("run-at-time" function
               (:user-visible-flag t
                :arguments ("time" "repeat" "function" "args"))
                nil [14461 17202])
            ("run-with-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [17204 17691])
            ("add-timeout" function (:arguments ("secs" "function" "object" "repeat")) nil [17693 18072])
            ("run-with-idle-timer" function
               (:user-visible-flag t
                :arguments ("secs" "repeat" "function" "args"))
                nil [18074 19226])
            ("with-timeout-timers" variable nil nil [19229 19332])
            ("with-timeout" function (:arguments ("list" "body")) nil [19334 20813])
            ("with-timeout-suspend" function nil nil [20815 21267])
            ("with-timeout-unsuspend" function (:arguments ("timer-spec-list")) nil [21269 21601])
            ("y-or-n-p-with-timeout" function (:arguments ("prompt" "seconds" "default-value")) nil [21603 21843])
            ("timer-duration-words" variable
               (:constant-flag t
                :default-value (list (cons "microsec" 1e-06) (cons "microsecond" 1e-06) (cons "millisec" 0.001) (cons "millisecond" 0.001) (cons "sec" 1) (cons "second" 1) (cons "min" 60) (cons "minute" 60) (cons "hour" (* 60 60)) (cons "day" (* 24 60 60)) (cons "week" (* 7 24 60 60)) (cons "fortnight" (* 14 24 60 60)) (cons "month" (* 30 24 60 60)) (cons "year" (* 365.25 24 60 60))))
                nil [21846 22362])
            ("timer-duration" function (:arguments ("string")) nil [22364 23066])
            ("internal-timer-start-idle" function nil nil [23068 23295])
            ("timer" package nil nil [23298 23314]))          
      :file "timer.el.gz"
      :pointmax 23339
      :fsize 7565
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 1091 . 1092) (symbol 1056 . 1073) (open-paren 1055 . 1056)))
    (semanticdb-table "semanticdb-table-4b8deb5a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bytecomp" include nil nil [2612 2631])
            ("cl-lib" include nil nil [2651 2668])
            ("macroexp" include nil nil [2670 2689])
            ("subr-x" include nil nil [2709 2726])
            ("byte-compile-log-lap-1" function (:arguments ("format" "args")) nil [2729 3637])
            ("byte-compile-log-lap" function (:arguments ("format-string" "args")) nil [3639 3789])
            ("byte-optimize--lexvars" variable nil nil [3793 4155])
            ("put" code nil nil [4206 4266])
            ("byte-optimize-inline-handler" function (:arguments ("form")) nil [4268 4777])
            ("byte-compile-inline-expand" function (:arguments ("form")) nil [4779 7436])
            ("byte-optimize--vars-outside-loop" variable nil nil [7481 7863])
            ("byte-optimize--inhibit-outside-loop-constprop" variable nil nil [7865 8044])
            ("byte-optimize--dynamic-vars" variable nil nil [8046 8149])
            ("byte-optimize--aliased-vars" variable nil nil [8151 8482])
            ("byte-optimize--substitutable-p" function (:arguments ("expr")) nil [8484 9330])
            ("byte-optimize--pcase" function (:arguments ("exp" "cases")) nil [9332 10730])
            ("byte-optimize-form-code-walker" function (:arguments ("form" "for-effect")) nil [10732 21381])
            ("byte-optimize-one-form" function (:arguments ("form" "for-effect")) nil [21383 21708])
            ("byte-optimize-form" function (:arguments ("form" "for-effect")) nil [21710 22423])
            ("byte-optimize--rename-var-body" function (:arguments ("var" "new-var" "body")) nil [22425 22597])
            ("byte-optimize--rename-var" function (:arguments ("var" "new-var" "form")) nil [22599 24617])
            ("byte-optimize-let-form" function (:arguments ("head" "form" "for-effect")) nil [24619 29799])
            ("byte-optimize-body" function (:arguments ("forms" "all-for-effect")) nil [29802 30619])
            ("byte-opt--bool-value-form" function (:arguments ("form")) nil [30944 31882])
            ("byte-compile-trueconstp" function (:arguments ("form")) nil [31884 35373])
            ("byte-compile-nilconstp" function (:arguments ("form")) nil [35375 36211])
            ("byte-optimize-associative-math" function (:arguments ("form")) nil [36403 36872])
            ("byte-optimize-min-max" function (:arguments ("form")) nil [36874 37272])
            ("byte-opt--arith-reduce" function (:arguments ("op" "accum" "args")) nil [37745 38211])
            ("byte-optimize-plus" function (:arguments ("form")) nil [38213 39074])
            ("byte-optimize-minus" function (:arguments ("form")) nil [39076 40266])
            ("byte-optimize-multiply" function (:arguments ("form")) nil [40268 40769])
            ("byte-optimize-divide" function (:arguments ("form")) nil [40771 41338])
            ("byte-optimize-binary-predicate" function (:arguments ("form")) nil [41340 41756])
            ("byte-optimize-constant-args" function (:arguments ("form")) nil [41758 42015])
            ("byte-optimize-identity" function (:arguments ("form")) nil [42017 42130])
            ("byte-optimize--constant-symbol-p" function (:arguments ("expr")) nil [42132 42272])
            ("byte-optimize--fixnump" function (:arguments ("o")) nil [42274 42463])
            ("byte-optimize-equal" function (:arguments ("form")) nil [42465 42988])
            ("byte-optimize-eq" function (:arguments ("form")) nil [42990 43129])
            ("byte-optimize-member" function (:arguments ("form")) nil [43131 44034])
            ("byte-optimize-assoc" function (:arguments ("form")) nil [44036 44531])
            ("byte-optimize-assq" function (:arguments ("form")) nil [44533 44737])
            ("byte-optimize-memq" function (:arguments ("form")) nil [44739 45273])
            ("byte-optimize-concat" function (:arguments ("form")) nil [45275 46280])
            ("byte-optimize-string-greaterp" function (:arguments ("form")) nil [46282 46558])
            ("put" code nil nil [46560 46616])
            ("put" code nil nil [46617 46665])
            ("put" code nil nil [46666 46718])
            ("put" code nil nil [46719 46771])
            ("put" code nil nil [46772 46822])
            ("put" code nil nil [46823 46874])
            ("put" code nil nil [46875 46923])
            ("put" code nil nil [46924 46973])
            ("put" code nil nil [46975 47022])
            ("put" code nil nil [47023 47074])
            ("put" code nil nil [47075 47123])
            ("put" code nil nil [47124 47173])
            ("put" code nil nil [47174 47224])
            ("put" code nil nil [47225 47275])
            ("put" code nil nil [47277 47336])
            ("put" code nil nil [47337 47382])
            ("put" code nil nil [47383 47433])
            ("put" code nil nil [47434 47484])
            ("put" code nil nil [47485 47548])
            ("put" code nil nil [47549 47617])
            ("put" code nil nil [47619 47689])
            ("put" code nil nil [47690 47752])
            ("put" code nil nil [47754 47806])
            ("put" code nil nil [48056 48106])
            ("byte-optimize-quote" function (:arguments ("form")) nil [48107 48288])
            ("byte-optimize-and" function (:arguments ("form")) nil [48290 50198])
            ("byte-optimize-or" function (:arguments ("form")) nil [50200 51642])
            ("byte-optimize-cond" function (:arguments ("form")) nil [51644 52993])
            ("byte-opt--negate" function (:arguments ("form")) nil [52995 53182])
            ("byte-optimize-if" function (:arguments ("form")) nil [53184 54729])
            ("byte-optimize-while" function (:arguments ("form")) nil [54731 54873])
            ("byte-optimize-not" function (:arguments ("form")) nil [54875 55195])
            ("put" code nil nil [55197 55245])
            ("put" code nil nil [55246 55293])
            ("put" code nil nil [55294 55343])
            ("put" code nil nil [55344 55391])
            ("put" code nil nil [55392 55442])
            ("put" code nil nil [55443 55491])
            ("put" code nil nil [55492 55540])
            ("put" code nil nil [55598 55657])
            ("put" code nil nil [55658 55719])
            ("put" code nil nil [55720 55783])
            ("byte-optimize-funcall" function (:arguments ("form")) nil [55786 56037])
            ("byte-optimize-apply" function (:arguments ("form")) nil [56039 56889])
            ("put" code nil nil [56891 56945])
            ("put" code nil nil [56946 56998])
            ("put" code nil nil [57001 57048])
            ("put" code nil nil [57049 57097])
            ("byte-optimize-letX" function (:arguments ("form")) nil [57098 57888])
            ("put" code nil nil [57891 57937])
            ("byte-optimize-nth" function (:arguments ("form")) nil [57938 58147])
            ("put" code nil nil [58149 58201])
            ("byte-optimize-nthcdr" function (:arguments ("form")) nil [58202 58476])
            ("put" code nil nil [58478 58526])
            ("byte-optimize-cons" function (:arguments ("form")) nil [58527 58834])
            ("put" code nil nil [58836 58884])
            ("byte-optimize-list" function (:arguments ("form")) nil [58885 58961])
            ("put" code nil nil [58963 59015])
            ("byte-optimize-append" function (:arguments ("form")) nil [59016 62100])
            ("put" code nil nil [62155 62201])
            ("byte-optimize-set" function (:arguments ("form")) nil [62202 62699])
            ("let" code nil nil [63676 68844])
            ("let" code nil nil [69585 71236])
            ("byte-constref-ops" variable
               (:constant-flag t
                :default-value '(byte-constant byte-constant2 byte-varref byte-varset byte-varbind))
                nil [71239 71338])
            ("bytedecomp-op" variable nil nil [71398 71420])
            ("bytedecomp-ptr" variable nil nil [71421 71444])
            ("disassemble-offset" function (:arguments ("bytes")) nil [71578 73088])
            ("byte-compile-tag-number" variable nil nil [73090 73122])
            ("byte-decompile-bytecode" function (:arguments ("bytes" "constvec")) nil [73307 73555])
            ("byte-decompile-bytecode-1" function (:arguments ("bytes" "constvec" "make-spliceable")) nil [73961 78236])
            ("byte-tagref-ops" variable
               (:constant-flag t
                :default-value (cons 'TAG byte-goto-ops))
                nil [78264 78316])
            ("byte-conditional-ops" variable
               (:constant-flag t
                :default-value '(byte-goto-if-nil byte-goto-if-not-nil byte-goto-if-nil-else-pop byte-goto-if-not-nil-else-pop))
                nil [78318 78452])
            ("byte-after-unbind-ops" variable
               (:constant-flag t
                :default-value '(byte-constant byte-dup byte-stack-ref byte-stack-set byte-discard byte-symbolp byte-consp byte-stringp byte-listp byte-numberp byte-integerp byte-eq byte-not byte-cons byte-list1 byte-list2 byte-list3 byte-list4 byte-listN byte-interactive-p))
                nil [78454 79126])
            ("byte-compile-side-effect-and-error-free-ops" variable
               (:constant-flag t
                :default-value '(byte-constant byte-dup byte-symbolp byte-consp byte-stringp byte-listp byte-integerp byte-numberp byte-eq byte-equal byte-not byte-car-safe byte-cdr-safe byte-cons byte-list1 byte-list2 byte-list3 byte-list4 byte-listN byte-point byte-point-max byte-point-min byte-following-char byte-preceding-char byte-current-column byte-eolp byte-eobp byte-bolp byte-bobp byte-current-buffer byte-stack-ref))
                nil [79128 79606])
            ("byte-compile-side-effect-free-ops" variable
               (:constant-flag t
                :default-value (append '(byte-varref byte-nth byte-memq byte-car byte-cdr byte-length byte-aref byte-symbol-value byte-get byte-concat2 byte-concat3 byte-sub1 byte-add1 byte-eqlsign byte-gtr byte-lss byte-leq byte-geq byte-diff byte-negate byte-plus byte-max byte-min byte-mult byte-char-after byte-char-syntax byte-buffer-substring byte-string= byte-string< byte-nthcdr byte-elt byte-member byte-assq byte-quo byte-rem byte-substring) byte-compile-side-effect-and-error-free-ops))
                nil [79608 80151])
            ("byte-optimize-lapcode" function (:arguments ("lap" "_for-effect")) nil [81009 105759])
            ("byte-opt" package nil nil [105761 105780])
            ("or" code nil nil [105963 106586]))          
      :file "byte-opt.el.gz"
      :pointmax 106620
      :fsize 27415
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 106591 . 106592) (symbol 106588 . 106591) (symbol 105944 . 105961) (open-paren 105943 . 105944) (close-paren 2726 . 2727) (symbol 2691 . 2708) (open-paren 2690 . 2691) (close-paren 2668 . 2669) (symbol 2633 . 2650) (open-paren 2632 . 2633)))
    (semanticdb-table "semanticdb-table-4aad6134"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-version" variable (:default-value "1.4") nil [1798 1856])
            ("eieio-version" function (:user-visible-flag t) nil [1858 1966])
            ("eieio-core" include nil nil [1968 1989])
            ("subr-x" include nil nil [2009 2026])
            ("defclass" function (:arguments ("name" "superclasses" "slots" "options-and-doc")) nil [2059 13152])
            ("oref" function (:arguments ("obj" "slot")) nil [13190 13350])
            ("defalias" code nil nil [13352 13387])
            ("defalias" code nil nil [13388 13427])
            ("make-obsolete" code nil nil [13428 13506])
            ("oref-default" function (:arguments ("class" "slot")) nil [13508 13742])
            ("with-slots" function (:arguments ("spec-list" "object" "body")) nil [13769 14988])
            ("eieio-pcase-slot-index-table" function (:arguments ("obj")) nil [15101 15274])
            ("eieio-pcase-slot-index-from-index-table" function (:arguments ("index-table" "slot")) nil [15276 15424])
            ("pcase-defmacro" code nil nil [15426 16434])
            ("define-obsolete-function-alias" code nil nil [16543 16624])
            ("eieio--object-names" variable
               (:constant-flag t
                :default-value (make-hash-table :test #'eq :weakness 'key))
                nil [17009 17083])
            ("cl-defgeneric" code nil nil [17085 17277])
            ("define-obsolete-function-alias" code nil nil [17279 17367])
            ("eieio-object-name" function (:arguments ("obj" "extra")) nil [17369 17833])
            ("define-obsolete-function-alias" code nil nil [17834 17906])
            ("eieio-object-class" function (:arguments ("obj")) nil [17908 18137])
            ("define-obsolete-function-alias" code nil nil [18138 18212])
            ("define-obsolete-function-alias" code nil nil [18234 18304])
            ("eieio-object-class-name" function (:arguments ("obj")) nil [18306 18477])
            ("define-obsolete-function-alias" code nil nil [18478 18564])
            ("eieio-class-parents" function (:arguments ("class")) nil [18566 18854])
            ("define-obsolete-function-alias" code nil nil [18856 18932])
            ("eieio-class-children" function (:arguments ("class")) nil [18934 19157])
            ("define-obsolete-function-alias" code nil nil [19158 19238])
            ("define-obsolete-function-alias" code nil nil [19268 19358])
            ("define-obsolete-function-alias" code nil nil [19359 19448])
            ("eieio-class-parent" function (:arguments ("class")) nil [19450 19590])
            ("define-obsolete-function-alias" code nil nil [19591 19665])
            ("same-class-p" function (:arguments ("obj" "class")) nil [19667 19897])
            ("object-of-class-p" function (:arguments ("obj" "class")) nil [19899 20138])
            ("defalias" code nil nil [20166 20212])
            ("child-of-class-p" function (:arguments ("child" "class")) nil [20214 20831])
            ("eieio-slot-descriptor-name" function (:arguments ("slot")) nil [20833 20908])
            ("eieio-class-slots" function (:arguments ("class")) nil [20910 21221])
            ("object-slots" function (:arguments ("obj")) nil [21223 21467])
            ("eieio--class-slot-initarg" function (:arguments ("class" "slot")) nil [21469 21774])
            ("oset" function (:arguments ("obj" "slot" "value")) nil [21801 22090])
            ("oset-default" function (:arguments ("class" "slot" "value")) nil [22092 22443])
            ("slot-boundp" function (:arguments ("object" "slot")) nil [22488 23074])
            ("slot-makeunbound" function (:arguments ("object" "slot")) nil [23076 23190])
            ("slot-exists-p" function (:arguments ("object-or-class" "slot")) nil [23192 23876])
            ("find-class" function (:arguments ("symbol" "errorp")) nil [23878 24236])
            ("object-assoc" function (:arguments ("key" "slot" "list")) nil [24297 24835])
            ("object-assoc-list" function (:arguments ("slot" "list")) nil [24837 25295])
            ("object-assoc-list-safe" function (:arguments ("slot" "list")) nil [25297 25836])
            ("object-add-to-list" function (:arguments ("object" "slot" "item" "append")) nil [25838 26643])
            ("object-remove-from-list" function (:arguments ("object" "slot" "item")) nil [26645 26995])
            ("eieio-default-superclass" type (:type "class") nil [27380 27647])
            ("setq" code nil nil [27649 27723])
            ("define-obsolete-function-alias" code nil nil [27725 27809])
            ("cl-defgeneric" code nil nil [27826 28121])
            ("define-obsolete-function-alias" code nil nil [28123 28191])
            ("cl-defmethod" code nil nil [28193 29326])
            ("cl-defgeneric" code nil nil [29374 29525])
            ("cl-defmethod" code nil nil [29527 30014])
            ("cl-defgeneric" code nil nil [30062 30170])
            ("cl-defmethod" code nil nil [30172 31914])
            ("cl-defgeneric" code nil nil [31916 32471])
            ("cl-defgeneric" code nil nil [32473 32605])
            ("cl-defmethod" code nil nil [32607 33413])
            ("cl-defgeneric" code nil nil [33415 33678])
            ("cl-defmethod" code nil nil [33680 34055])
            ("cl-defgeneric" code nil nil [34057 34233])
            ("cl-defgeneric" code nil nil [34235 34560])
            ("with-suppressed-warnings" code nil nil [34562 35239])
            ("with-suppressed-warnings" code nil nil [35241 35605])
            ("eieio-print-depth" variable nil nil [35608 35731])
            ("eieio-print-indentation" variable (:default-value t) nil [35733 35821])
            ("eieio-print-object-name" variable (:default-value t) nil [35823 36025])
            ("cl-defgeneric" code nil nil [36027 36196])
            ("cl-defmethod" code nil nil [36198 38700])
            ("eieio-override-prin1" function (:arguments ("thing")) nil [38702 39468])
            ("eieio-list-prin1" function (:arguments ("list")) nil [39470 40064])
            ("eieio-change-class" function (:arguments ("_obj" "_class")) nil [40109 40322])
            ("define-obsolete-function-alias" code nil nil [40323 40397])
            ("eieio" package nil nil [40399 40415]))          
      :file "eieio.el.gz"
      :pointmax 40440
      :fsize 12151
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 2026 . 2027) (symbol 1991 . 2008) (open-paren 1990 . 1991)))
    (semanticdb-table "semanticdb-table-4f1aee64"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("byte-run--ssp-seen" variable nil nil [1121 1366])
            ("defalias" code nil nil [1368 2309])
            ("defalias" code nil nil [2311 3033])
            ("defalias" code nil nil [3035 3587])
            ("defalias" code nil nil [3589 4053])
            ("function-put" code nil nil [4054 4096])
            ("function-put" code nil nil [4097 4145])
            ("defalias" code nil nil [4593 4801])
            ("defalias" code nil nil [4803 4958])
            ("defalias" code nil nil [4960 5129])
            ("defalias" code nil nil [5131 5268])
            ("defalias" code nil nil [5270 5431])
            ("put" code nil nil [5433 5550])
            ("defalias" code nil nil [5552 6516])
            ("defalias" code nil nil [6518 6758])
            ("defalias" code nil nil [6760 7014])
            ("defalias" code nil nil [7016 7155])
            ("defalias" code nil nil [7157 7319])
            ("defalias" code nil nil [7321 7474])
            ("defalias" code nil nil [7476 7892])
            ("defun-declarations-alist" variable (:default-value (list (list 'advertised-calling-convention #'byte-run--set-advertised-calling-convention) (list 'obsolete #'byte-run--set-obsolete) (list 'interactive-only #'byte-run--set-interactive-only) (list 'pure #'byte-run--set-pure "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list 'side-effect-free #'byte-run--set-side-effect-free "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list 'compiler-macro #'byte-run--set-compiler-macro) (list 'doc-string #'byte-run--set-doc-string) (list 'indent #'byte-run--set-indent) (list 'speed #'byte-run--set-speed) (list 'completion #'byte-run--set-completion) (list 'modes #'byte-run--set-modes) (list 'interactive-args #'byte-run--set-interactive-args))) nil [7953 9340])
            ("defalias" code nil nil [9342 9516])
            ("defalias" code nil nil [9518 9686])
            ("defalias" code nil nil [9688 11737])
            ("defalias" code nil nil [11739 12717])
            ("macro-declarations-alist" variable (:default-value (cons (list 'debug #'byte-run--set-debug) (cons (list 'no-font-lock-keyword #'byte-run--set-no-font-lock-keyword) defun-declarations-alist))) nil [12719 13285])
            ("defalias" code nil nil [13287 14824])
            ("defun" function (:arguments ("name" "arglist" "body")) nil [14873 16599])
            ("defalias" code nil nil [16681 16867])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [17878 18583])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test 'eq :weakness 'key)) nil [18585 18663])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [18665 19035])
            ("get-advertised-calling-convention" function (:arguments ("function")) nil [19037 19214])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [19216 19935])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [19937 20760])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [20762 21440])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [21442 23343])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [23673 24096])
            ("dont-compile" function (:arguments ("body")) nil [24098 24407])
            ("eval-when-compile" function (:arguments ("body")) nil [24650 25143])
            ("eval-and-compile" function (:arguments ("body")) nil [25145 25730])
            ("with-no-warnings" function (:arguments ("body")) nil [25732 25940])
            ("with-suppressed-warnings" function (:arguments ("warnings" "body")) nil [25942 27880])
            ("byte-run--unescaped-character-literals-warning" function nil nil [27883 28674])
            ("byte-compile-info" function (:arguments ("string" "message" "type")) nil [28676 29065])
            ("byte-compile-info-string" function (:arguments ("args")) nil [29067 29276])
            ("byte-compile-info-message" function (:arguments ("args")) nil [29278 29498]))          
      :file "byte-run.el.gz"
      :pointmax 30819
      :fsize 8721
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4a824eda"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2017 2034])
            ("eldoc" customgroup (:user-visible-flag t) nil [2037 2155])
            ("eldoc-idle-delay" variable (:default-value 0.5) nil [2157 2485])
            ("eldoc-print-after-edit" variable nil nil [2487 2658])
            ("eldoc-echo-area-display-truncation-message" variable (:default-value t) nil [2660 3087])
            ("eldoc-minor-mode-string" variable (:default-value (purecopy " ElDoc")) nil [3104 3285])
            ("eldoc-argument-case" variable (:default-value nil) nil [3287 3750])
            ("make-obsolete-variable" code nil nil [3751 3807])
            ("eldoc-echo-area-use-multiline-p" variable (:default-value 'truncate-sym-name-if-fit) nil [3809 5252])
            ("eldoc-echo-area-prefer-doc-buffer" variable nil nil [5254 5712])
            ("eldoc-highlight-function-argument" variable
               (:default-value '((t (:inherit bold)))
                :type "face")
                nil [5714 5952])
            ("eldoc-message-commands-table-size" variable (:default-value 31) nil [5987 6364])
            ("eldoc-message-commands" variable (:default-value (make-vector eldoc-message-commands-table-size 0)) nil [6366 7012])
            ("eldoc-last-data" variable (:default-value (make-vector 3 nil)) nil [7033 7439])
            ("make-obsolete-variable" code nil nil [7440 7511])
            ("eldoc-last-message" variable nil nil [7513 7544])
            ("eldoc-timer" variable nil nil [7546 7594])
            ("eldoc-current-idle-delay" variable (:default-value eldoc-idle-delay) nil [7596 7765])
            ("eldoc-message-function" variable (:default-value nil) nil [7767 7939])
            ("eldoc-edit-message-commands" function nil nil [7941 8411])
            ("define-minor-mode" code nil nil [8430 9643])
            ("define-globalized-minor-mode" code nil nil [9660 10324])
            ("eldoc--eval-expression-setup" function nil nil [10326 11076])
            ("turn-on-eldoc-mode" function nil nil [11093 11289])
            ("eldoc-schedule-timer" function nil nil [11293 12197])
            ("eldoc-mode-line-string" variable nil nil [12199 12234])
            ("put" code nil nil [12235 12288])
            ("eldoc-minibuffer-message" function (:arguments ("format-string" "args")) nil [12290 13525])
            ("make-obsolete" code nil nil [13527 13619])
            ("eldoc-message" function (:arguments ("string")) nil [13620 13684])
            ("eldoc--message" function (:arguments ("string")) nil [13685 14238])
            ("eldoc--message-command-p" function (:arguments ("command")) nil [14240 14436])
            ("eldoc-pre-command-refresh-echo-area" function nil nil [14974 15506])
            ("eldoc--last-request-state" variable nil nil [15747 15844])
            ("eldoc--request-state" function nil nil [15845 15998])
            ("eldoc-display-message-p" function nil nil [16000 16198])
            ("make-obsolete" code nil nil [16200 16331])
            ("eldoc-display-message-no-interference-p" function nil nil [16469 17263])
            ("eldoc-documentation-functions" variable nil nil [17267 19577])
            ("eldoc-display-functions" variable (:default-value '(eldoc-display-in-echo-area eldoc-display-in-buffer)) nil [19579 20248])
            ("eldoc--doc-buffer" variable nil nil [20250 20328])
            ("eldoc--doc-buffer-docs" variable nil nil [20330 20411])
            ("eldoc-doc-buffer" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [20413 21125])
            ("eldoc--format-doc-buffer" function (:arguments ("docs")) nil [21127 22923])
            ("eldoc--echo-area-substring" function (:arguments ("available")) nil [22925 24060])
            ("eldoc--echo-area-prefer-doc-buffer-p" function (:arguments ("truncatedp")) nil [24062 24525])
            ("eldoc-display-in-echo-area" function (:arguments ("docs" "_interactive")) nil [24527 27684])
            ("eldoc-display-in-buffer" function (:arguments ("docs" "interactive")) nil [27686 27898])
            ("eldoc-documentation-default" function nil nil [27900 28203])
            ("eldoc--documentation-compose-1" function (:arguments ("eagerlyp")) nil [28205 28794])
            ("eldoc-documentation-compose" function nil nil [28796 29025])
            ("eldoc-documentation-compose-eagerly" function nil nil [29027 29254])
            ("eldoc-documentation-enthusiast" function nil nil [29256 29747])
            ("eldoc--documentation-strategy-defcustom" function (:arguments ("main" "secondary" "value" "docstring" "more")) nil [30099 30594])
            ("eldoc--documentation-strategy-defcustom" code nil nil [30596 32866])
            ("eldoc--supported-p" function nil nil [32868 33679])
            ("eldoc--enthusiasm-curbing-timer" variable nil nil [33681 34013])
            ("defalias" code nil nil [34015 34066])
            ("eldoc--make-callback" variable nil nil [34160 34239])
            ("eldoc--make-callback" function (:arguments ("method")) nil [34472 35411])
            ("eldoc--invoke-strategy" function (:arguments ("interactive")) nil [35413 39161])
            ("eldoc-print-current-symbol-info" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [39163 39597])
            ("eldoc-add-command" function (:arguments ("cmds")) nil [40036 40273])
            ("eldoc-add-command-completions" function (:arguments ("names")) nil [40275 40489])
            ("eldoc-remove-command" function (:arguments ("cmds")) nil [40491 40730])
            ("eldoc-remove-command-completions" function (:arguments ("names")) nil [40732 40971])
            ("eldoc-add-command-completions" code nil nil [41000 41483])
            ("eldoc" package nil nil [41485 41501]))          
      :file "eldoc.el.gz"
      :pointmax 41526
      :fsize 12404
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 2034 . 2035) (symbol 1999 . 2016) (open-paren 1998 . 1999)))
    (semanticdb-table "semanticdb-table-4f050a92"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1096 1112])
            ("seq" include nil nil [1113 1127])
            ("cl-lib" include nil nil [1147 1164])
            ("eieio-instance-inheritor" type
               (:members 
                  ( ("parent-instance" variable
                       (:documentation "The parent of this instance.
If a slot of this class is referenced, and is unbound, then the parent
is checked for a value."
                        :type "eieio-instance-inheritor")
                        nil nil))                  
                :type "class")
                nil [1353 1882])
            ("cl-defmethod" code nil nil [1884 2442])
            ("cl-defmethod" code nil nil [2444 3103])
            ("cl-defmethod" code nil nil [3105 3713])
            ("eieio-instance-tracker" type
               (:members 
                  ( ("tracking-symbol" variable
                       (:documentation "The symbol used to maintain a list of our instances.
The instance list is treated as a variable, with new instances added to it."
                        :static-flag t
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [3908 4355])
            ("cl-defmethod" code nil nil [4357 4778])
            ("cl-defmethod" code nil nil [4780 4992])
            ("eieio-instance-tracker-find" function (:arguments ("key" "slot" "list-symbol")) nil [5038 5240])
            ("eieio-singleton" type
               (:members 
                  ( ("singleton" variable
                       (:documentation "The only instance of this class that will be instantiated.
Multiple calls to `make-instance' will return this object."
                        :static-flag t
                        :type "eieio-singleton")
                        nil nil))                  
                :type "class")
                nil [5605 5983])
            ("cl-defmethod" code nil nil [5985 6502])
            ("eieio-named" type
               (:members 
                  ( ("object-name" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [6524 6641])
            ("cl-defmethod" code nil nil [6643 6808])
            ("cl-defgeneric" code nil nil [6810 7103])
            ("define-obsolete-function-alias" code nil nil [7104 7199])
            ("with-suppressed-warnings" code nil nil [7201 7453])
            ("cl-defmethod" code nil nil [7455 8381])
            ("cl-defmethod" code nil nil [8383 8737])
            ("eieio-persistent" type
               (:members 
                  ( ("file" variable
                       (:documentation "The save file for this persistent object.
This must be a string, and must be specified when the new object is
instantiated."
                        :type "string")
                        nil nil)
                    ("extension" variable
                       (:documentation "Extension of files saved by this object.
Enables auto-choosing nice file names based on name."
                        :static-flag t
                        :default-value ".eieio"
                        :type "string")
                        nil nil)
                    ("file-header-line" variable
                       (:documentation "Header line for the save file.
This is used with the `object-write' method."
                        :static-flag t
                        :default-value ";; EIEIO PERSISTENT OBJECT"
                        :type "string")
                        nil nil)
                    ("do-backups" variable
                       (:documentation "Saving this object should make backup files.
Setting to nil will mean no backups are made."
                        :static-flag t
                        :default-value "t"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [9324 10473])
            ("cl-defmethod" code nil nil [10475 10953])
            ("eieio-persistent-read" function (:arguments ("filename" "class" "allow-subclass")) nil [10955 12285])
            ("cl-defgeneric" code nil nil [12287 14014])
            ("eieio-persistent-fix-value" function (:arguments ("proposed-value")) nil [14016 17013])
            ("cl-defmethod" code nil nil [17015 17269])
            ("cl-defmethod" code nil nil [17271 17501])
            ("cl-defmethod" code nil nil [17503 18768])
            ("eieio-base" package nil nil [18880 18901]))          
      :file "eieio-base.el.gz"
      :pointmax 18931
      :fsize 6244
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 1164 . 1165) (symbol 1129 . 1146) (open-paren 1128 . 1129)))
    (semanticdb-table "semanticdb-table-4f1a74aa"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode-pretty-mode-name" function (:arguments ("mode" "lighter")) nil [2105 3604])
            ("easy-mmode--arg-docstring" variable
               (:constant-flag t
                :default-value "This is a %sminor mode.  If called interactively, toggle the
`%s' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `%s'.

The mode's hook is called both when the mode is enabled and when
it is disabled.")
                nil [3606 4154])
            ("easy-mmode--mode-docstring" function (:arguments ("doc" "mode-pretty-name" "keymap-sym" "getter" "global")) nil [4156 6059])
            ("defalias" code nil nil [6076 6136])
            ("define-minor-mode" function (:arguments ("mode" "doc" "body")) nil [6152 19044])
            ("defalias" code nil nil [19098 19170])
            ("defalias" code nil nil [19186 19253])
            ("define-globalized-minor-mode" function (:arguments ("global-mode" "mode" "turn-on" "body")) nil [19269 28062])
            ("easy-mmode--globalized-predicate-p" function (:arguments ("predicate")) nil [28064 28858])
            ("easy-mmode-set-keymap-parents" function (:arguments ("m" "parents")) nil [28891 29031])
            ("easy-mmode-define-keymap" function (:arguments ("bs" "name" "m" "args")) nil [29048 30759])
            ("easy-mmode-defmap" function (:arguments ("m" "bs" "doc" "args")) nil [30776 31347])
            ("easy-mmode-define-syntax" function (:arguments ("css" "args")) nil [31385 31827])
            ("easy-mmode-defsyntax" function (:arguments ("st" "css" "doc" "args")) nil [31844 32195])
            ("easy-mmode-define-navigation" function (:arguments ("base" "re" "name" "endfun" "narrowfun" "body")) nil [32242 35571])
            ("easy-mmode" package nil nil [35573 35594]))          
      :file "easy-mmode.el.gz"
      :pointmax 35624
      :fsize 10837
      :lastmodtime '(25742 56222 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4703ae48"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("backtrace" include nil nil [1937 1957])
            ("macroexp" include nil nil [1958 1977])
            ("cl-lib" include nil nil [1978 1995])
            ("seq" include nil nil [1996 2010])
            ("pcase" include nil nil [2030 2046])
            ("debug" include nil nil [2048 2064])
            ("edebug" customgroup (:user-visible-flag t) nil [2079 2159])
            ("edebug-enabled-breakpoint" variable
               (:default-value '((t :inherit highlight))
                :type "face")
                nil [2161 2283])
            ("edebug-disabled-breakpoint" variable
               (:default-value '((((class color) (min-colors 88) (background light)) :background "#ddffdd" :extend t) (((class color) (min-colors 88) (background dark)) :background "#335533" :extend t))
                :type "face")
                nil [2285 2571])
            ("edebug-setup-hook" variable nil nil [2573 2911])
            ("edebug-all-defs" variable nil nil [3133 3699])
            ("edebug-all-forms" variable nil nil [3716 3970])
            ("edebug-eval-macro-args" variable nil nil [3972 4402])
            ("edebug-max-depth" variable (:default-value 150) nil [4404 4889])
            ("edebug-save-windows" variable (:default-value t) nil [4891 5314])
            ("edebug-save-displayed-buffer-points" variable nil nil [5316 5858])
            ("edebug-initial-mode" variable (:default-value 'step) nil [5860 6308])
            ("edebug-trace" variable nil nil [6310 6653])
            ("edebug-test-coverage" variable nil nil [6655 7027])
            ("edebug-continue-kbd-macro" variable nil nil [7029 7202])
            ("edebug-print-length" variable (:default-value 50) nil [7205 7357])
            ("edebug-print-level" variable (:default-value 50) nil [7358 7508])
            ("edebug-print-circle" variable (:default-value t) nil [7509 7639])
            ("edebug-unwrap-results" variable nil nil [7641 7931])
            ("edebug-on-error" variable (:default-value t) nil [7933 8547])
            ("edebug-on-quit" variable (:default-value t) nil [8549 8653])
            ("edebug-global-break-condition" variable nil nil [8655 8847])
            ("edebug-sit-for-seconds" variable (:default-value 1) nil [8849 8978])
            ("edebug-sit-on-break" variable (:default-value t) nil [8980 9126])
            ("edebug-get-spec" function (:arguments ("symbol")) nil [9154 9648])
            ("define-obsolete-function-alias" code nil nil [9650 9724])
            ("edebug--get-elem-spec" function (:arguments ("elem")) nil [9726 10031])
            ("edebug-basic-spec" function (:arguments ("spec")) nil [10048 10489])
            ("edebug-lambda-list-keywordp" function (:arguments ("object")) nil [10506 10724])
            ("edebug-last-sexp" function nil nil [10727 10982])
            ("edebug-window-list" function nil nil [10984 11206])
            ("edebug-two-window-p" function nil nil [11222 11382])
            ("edebug-sort-alist" function (:arguments ("alist" "function")) nil [11384 11627])
            ("edebug-save-restriction" function (:arguments ("body")) nil [11643 12279])
            ("edebug-trace-buffer" variable
               (:constant-flag t
                :default-value "*edebug-trace*")
                nil [12294 12386])
            ("edebug-pop-to-buffer" function (:arguments ("buffer" "window")) nil [12388 13802])
            ("edebug-get-displayed-buffer-points" function nil nil [13824 14109])
            ("edebug-set-buffer-points" function (:arguments ("buffer-points")) nil [14112 14422])
            ("edebug-current-windows" function (:arguments ("which-windows")) nil [14424 14933])
            ("edebug-set-windows" function (:arguments ("window-info")) nil [14935 15703])
            ("edebug--read" function (:arguments ("orig" "stream")) nil [15865 16814])
            ("edebug-result" variable nil nil [16816 16838])
            ("edebug--eval-defun" function (:arguments ("orig-fun" "edebug-it")) nil [16997 17703])
            ("edebug-eval-defun" function
               (:user-visible-flag t
                :arguments ("edebug-it"))
                nil [17705 17978])
            ("defalias" code nil nil [17995 18047])
            ("edebug-eval-top-level-form" function (:user-visible-flag t) nil [18064 19195])
            ("edebug-active" variable nil nil [19198 19224])
            ("edebug-read-top-level-form" function nil nil [19260 19657])
            ("define-obsolete-function-alias" code nil nil [19696 19772])
            ("edebug-all-defs" function (:user-visible-flag t) nil [19789 20004])
            ("edebug-all-forms" function (:user-visible-flag t) nil [20022 20229])
            ("edebug-install-read-eval-functions" function nil nil [20232 20408])
            ("edebug-uninstall-read-eval-functions" function nil nil [20410 20578])
            ("defvar-local" code nil nil [20718 21238])
            ("edebug--form-data" type
               (:members ("name" "begin" "end")
                :type "struct")
                nil [21240 21539])
            ("edebug-set-form-data-entry" function (:arguments ("entry" "name" "begin" "end")) nil [21541 21776])
            ("edebug-get-form-data-entry" function (:arguments ("pnt" "end-point")) nil [21778 22488])
            ("edebug-form-data-symbol" function nil nil [22599 22873])
            ("edebug-make-top-form-data-entry" function (:arguments ("new-entry")) nil [22875 23075])
            ("edebug-clear-form-data-entry" function (:arguments ("entry")) nil [23077 23588])
            ("edebug-syntax-error" function (:arguments ("args")) nil [23612 23735])
            ("edebug-read-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-char-table 'syntax-table 'symbol)) (i 0)) (while (< i 33) (aset table i 'space) (setq i (1+ i))) (aset table 40 'lparen) (aset table 41 'rparen) (aset table 39 'quote) (aset table 96 'backquote) (aset table 44 'comma) (aset table 34 'string) (aset table 63 'char) (aset table 91 'lbracket) (aset table 93 'rbracket) (aset table 46 'dot) (aset table 35 'hash) table))
                nil [23738 24518])
            ("edebug-next-token-class" function nil nil [24520 25040])
            ("edebug-skip-whitespace" function nil nil [25043 25309])
            ("edebug-read-sexp" function nil nil [25364 26286])
            ("edebug-get-edebug-or-ghost" function (:arguments ("name")) nil [26312 26769])
            ("edebug-offsets" variable nil nil [27094 27121])
            ("edebug-offsets-stack" variable nil nil [27234 27267])
            ("edebug-current-offset" variable nil nil [27268 27302])
            ("edebug-read-objects" variable nil nil [27534 27566])
            ("edebug-read-dotted-list" variable nil nil [27735 27771])
            ("edebug-initialize-offsets" function nil nil [27773 27883])
            ("edebug-store-before-offset" function (:arguments ("point")) nil [27885 28462])
            ("edebug-store-after-offset" function (:arguments ("point")) nil [28464 29396])
            ("edebug-ignore-offset" function nil nil [29398 29538])
            ("edebug-storing-offsets" function (:arguments ("point" "body")) nil [29540 29758])
            ("edebug-read-alist" variable
               (:constant-flag t
                :default-value '((symbol . edebug-read-symbol) (lparen . edebug-read-list) (string . edebug-read-string) (quote . edebug-read-quote) (backquote . edebug-read-backquote) (comma . edebug-read-comma) (lbracket . edebug-read-vector) (hash . edebug-read-special)))
                nil [29858 30165])
            ("edebug-read-storing-offsets" function (:arguments ("stream")) nil [30167 30460])
            ("defalias" code nil nil [30462 30499])
            ("defalias" code nil nil [30500 30537])
            ("edebug-read-quote" function (:arguments ("stream")) nil [30539 30725])
            ("edebug-read-backquote" function (:arguments ("stream")) nil [30727 30911])
            ("edebug-read-comma" function (:arguments ("stream")) nil [30913 31482])
            ("edebug-read-special" function (:arguments ("stream")) nil [31484 33283])
            ("edebug-read-list" function (:arguments ("stream")) nil [33285 33967])
            ("edebug-read-vector" function (:arguments ("stream")) nil [33969 34258])
            ("edebug-dotted-spec" variable nil nil [34900 34995])
            ("edebug-new-cursor" function (:arguments ("expressions" "offsets")) nil [34997 35207])
            ("edebug-set-cursor" function (:arguments ("cursor" "expressions" "offsets")) nil [35209 35415])
            ("edebug-copy-cursor" function (:arguments ("cursor")) nil [35417 35543])
            ("edebug-cursor-expressions" function (:arguments ("cursor")) nil [35545 35605])
            ("edebug-cursor-offsets" function (:arguments ("cursor")) nil [35606 35662])
            ("edebug-empty-cursor" function (:arguments ("cursor")) nil [35664 35792])
            ("edebug-top-element" function (:arguments ("cursor")) nil [35794 35920])
            ("edebug-top-element-required" function (:arguments ("cursor" "error")) nil [35922 36272])
            ("edebug-top-offset" function (:arguments ("cursor")) nil [36274 36398])
            ("edebug-move-cursor" function (:arguments ("cursor")) nil [36400 36862])
            ("edebug-before-offset" function (:arguments ("cursor")) nil [36865 37193])
            ("edebug-after-offset" function (:arguments ("cursor")) nil [37195 37399])
            ("edebug-top-window-data" variable nil nil [38594 38625])
            ("edebug-gate" variable nil nil [38627 38651])
            ("edebug-def-name" variable nil nil [38690 38718])
            ("edebug-old-def-name" variable nil nil [38766 38798])
            ("edebug-error-point" variable nil nil [38842 38873])
            ("edebug-best-error" variable nil nil [38874 38904])
            ("edebug-after-instrumentation-function" variable (:default-value nil) nil [39005 39301])
            ("edebug-new-definition-function" variable (:default-value nil) nil [39303 39620])
            ("edebug-behavior-alist" variable (:default-value '((edebug edebug-default-enter edebug-slow-before edebug-slow-after))) nil [39622 40245])
            ("edebug-read-and-maybe-wrap-form" function nil nil [40247 41144])
            ("edebug-read-and-maybe-wrap-form1" function nil nil [41147 44511])
            ("edebug-def-args" variable nil nil [44513 44537])
            ("edebug-inside-func" variable nil nil [44563 44590])
            ("edebug-lexical-macro-ctx" variable nil nil [44701 44806])
            ("edebug-make-enter-wrapper" function (:arguments ("forms")) nil [44808 45942])
            ("edebug-form-begin-marker" variable nil nil [45945 45978])
            ("edebug-offset-index" variable nil nil [46018 46046])
            ("edebug-offset-list" variable nil nil [46082 46109])
            ("edebug-inc-offset" function (:arguments ("offset")) nil [46143 46466])
            ("edebug-make-before-and-after-form" function (:arguments ("before-index" "form" "after-index")) nil [46469 46838])
            ("edebug-make-after-form" function (:arguments ("form" "after-index")) nil [46840 46989])
            ("edebug-unwrap" function (:arguments ("sexp")) nil [46992 47738])
            ("edebug-unwrap*" function (:arguments ("sexp")) nil [47740 47885])
            ("edebug--unwrap1" function (:arguments ("sexp" "hash-table")) nil [47887 49016])
            ("edebug-defining-form" function (:arguments ("cursor" "form-begin" "form-end" "speclist")) nil [49019 49475])
            ("edebug-make-form-wrapper" function (:arguments ("cursor" "form-begin" "form-end" "speclist")) nil [49477 52924])
            ("edebug--restore-breakpoints" function (:arguments ("name")) nil [52926 53897])
            ("edebug-new-definition" function (:arguments ("def-name")) nil [53899 54078])
            ("edebug-clear-frequency-count" function (:arguments ("name")) nil [54081 54329])
            ("edebug-clear-coverage" function (:arguments ("name")) nil [54332 54573])
            ("edebug-form" function (:arguments ("cursor")) nil [54576 56240])
            ("edebug-forms" function (:arguments ("cursor")) nil [56243 56312])
            ("edebug-sexps" function (:arguments ("cursor")) nil [56313 56382])
            ("edebug-list-form-args" function (:arguments ("head" "cursor")) nil [56384 57315])
            ("edebug-list-form" function (:arguments ("cursor")) nil [57318 58592])
            ("edebug-matching-depth" variable nil nil [58618 58650])
            ("edebug-no-match" function (:arguments ("cursor" "args")) nil [58875 59350])
            ("edebug-match" function (:arguments ("cursor" "specs")) nil [59353 59642])
            ("edebug-match-one-spec" function (:arguments ("cursor" "spec")) nil [59645 59971])
            ("edebug-match-specs" function (:arguments ("cursor" "specs" "remainder-handler")) nil [59974 62480])
            ("dolist" code nil nil [62763 63210])
            ("edebug-match-symbol" function (:arguments ("cursor" "symbol")) nil [63212 64108])
            ("edebug-match-sexp" function (:arguments ("cursor")) nil [64111 64246])
            ("edebug-match-form" function (:arguments ("cursor")) nil [64248 64312])
            ("defalias" code nil nil [64314 64363])
            ("edebug-match-body" function (:arguments ("cursor")) nil [64469 64528])
            ("cl-defmethod" code nil nil [64530 64714])
            ("edebug-&optional-wrapper" function (:arguments ("cursor" "specs" "remainder-handler")) nil [64716 65218])
            ("cl-defgeneric" code nil nil [65221 65367])
            ("cl-defmethod" code nil nil [65369 65823])
            ("cl-defmethod" code nil nil [65826 66729])
            ("cl-defmethod" code nil nil [66731 67995])
            ("cl-defmethod" code nil nil [67997 68400])
            ("cl-defmethod" code nil nil [68424 68886])
            ("cl-defmethod" code nil nil [68888 69307])
            ("edebug-match-gate" function (:arguments ("_cursor")) nil [69309 69437])
            ("edebug-match-list" function (:arguments ("cursor" "specs")) nil [69440 71027])
            ("edebug-match-sublist" function (:arguments ("cursor" "specs")) nil [71030 71488])
            ("edebug-match-string" function (:arguments ("cursor" "spec")) nil [71491 71845])
            ("edebug-match-nil" function (:arguments ("cursor")) nil [71847 72033])
            ("edebug-match-function" function (:arguments ("_cursor")) nil [72036 72140])
            ("cl-defmethod" code nil nil [72142 72815])
            ("cl-defmethod" code nil nil [72817 74379])
            ("edebug--concat-name" function (:arguments ("oldname" "newnames")) nil [74381 75382])
            ("def-edebug-elem-spec" code nil nil [75384 75429])
            ("cl-defgeneric" code nil nil [75431 75589])
            ("cl-defmethod" code nil nil [75591 75876])
            ("cl-defmethod" code nil nil [75878 76255])
            ("edebug-match-arg" function (:arguments ("cursor")) nil [76257 76677])
            ("edebug-match-def-form" function (:arguments ("cursor")) nil [76679 77061])
            ("edebug-match-def-body" function (:arguments ("cursor")) nil [77063 77560])
            ("pcase-dolist" code nil nil [77696 79615])
            ("edebug--match-declare-arg" function (:arguments ("head" "pf")) nil [79617 79717])
            ("def-edebug-elem-spec" code nil nil [79719 79826])
            ("def-edebug-elem-spec" code nil nil [79828 79962])
            ("def-edebug-elem-spec" code nil nil [79964 80105])
            ("def-edebug-elem-spec" code nil nil [80107 80153])
            ("def-edebug-elem-spec" code nil nil [80189 80307])
            ("def-edebug-elem-spec" code nil nil [80309 80441])
            ("def-edebug-elem-spec" code nil nil [80583 80836])
            ("def-edebug-elem-spec" code nil nil [80922 81837])
            ("def-edebug-elem-spec" code nil nil [81839 82346])
            ("edebug-`" function (:arguments ("exp")) nil [82970 83044])
            ("edebug-stack" variable nil nil [83071 83096])
            ("edebug-stack-depth" variable (:default-value -1) nil [83184 83214])
            ("edebug-offset-indices" variable nil nil [83252 83286])
            ("edebug-entered" variable nil nil [83438 83590])
            ("edebug-debugger" variable
               (:constant-flag t
                :default-value 'edebug)
                nil [83620 83780])
            ("edebug-function" variable nil nil [83851 83875])
            ("edebug-data" variable nil nil [83921 83941])
            ("edebug-def-mark" variable nil nil [83977 84001])
            ("edebug-freq-count" variable nil nil [84032 84058])
            ("edebug-coverage" variable nil nil [84093 84117])
            ("edebug-buffer" variable nil nil [84174 84196])
            ("edebug-execution-mode" variable (:default-value 'step) nil [84233 84269])
            ("edebug-next-execution-mode" variable nil nil [84305 84344])
            ("edebug-outside-debug-on-error" variable nil nil [84382 84420])
            ("edebug-outside-debug-on-quit" variable nil nil [84459 84496])
            ("edebug-signal" function (:arguments ("signal-name" "signal-data")) nil [84557 85630])
            ("edebug-enter" function (:arguments ("func" "args" "body")) nil [85653 86274])
            ("edebug-default-enter" function (:arguments ("function" "args" "body")) nil [86276 88955])
            ("edebug-var-status" function (:arguments ("var")) nil [88957 89429])
            ("edebug-restore-status" function (:arguments ("var" "status")) nil [89431 89836])
            ("edebug--enter-trace" function (:arguments ("function" "args" "body")) nil [89838 90166])
            ("edebug-tracing" function (:arguments ("msg" "body")) nil [90168 90582])
            ("edebug-print-trace-before" function (:arguments ("msg")) nil [90584 90822])
            ("edebug-print-trace-after" function (:arguments ("msg")) nil [90824 91060])
            ("edebug-slow-before" function (:arguments ("before-index")) nil [91064 91607])
            ("edebug-fast-before" function (:arguments ("_before-index")) nil [91609 91671])
            ("edebug-slow-after" function (:arguments ("_before-index" "after-index" "value")) nil [91673 92332])
            ("edebug-fast-after" function (:arguments ("_before-index" "_after-index" "value")) nil [92333 92439])
            ("edebug-run-slow" function nil nil [92441 92625])
            ("edebug-run-fast" function nil nil [92653 92850])
            ("defalias" code nil nil [92852 92988])
            ("defalias" code nil nil [92989 93123])
            ("edebug--update-coverage" function (:arguments ("after-index" "value")) nil [93125 93506])
            ("edebug-breakpoints" variable nil nil [93552 93579])
            ("edebug-break-data" variable nil nil [93580 93606])
            ("edebug-break" variable nil nil [93642 93663])
            ("edebug-global-break" variable nil nil [93692 93720])
            ("edebug-break-condition" variable nil nil [93756 93787])
            ("edebug-break-result" variable nil nil [93830 93862])
            ("edebug-global-break-result" variable nil nil [93863 93902])
            ("edebug-debugger" function (:arguments ("offset-index" "arg-mode" "value")) nil [93905 95595])
            ("edebug-point" variable nil nil [95921 95942])
            ("edebug-outside-buffer" variable nil nil [95972 96002])
            ("edebug-outside-point" variable nil nil [96042 96071])
            ("edebug-outside-mark" variable nil nil [96102 96130])
            ("edebug-window-data" variable nil nil [96160 96187])
            ("edebug-outside-windows" variable nil nil [96236 96267])
            ("edebug-eval-buffer" variable nil nil [96299 96326])
            ("edebug-outside-d-c-i-n-s-w" variable nil nil [96354 96389])
            ("edebug-eval-list" variable nil nil [96440 96469])
            ("edebug-previous-result" variable nil nil [96507 96542])
            ("edebug--display" function (:arguments ("value" "offset-index" "arg-mode")) nil [96569 96846])
            ("edebug--display-1" function (:arguments ("value" "offset-index" "arg-mode")) nil [96848 107718])
            ("edebug-number-of-recursions" variable nil nil [107721 107759])
            ("edebug-recursion-depth" variable nil nil [107842 107875])
            ("edebug-outside-match-data" variable nil nil [107966 108000])
            ("edebug-backtrace-buffer" variable nil nil [108032 108064])
            ("edebug-inside-windows" variable nil nil [108100 108130])
            ("edebug-mode-map" variable nil nil [108132 108156])
            ("edebug--recursive-edit" function (:arguments ("arg-mode")) nil [108190 111431])
            ("edebug-arrow-alist" variable
               (:constant-flag t
                :default-value '((Continue-fast . "=") (Trace-fast . "-") (continue . ">") (trace . "->") (step . "=>") (next . "=>") (go . "<>") (Go-nonstop . "..")))
                nil [111465 111718])
            ("edebug-overlay-arrow" function nil nil [111720 112150])
            ("edebug-toggle-save-all-windows" function (:user-visible-flag t) nil [112153 112684])
            ("edebug-changing-windows" function (:arguments ("body")) nil [112686 113134])
            ("edebug-toggle-save-selected-window" function (:user-visible-flag t) nil [113136 114144])
            ("edebug-toggle-save-windows" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [114146 114430])
            ("edebug-where" function (:user-visible-flag t) nil [114432 114857])
            ("edebug-view-outside" function (:user-visible-flag t) nil [114859 115338])
            ("edebug-bounce-point" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [115341 116121])
            ("edebug-display-buffer-list" variable nil nil [116270 116373])
            ("edebug-display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [116376 116803])
            ("edebug-find-stop-point" function nil nil [116839 118008])
            ("edebug-next-breakpoint" function (:user-visible-flag t) nil [118011 119246])
            ("edebug-modify-breakpoint" function (:arguments ("flag" "condition" "temporary")) nil [119249 120904])
            ("define-fringe-bitmap" code nil nil [120906 120984])
            ("edebug--overlay-breakpoints" function (:arguments ("function")) nil [120986 122405])
            ("edebug--overlay-breakpoints-remove" function (:arguments ("start" "end")) nil [122407 122578])
            ("edebug-set-breakpoint" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [122580 123085])
            ("edebug-unset-breakpoint" function (:user-visible-flag t) nil [123087 123212])
            ("edebug-unset-breakpoints" function (:user-visible-flag t) nil [123214 123646])
            ("edebug-toggle-disable-breakpoint" function (:user-visible-flag t) nil [123648 124242])
            ("edebug-set-global-break-condition" function
               (:user-visible-flag t
                :arguments ("expression"))
                nil [124244 124741])
            ("edebug-set-mode" function (:arguments ("mode" "shortmsg" "msg")) nil [124774 125184])
            ("defalias" code nil nil [125187 125241])
            ("edebug-step-mode" function (:user-visible-flag t) nil [125243 125386])
            ("edebug-next-mode" function (:user-visible-flag t) nil [125388 125536])
            ("edebug-go-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [125538 125785])
            ("edebug-Go-nonstop-mode" function (:user-visible-flag t) nil [125787 126021])
            ("edebug-trace-mode" function (:user-visible-flag t) nil [126024 126218])
            ("edebug-Trace-fast-mode" function (:user-visible-flag t) nil [126220 126454])
            ("edebug-continue-mode" function (:user-visible-flag t) nil [126456 126670])
            ("edebug-Continue-fast-mode" function (:user-visible-flag t) nil [126672 126923])
            ("edebug-goto-here" function (:user-visible-flag t) nil [127056 127191])
            ("edebug-stop" function (:user-visible-flag t) nil [127194 127339])
            ("edebug-forward" function (:user-visible-flag t) nil [127343 127547])
            ("edebug-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [127550 127940])
            ("edebug-step-out" function (:user-visible-flag t) nil [127942 128658])
            ("edebug-instrument-function" function (:arguments ("func")) nil [128660 130304])
            ("edebug-instrument-callee" function (:user-visible-flag t) nil [130306 131105])
            ("edebug-step-in" function (:user-visible-flag t) nil [131108 131536])
            ("edebug-on-entry" function
               (:user-visible-flag t
                :arguments ("function" "flag"))
                nil [131538 132005])
            ("define-obsolete-function-alias" code nil nil [132007 132104])
            ("define-obsolete-function-alias" code nil nil [132105 132195])
            ("edebug--edebug-on-entry-functions" function nil nil [132197 132450])
            ("edebug-cancel-on-entry" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [132452 133423])
            ("advice-add" code nil nil [133426 133486])
            ("edebug--debug-on-entry" function (:arguments ("orig" "function")) nil [133554 133826])
            ("edebug-top-level-nonstop" function (:user-visible-flag t) nil [133829 134062])
            ("edebug-initial-mode-alist" variable
               (:constant-flag t
                :default-value '((edebug-step-mode . step) (edebug-next-mode . next) (edebug-trace-mode . trace) (edebug-Trace-fast-mode . Trace-fast) (edebug-go-mode . go) (edebug-continue-mode . continue) (edebug-Continue-fast-mode . Continue-fast) (edebug-Go-nonstop-mode . Go-nonstop)))
                nil [134196 134583])
            ("edebug-set-initial-mode" function (:user-visible-flag t) nil [134585 135323])
            ("edebug-outside-excursion" function (:arguments ("body")) nil [135356 137184])
            ("edebug-eval" function (:arguments ("expr")) nil [137186 137252])
            ("edebug-safe-eval" function (:arguments ("expr")) nil [137254 137555])
            ("edebug-report-error" function (:arguments ("value")) nil [137572 138072])
            ("edebug-safe-prin1-to-string" function (:arguments ("value")) nil [138188 138461])
            ("edebug-compute-previous-result" function (:arguments ("previous-value")) nil [138463 138760])
            ("edebug-previous-result" function (:user-visible-flag t) nil [138762 138882])
            ("defalias" code nil nil [138910 138965])
            ("defalias" code nil nil [138966 139008])
            ("defalias" code nil nil [139009 139045])
            ("edebug-eval-expression" function
               (:user-visible-flag t
                :arguments ("expr" "pp"))
                nil [139047 140338])
            ("edebug-eval-last-sexp" function
               (:user-visible-flag t
                :arguments ("display-type"))
                nil [140340 141257])
            ("edebug-eval-print-last-sexp" function
               (:user-visible-flag t
                :arguments ("no-truncate"))
                nil [141259 142207])
            ("edebug-inhibit-emacs-lisp-mode-bindings" variable nil nil [142232 142449])
            ("unless" code nil nil [142507 142936])
            ("defvar-keymap" code nil nil [142938 144798])
            ("define-obsolete-variable-alias" code nil nil [144939 145024])
            ("edebug-global-prefix" variable (:default-value (when-let ((binding (car (where-is-internal 'Control-X-prefix (list global-map))))) (concat binding [88]))) nil [145025 145251])
            ("define-obsolete-variable-alias" code nil nil [145253 145332])
            ("defvar-keymap" code nil nil [145333 146122])
            ("when" code nil nil [146124 146251])
            ("edebug-help" function (:user-visible-flag t) nil [146254 146355])
            ("edebug--mode-saved-vars" variable nil nil [146357 146393])
            ("define-minor-mode" code nil nil [146395 148310])
            ("edebug-kill-buffer" function nil nil [148312 148460])
            ("edebug-eval-result-list" function nil nil [148563 148842])
            ("edebug-eval-display-list" function (:arguments ("eval-result-list")) nil [148844 149311])
            ("edebug-create-eval-buffer" function nil nil [149313 149515])
            ("edebug-eval-display" function (:arguments ("eval-result-list")) nil [149637 149906])
            ("edebug-eval-redisplay" function nil nil [149908 150164])
            ("edebug-visit-eval-list" function (:user-visible-flag t) nil [150166 150340])
            ("edebug-update-eval-list" function (:user-visible-flag t) nil [150343 151036])
            ("edebug-delete-eval-item" function (:user-visible-flag t) nil [151039 151378])
            ("defvar-keymap" code nil nil [151382 151709])
            ("put" code nil nil [151711 151755])
            ("define-derived-mode" code nil nil [151757 152274])
            ("edebug" function (:arguments ("arg-mode" "args")) nil [152711 153707])
            ("defvar-local" code nil nil [153731 153905])
            ("defvar-local" code nil nil [153906 154090])
            ("edebug--frame" type
               (:members ("def-name" "before-index" "after-index")
                :type "struct")
                nil [154092 154342])
            ("edebug-pop-to-backtrace" function (:user-visible-flag t) nil [154344 155315])
            ("edebug--strip-instrumentation" function (:arguments ("frames")) nil [155317 157127])
            ("edebug--symbol-not-prefixed-p" function (:arguments ("sym")) nil [157129 157320])
            ("edebug--unwrap-frame" function (:arguments ("frame")) nil [157322 157752])
            ("edebug--add-source-info" function (:arguments ("frame" "def-name" "before-index" "after-index")) nil [157754 158314])
            ("defvar-keymap" code nil nil [158316 158387])
            ("define-minor-mode" code nil nil [158389 158515])
            ("edebug--backtrace-goto-source" function nil nil [158517 159007])
            ("edebug-backtrace-show-instrumentation" function (:user-visible-flag t) nil [159009 159293])
            ("edebug-backtrace-hide-instrumentation" function (:user-visible-flag t) nil [159295 159553])
            ("edebug-trace-display" function (:arguments ("buf-name" "fmt" "args")) nil [159575 160658])
            ("edebug-trace" function (:arguments ("fmt" "args")) nil [160661 160836])
            ("edebug-display-freq-count" function (:user-visible-flag t) nil [161017 163439])
            ("edebug-temp-display-freq-count" function (:user-visible-flag t) nil [163580 163995])
            ("edebug-toggle" function (:arguments ("variable")) nil [164010 164143])
            ("edebug-mode-menus" variable
               (:constant-flag t
                :default-value '("Edebug" ["Stop" edebug-stop t] ["Step" edebug-step-mode t] ["Next" edebug-next-mode t] ["Trace" edebug-trace-mode t] ["Trace Fast" edebug-Trace-fast-mode t] ["Continue" edebug-continue-mode t] ["Continue Fast" edebug-Continue-fast-mode t] ["Go" edebug-go-mode t] ["Go Nonstop" edebug-Go-nonstop-mode t] "----" ["Help" edebug-help t] ["Abort" abort-recursive-edit t] ["Quit to Top Level" top-level t] ["Quit Nonstop" edebug-top-level-nonstop t] "----" ("Jumps" ["Forward Sexp" edebug-forward-sexp t] ["Step In" edebug-step-in t] ["Step Out" edebug-step-out t] ["Goto Here" edebug-goto-here t]) ("Breaks" ["Set Breakpoint" edebug-set-breakpoint t] ["Unset Breakpoint" edebug-unset-breakpoint t] ["Unset Breakpoints In Form" edebug-unset-breakpoints t] ["Toggle Disable Breakpoint" edebug-toggle-disable-breakpoint t] ["Set Conditional Breakpoint" edebug-set-conditional-breakpoint t] ["Set Global Break Condition" edebug-set-global-break-condition t] ["Show Next Breakpoint" edebug-next-breakpoint t]) ("Views" ["Where am I?" edebug-where t] ["Bounce to Current Point" edebug-bounce-point t] ["View Outside Windows" edebug-view-outside t] ["Previous Result" edebug-previous-result t] ["Show Backtrace" edebug-pop-to-backtrace t] ["Display Freq Count" edebug-display-freq-count t]) ("Eval" ["Expression" edebug-eval-expression t] ["Last Sexp" edebug-eval-last-sexp t] ["Visit Eval List" edebug-visit-eval-list t]) ("Options" ["Edebug All Defs" edebug-all-defs :style toggle :selected edebug-all-defs] ["Edebug All Forms" edebug-all-forms :style toggle :selected edebug-all-forms] "----" ["Tracing" (edebug-toggle 'edebug-trace) :style toggle :selected edebug-trace] ["Test Coverage" (edebug-toggle 'edebug-test-coverage) :style toggle :selected edebug-test-coverage] ["Save Windows" edebug-toggle-save-windows :style toggle :selected edebug-save-windows] ["Save Point" (edebug-toggle 'edebug-save-displayed-buffer-points) :style toggle :selected edebug-save-displayed-buffer-points])))
                nil [164145 166465])
            ("edebug-set-conditional-breakpoint" function
               (:user-visible-flag t
                :arguments ("arg" "condition"))
                nil [166502 167610])
            ("easy-menu-define" code nil nil [167612 167692])
            ("add-hook" code nil nil [167948 168038])
            ("edebug--called-interactively-skip" function (:arguments ("i" "frame1" "frame2")) nil [168039 168652])
            ("edebug-install-read-eval-functions" code nil nil [168806 168842])
            ("edebug-unload-function" function nil nil [168844 169340])
            ("edebug--unwrap*-symbol-function" function (:arguments ("symbol")) nil [169342 169999])
            ("edebug--strip-plist" function (:arguments ("symbol")) nil [170001 170237])
            ("edebug-remove-instrumentation" function
               (:user-visible-flag t
                :arguments ("functions"))
                nil [170239 171520])
            ("edebug-mark" function nil nil [171539 171607])
            ("define-obsolete-function-alias" code nil nil [171609 171682])
            ("define-obsolete-function-alias" code nil nil [171683 171760])
            ("edebug" package nil nil [171762 171779]))          
      :file "edebug.el.gz"
      :pointmax 171804
      :fsize 46473
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((punctuation 133553 . 133554) (punctuation 133425 . 133426) (punctuation 127342 . 127343) (punctuation 116375 . 116376) (punctuation 116269 . 116270) (punctuation 11642 . 11643) (punctuation 11221 . 11222) (close-paren 2046 . 2047) (symbol 2012 . 2029) (open-paren 2011 . 2012)))
    (semanticdb-table "semanticdb-table-bc17c546"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1206 1223])
            ("declare-function" code nil nil [1318 1357])
            ("declare-function" code nil nil [1358 1397])
            ("declare-function" code nil nil [1398 1441])
            ("declare-function" code nil nil [1442 1481])
            ("declare-function" code nil nil [1482 1526])
            ("eieio-hook" variable nil nil [1563 1658])
            ("eieio-error-unsupported-class-tags" variable nil nil [1660 1894])
            ("eieio-skip-typecheck" variable nil nil [1896 2155])
            ("eieio-optimize-primary-methods-flag" variable (:default-value t) nil [2157 2273])
            ("eieio-backward-compatibility" variable (:default-value t) nil [2275 2580])
            ("define-obsolete-variable-alias" code nil nil [2582 2652])
            ("eieio--unbound" variable (:default-value (make-symbol "eieio--unbound")) nil [2653 2772])
            ("eieio--unbound-form" variable (:default-value (macroexp-quote eieio--unbound)) nil [2773 2833])
            ("eieio-default-superclass" variable nil nil [2940 2977])
            ("progn" code nil nil [2979 4315])
            ("eieio--object-num-slots" variable
               (:constant-flag t
                :default-value 1)
                nil [4338 4374])
            ("eieio--object-class-tag" function (:arguments ("obj")) nil [4377 4432])
            ("cl-macs" include nil nil [4484 4502])
            ("eieio--class-object" function (:arguments ("class")) nil [4526 4764])
            ("eieio--object-class" function (:arguments ("obj")) nil [4766 4856])
            ("class-p" function (:arguments ("x")) nil [4858 5010])
            ("cl-deftype" code nil nil [5012 5054])
            ("eieio--class-print-name" function (:arguments ("class")) nil [5056 5191])
            ("eieio-class-name" function (:arguments ("class")) nil [5193 5379])
            ("define-obsolete-function-alias" code nil nil [5380 5450])
            ("defalias" code nil nil [5452 5560])
            ("eieio--class-option-assoc" function (:arguments ("list" "option")) nil [5562 5720])
            ("eieio--class-option" function (:arguments ("class" "option")) nil [5722 5921])
            ("eieio-object-p" function (:arguments ("obj")) nil [5923 6069])
            ("cl-deftype" code nil nil [6071 6127])
            ("define-obsolete-function-alias" code nil nil [6129 6195])
            ("class-abstract-p" function (:arguments ("class")) nil [6197 6368])
            ("eieio--class-method-invocation-order" function (:arguments ("class")) nil [6370 6589])
            ("eieio-defclass-autoload-map" variable (:default-value (make-hash-table)) nil [6617 6724])
            ("eieio-defclass-autoload" function (:arguments ("cname" "_superclasses" "filename" "doc")) nil [6799 8491])
            ("eieio--full-class-object" function (:arguments ("class")) nil [8493 9026])
            ("cl-deftype" code nil nil [9028 9223])
            ("eieio-make-class-predicate" function (:arguments ("class")) nil [9226 9517])
            ("eieio-make-child-predicate" function (:arguments ("class")) nil [9519 9829])
            ("eieio--known-slot-names" variable nil nil [9831 9867])
            ("eieio--known-class-slot-names" variable nil nil [9868 9910])
            ("eieio--known-slot-name-p" function (:arguments ("name")) nil [9912 10022])
            ("eieio-defclass-internal" function (:arguments ("cname" "superclasses" "slots" "options")) nil [10024 21103])
            ("eieio--eval-default-p" function (:arguments ("val")) nil [21105 21263])
            ("eieio--perform-slot-validation-for-default" function (:arguments ("slot" "skipnil")) nil [21265 21857])
            ("eieio--slot-override" function (:arguments ("old" "new" "skipnil")) nil [21859 24229])
            ("eieio--add-new-slot" function (:arguments ("newc" "slot" "init" "alloc" "defaultoverride" "skipnil")) nil [24231 27105])
            ("eieio-copy-parents-into-subclass" function (:arguments ("newc")) nil [27107 28182])
            ("eieio--perform-slot-validation" function (:arguments ("spec" "value")) nil [28393 28617])
            ("eieio--validate-slot-value" function (:arguments ("class" "slot-idx" "value" "slot")) nil [28619 29454])
            ("eieio--validate-class-slot-value" function (:arguments ("class" "slot-idx" "value" "slot")) nil [29456 30029])
            ("eieio-barf-if-slot-unbound" function (:arguments ("value" "instance" "slotname" "fn")) nil [30031 30470])
            ("eieio-oref" function (:arguments ("obj" "slot")) nil [30507 32133])
            ("eieio-oref-default" function (:arguments ("class" "slot")) nil [32137 33912])
            ("eieio-oset" function (:arguments ("obj" "slot" "value")) nil [33914 34919])
            ("eieio-oset-default" function (:arguments ("class" "slot" "value")) nil [34921 37389])
            ("eieio--slot-name-index" function (:arguments ("class" "slot")) nil [37432 38127])
            ("eieio--class-slot-name-index" function (:arguments ("class" "slot")) nil [38129 38716])
            ("eieio-set-defaults" function (:arguments ("obj" "set-all")) nil [38832 39362])
            ("eieio--initarg-to-attribute" function (:arguments ("class" "initarg")) nil [39364 39689])
            ("eieio--c3-candidate" function (:arguments ("class" "remaining-inputs")) nil [39726 40168])
            ("eieio--c3-merge-lists" function (:arguments ("reversed-partial-result" "remaining-inputs")) nil [40170 41498])
            ("eieio--class/struct-parents" function (:arguments ("class")) nil [41500 41617])
            ("eieio--class-precedence-c3" function (:arguments ("class")) nil [41619 41941])
            ("eieio--class-precedence-dfs" function (:arguments ("class")) nil [41987 42522])
            ("eieio--class-precedence-bfs" function (:arguments ("class")) nil [42570 42999])
            ("eieio--class-precedence-list" function (:arguments ("class")) nil [43033 43627])
            ("define-obsolete-function-alias" code nil nil [43629 43724])
            ("define-error" code nil nil [43773 43826])
            ("define-error" code nil nil [43827 43880])
            ("define-error" code nil nil [43881 43929])
            ("define-error" code nil nil [43930 43973])
            ("define-error" code nil nil [43974 44049])
            ("cl-generic" include nil nil [44081 44102])
            ("cl-generic-define-generalizer" code nil nil [44173 44618])
            ("cl-defmethod" code nil nil [44620 45078])
            ("eieio--generic-subclass-specializers" function (:arguments ("tag" "_")) nil [45472 45690])
            ("cl-generic-define-generalizer" code nil nil [45692 45875])
            ("cl-defmethod" code nil nil [45877 46104])
            ("eieio-declare-slots" function (:arguments ("slots")) nil [46106 46935])
            ("eieio-core" package nil nil [46937 46958]))          
      :file "eieio-core.el.gz"
      :pointmax 46988
      :fsize 13155
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax '((close-paren 4374 . 4375) (symbol 4319 . 4335) (open-paren 4318 . 4319)))
    (semanticdb-table "semanticdb-table-4703ae00"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-menu-intern" function (:arguments ("s")) nil [1246 1309])
            ("easy-menu-define" function (:arguments ("symbol" "maps" "doc" "menu")) nil [1311 5330])
            ("easy-menu-binding" function (:arguments ("menu" "item-name")) nil [5332 6094])
            ("easy-menu-do-define" function (:arguments ("symbol" "maps" "doc" "menu")) nil [6096 7354])
            ("easy-menu-filter-return" function (:arguments ("menu" "name")) nil [7356 8142])
            ("easy-menu-avoid-duplicate-keys" variable (:default-value t) nil [8144 8398])
            ("easy-menu-create-menu" function (:arguments ("menu-name" "menu-items")) nil [8400 10466])
            ("easy-menu-button-prefix" variable (:default-value '((radio . :radio) (toggle . :toggle))) nil [10492 10565])
            ("easy-menu-converted-items-table" variable (:default-value (make-hash-table :test 'equal)) nil [10567 10638])
            ("easy-menu-convert-item" function (:arguments ("item")) nil [10640 12078])
            ("easy-menu-convert-item-1" function (:arguments ("item")) nil [12080 16622])
            ("easy-menu-define-key" function (:arguments ("menu" "key" "item" "before")) nil [16624 18373])
            ("easy-menu-name-match" function (:arguments ("name" "item")) nil [18375 18971])
            ("easy-menu-always-true-p" function (:arguments ("x")) nil [18973 19146])
            ("easy-menu-item-count" variable nil nil [19148 19179])
            ("easy-menu-make-symbol" function (:arguments ("callback" "noexp")) nil [19181 19819])
            ("easy-menu-change" function (:arguments ("path" "name" "items" "before" "map")) nil [19821 20758])
            ("defalias" code nil nil [20760 20797])
            ("make-obsolete" code nil nil [20798 20902])
            ("defalias" code nil nil [20904 20938])
            ("make-obsolete" code nil nil [20939 21040])
            ("add-submenu" function (:arguments ("menu-path" "submenu" "before" "in-menu")) nil [21042 21489])
            ("easy-menu-add-item" function (:arguments ("map" "path" "item" "before")) nil [21491 23383])
            ("easy-menu-item-present-p" function (:arguments ("map" "path" "name")) nil [23385 23691])
            ("easy-menu-remove-item" function (:arguments ("map" "path" "name")) nil [23693 24079])
            ("easy-menu-return-item" function (:arguments ("menu" "name")) nil [24081 25693])
            ("easy-menu-lookup-name" function (:arguments ("map" "name")) nil [25695 26488])
            ("easy-menu-get-map" function (:arguments ("map" "path" "to-modify")) nil [26490 28056])
            ("easymenu" package nil nil [28058 28077]))          
      :file "easymenu.el.gz"
      :pointmax 28105
      :fsize 8957
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-bc0d6f96"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("backquote" include nil nil [5172 5192])
            ("macroexp" include nil nil [5193 5212])
            ("cconv" include nil nil [5213 5229])
            ("compile" include nil nil [5249 5267])
            ("cl-lib" include nil nil [5467 5484])
            ("subr-x" include nil nil [5505 5522])
            ("bytecomp" customgroup (:user-visible-flag t) nil [5656 5724])
            ("emacs-lisp-file-regexp" variable (:default-value "\\.el\\'") nil [5726 6049])
            ("byte-compile-dest-file-function" variable (:default-value nil) nil [6051 6555])
            ("byte-compiler-base-file-name" function (:arguments ("filename")) nil [6708 6935])
            ("if" code nil nil [7012 7752])
            ("byte-compile--default-dest-file" function (:arguments ("filename")) nil [7754 8041])
            ("byte-compile-inline-expand" function (:prototype-flag t) nil [8100 8149])
            ("byte-optimize-one-form" function (:prototype-flag t) nil [8210 8255])
            ("byte-optimize-lapcode" function (:prototype-flag t) nil [8315 8359])
            ("byte-decompile-bytecode" function (:prototype-flag t) nil [8583 8629])
            ("byte-compile-verbose" variable (:default-value (and (not noninteractive) (> baud-rate search-slow-speed))) nil [8631 8812])
            ("byte-optimize" variable (:default-value t) nil [8814 9194])
            ("byte-compile-delete-errors" variable nil nil [9196 9400])
            ("byte-compile-cond-use-jump-table" variable (:default-value t) nil [9402 9563])
            ("byte-compile-dynamic" variable nil nil [9565 10063])
            ("make-obsolete-variable" code nil nil [10064 10144])
            ("byte-compile-dynamic-docstrings" variable (:default-value t) nil [10219 10915])
            ("byte-compile-log-buffer" variable
               (:constant-flag t
                :default-value "*Compile-Log*")
                nil [11001 11095])
            ("byte-compile--known-dynamic-vars" variable nil nil [11097 11282])
            ("byte-compile--seen-defvars" variable nil nil [11284 11374])
            ("byte-optimize-log" variable nil nil [11376 11807])
            ("byte-compile-error-on-warn" variable nil nil [11809 11930])
            ("byte-compile-warning-types" variable
               (:constant-flag t
                :default-value '(redefine callargs free-vars unresolved obsolete noruntime interactive-only make-local mapcar constants suspicious lexical lexical-dynamic docstrings docstrings-non-ascii-quotes not-unused))
                nil [12283 12622])
            ("byte-compile-warnings" variable (:default-value t) nil [12623 14703])
            ("byte-compile--emacs-build-warning-types" variable
               (:constant-flag t
                :default-value '(docstrings-non-ascii-quotes))
                nil [14705 15020])
            ("byte-compile--suppressed-warnings" variable nil nil [15022 15142])
            ("put" code nil nil [15159 15321])
            ("byte-compile-warning-enabled-p" function (:arguments ("warning" "symbol")) nil [15338 16247])
            ("byte-compile-disable-warning" function (:arguments ("warning")) nil [16264 17007])
            ("byte-compile-enable-warning" function (:arguments ("warning")) nil [17024 17725])
            ("byte-compile-interactive-only-functions" variable nil nil [17727 17843])
            ("make-obsolete-variable" code nil nil [17844 17976])
            ("byte-compile-not-obsolete-vars" variable nil nil [17978 18083])
            ("byte-compile-global-not-obsolete-vars" variable nil nil [18084 18203])
            ("byte-compile-not-obsolete-funcs" variable nil nil [18205 18311])
            ("byte-compile-generate-call-tree" variable nil nil [18313 19096])
            ("byte-compile-call-tree" variable nil nil [19098 19377])
            ("byte-compile-call-tree-sort" variable (:default-value 'name) nil [19379 19650])
            ("byte-compile-debug" variable nil nil [19652 19764])
            ("byte-compile-jump-tables" variable nil nil [19765 19868])
            ("byte-compile-constants" variable nil nil [19869 19975])
            ("byte-compile-variables" variable nil nil [19976 20082])
            ("byte-compile-bound-variables" variable nil nil [20083 20233])
            ("byte-compile-lexical-variables" variable nil nil [20234 20401])
            ("byte-compile-const-variables" variable nil nil [20402 20520])
            ("byte-compile-free-references" variable nil nil [20521 20558])
            ("byte-compile-free-assignments" variable nil nil [20559 20597])
            ("byte-compiler-error-flag" variable nil nil [20599 20632])
            ("byte-compile-recurse-toplevel" function (:arguments ("form" "non-toplevel-case")) nil [20634 21499])
            ("byte-compile-initial-macro-environment" variable
               (:constant-flag t
                :default-value `((declare-function . byte-compile-macroexpand-declare-function) (eval-when-compile \, (lambda (&rest body) (let ((result nil)) (byte-compile-recurse-toplevel (macroexp-progn body) (lambda (form) (let ((byte-compile-unresolved-functions byte-compile-unresolved-functions) (byte-compile-new-defuns byte-compile-new-defuns)) (setf result (byte-compile-eval (byte-run-strip-symbol-positions (byte-compile-top-level (byte-compile-preprocess form)))))))) (list 'quote result)))) (eval-and-compile \, (lambda (&rest body) (byte-compile-recurse-toplevel (macroexp-progn body) (lambda (form) (let* ((print-symbols-bare t) (expanded (byte-run-strip-symbol-positions (macroexpand--all-toplevel form macroexpand-all-environment)))) (eval expanded lexical-binding) expanded))))) (with-suppressed-warnings \, (lambda (warnings &rest body) (let ((byte-compile--suppressed-warnings (append warnings byte-compile--suppressed-warnings))) `(internal--with-suppressed-warnings ',warnings ,(macroexpand-all `(progn ,@body) macroexpand-all-environment)))))))
                nil [21501 25066])
            ("byte-compile-macro-environment" variable (:default-value byte-compile-initial-macro-environment) nil [25068 25319])
            ("byte-compile-function-environment" variable nil nil [25321 25772])
            ("byte-compile-unresolved-functions" variable nil nil [25774 26296])
            ("byte-compile-noruntime-functions" variable nil nil [26298 26573])
            ("byte-compile-new-defuns" variable nil nil [26575 26815])
            ("byte-compile--lexical-environment" variable nil nil [26850 26933])
            ("byte-compile-tag-number" variable nil nil [26935 26969])
            ("byte-compile-output" variable nil nil [26970 27092])
            ("byte-compile-depth" variable nil nil [27093 27158])
            ("byte-compile-maxdepth" variable nil nil [27159 27227])
            ("byte-to-native-lambda" type
               (:members ("byte-func" "lap")
                :type "struct")
                nil [27681 27733])
            ("byte-to-native-func-def" type
               (:members ("name" "c-name" "byte-func")
                :type "struct")
                nil [27755 27858])
            ("byte-to-native-top-level" type
               (:members ("form" "lexical")
                :type "struct")
                nil [27859 27944])
            ("byte-native-compiling" variable nil nil [27946 28016])
            ("byte-native-qualities" variable nil nil [28017 28106])
            ("byte+native-compile" variable nil nil [28107 28206])
            ("byte-to-native-lambdas-h" variable nil nil [28207 28289])
            ("byte-to-native-top-level-forms" variable nil nil [28290 28362])
            ("byte-to-native-output-buffer-file" variable nil nil [28363 28472])
            ("byte-to-native-plist-environment" variable nil nil [28473 28563])
            ("byte-code-vector" variable nil nil [28633 28731])
            ("byte-stack+-info" variable nil nil [28733 28821])
            ("byte-defop" function (:arguments ("opcode" "stack-adjust" "opname" "docstring")) nil [28823 29850])
            ("byte-extrude-byte-code-vectors" function nil nil [29852 30184])
            ("byte-defop" code nil nil [30272 30328])
            ("byte-defop" code nil nil [30451 30507])
            ("byte-defop" code nil nil [30508 30564])
            ("byte-defop" code nil nil [30565 30622])
            ("byte-defop" code nil nil [30623 30677])
            ("byte-defop" code nil nil [30678 30742])
            ("byte-defop" code nil nil [30796 30831])
            ("byte-defop" code nil nil [30832 30874])
            ("byte-defop" code nil nil [30875 30909])
            ("byte-defop" code nil nil [30929 30957])
            ("byte-defop" code nil nil [30958 30990])
            ("byte-defop" code nil nil [30991 31021])
            ("byte-defop" code nil nil [31022 31054])
            ("byte-defop" code nil nil [31055 31085])
            ("byte-defop" code nil nil [31086 31113])
            ("byte-defop" code nil nil [31114 31143])
            ("byte-defop" code nil nil [31144 31172])
            ("byte-defop" code nil nil [31173 31201])
            ("byte-defop" code nil nil [31202 31230])
            ("byte-defop" code nil nil [31231 31260])
            ("byte-defop" code nil nil [31261 31291])
            ("byte-defop" code nil nil [31292 31322])
            ("byte-defop" code nil nil [31323 31353])
            ("byte-defop" code nil nil [31354 31384])
            ("byte-defop" code nil nil [31385 31416])
            ("byte-defop" code nil nil [31417 31446])
            ("byte-defop" code nil nil [31447 31476])
            ("byte-defop" code nil nil [31477 31514])
            ("byte-defop" code nil nil [31515 31555])
            ("byte-defop" code nil nil [31556 31584])
            ("byte-defop" code nil nil [31585 31614])
            ("byte-defop" code nil nil [31615 31643])
            ("byte-defop" code nil nil [31644 31678])
            ("byte-defop" code nil nil [31679 31711])
            ("byte-defop" code nil nil [31712 31744])
            ("byte-defop" code nil nil [31745 31777])
            ("byte-defop" code nil nil [31778 31807])
            ("byte-defop" code nil nil [31808 31837])
            ("byte-defop" code nil nil [31838 31870])
            ("byte-defop" code nil nil [31871 31899])
            ("byte-defop" code nil nil [31900 31928])
            ("byte-defop" code nil nil [31929 31957])
            ("byte-defop" code nil nil [31958 31986])
            ("byte-defop" code nil nil [31987 32016])
            ("byte-defop" code nil nil [32017 32048])
            ("byte-defop" code nil nil [32049 32078])
            ("byte-defop" code nil nil [32079 32107])
            ("byte-defop" code nil nil [32108 32136])
            ("byte-defop" code nil nil [32137 32166])
            ("byte-defop" code nil nil [32167 32197])
            ("byte-defop" code nil nil [32198 32251])
            ("byte-defop" code nil nil [32271 32305])
            ("byte-defop" code nil nil [32306 32337])
            ("byte-defop" code nil nil [32338 32372])
            ("byte-defop" code nil nil [32373 32407])
            ("byte-defop" code nil nil [32408 32443])
            ("byte-defop" code nil nil [32444 32483])
            ("byte-defop" code nil nil [32484 32523])
            ("byte-defop" code nil nil [32524 32563])
            ("byte-defop" code nil nil [32564 32598])
            ("byte-defop" code nil nil [32599 32644])
            ("byte-defop" code nil nil [32677 32706])
            ("byte-defop" code nil nil [32707 32736])
            ("byte-defop" code nil nil [32737 32766])
            ("byte-defop" code nil nil [32767 32796])
            ("byte-defop" code nil nil [32797 32836])
            ("byte-defop" code nil nil [32837 32872])
            ("byte-defop" code nil nil [32873 32968])
            ("byte-defop" code nil nil [32969 33011])
            ("byte-defop" code nil nil [33012 33059])
            ("byte-defop" code nil nil [33061 33098])
            ("byte-defop" code nil nil [33099 33136])
            ("byte-defop" code nil nil [33137 33180])
            ("byte-defop" code nil nil [33181 33225])
            ("byte-defop" code nil nil [33226 33263])
            ("byte-defop" code nil nil [33264 33300])
            ("byte-defop" code nil nil [33301 33342])
            ("byte-defop" code nil nil [33343 33381])
            ("byte-defop" code nil nil [33382 33423])
            ("byte-defop" code nil nil [33424 33454])
            ("byte-defop" code nil nil [33455 33491])
            ("byte-defop" code nil nil [33561 33669])
            ("byte-defop" code nil nil [33670 33724])
            ("byte-defop" code nil nil [33725 33797])
            ("byte-defop" code nil nil [33798 33878])
            ("byte-defop" code nil nil [33879 34005])
            ("byte-defop" code nil nil [34006 34140])
            ("byte-defop" code nil nil [34142 34221])
            ("byte-defop" code nil nil [34222 34288])
            ("byte-defop" code nil nil [34289 34357])
            ("byte-defop" code nil nil [34359 34457])
            ("byte-defop" code nil nil [34458 34573])
            ("byte-defop" code nil nil [34574 34688])
            ("byte-defop" code nil nil [34689 34834])
            ("byte-defop" code nil nil [34835 34952])
            ("byte-defop" code nil nil [35104 35152])
            ("byte-defop" code nil nil [35154 35212])
            ("byte-defop" code nil nil [35213 35270])
            ("byte-defop" code nil nil [35288 35323])
            ("byte-defop" code nil nil [35324 35364])
            ("byte-defop" code nil nil [35365 35399])
            ("byte-defop" code nil nil [35400 35431])
            ("byte-defop" code nil nil [35432 35465])
            ("byte-defop" code nil nil [35466 35498])
            ("byte-defop" code nil nil [35499 35531])
            ("byte-defop" code nil nil [35532 35562])
            ("byte-defop" code nil nil [35563 35594])
            ("byte-defop" code nil nil [35595 35623])
            ("byte-defop" code nil nil [35624 35655])
            ("byte-defop" code nil nil [35656 35685])
            ("byte-defop" code nil nil [35686 35719])
            ("byte-defop" code nil nil [35720 35751])
            ("byte-defop" code nil nil [35752 35783])
            ("byte-defop" code nil nil [35784 35817])
            ("byte-defop" code nil nil [35818 35851])
            ("byte-defop" code nil nil [35852 35882])
            ("byte-defop" code nil nil [35883 35911])
            ("byte-defop" code nil nil [35912 35940])
            ("byte-defop" code nil nil [35941 35973])
            ("byte-defop" code nil nil [35974 36007])
            ("byte-defop" code nil nil [36028 36059])
            ("byte-defop" code nil nil [36060 36093])
            ("byte-defop" code nil nil [36094 36127])
            ("byte-defop" code nil nil [36129 36163])
            ("byte-defop" code nil nil [36202 36237])
            ("byte-defop" code nil nil [36538 36572])
            ("byte-discardN-preserve-tos" variable
               (:constant-flag t
                :default-value byte-discardN)
                nil [36730 36781])
            ("byte-defop" code nil nil [36783 36917])
            ("byte-defop" code nil nil [36939 37002])
            ("byte-constant-limit" variable
               (:constant-flag t
                :default-value 64)
                nil [37112 37211])
            ("byte-goto-ops" variable
               (:constant-flag t
                :default-value '(byte-goto byte-goto-if-nil byte-goto-if-not-nil byte-goto-if-nil-else-pop byte-goto-if-not-nil-else-pop byte-pushcatch byte-pushconditioncase))
                nil [37213 37463])
            ("byte-goto-always-pop-ops" variable
               (:constant-flag t
                :default-value '(byte-goto-if-nil byte-goto-if-not-nil))
                nil [37465 37541])
            ("byte-extrude-byte-code-vectors" code nil nil [37543 37575])
            ("byte-compile-push-bytecodes" function (:arguments ("args")) nil [39154 39822])
            ("byte-compile-push-bytecode-const2" function (:arguments ("opcode" "const2" "bytes" "pc")) nil [39824 40105])
            ("byte-compile-lapcode" function (:arguments ("lap")) nil [40107 45879])
            ("byte-compile-eval" function (:arguments ("form")) nil [45912 47305])
            ("byte-compile-eval-before-compile" function (:arguments ("form")) nil [47307 47769])
            ("emacs-lisp-compilation-file-name-or-buffer" function (:arguments ("str")) nil [47800 48236])
            ("emacs-lisp-compilation-parse-errors-filename-function" variable
               (:constant-flag t
                :default-value nil)
                nil [48238 48463])
            ("emacs-lisp-compilation-search-path" variable (:default-value '(nil)) nil [48465 48856])
            ("defvar-keymap" code nil nil [48858 48946])
            ("emacs-lisp-compilation--current-file" variable nil nil [48948 48997])
            ("define-compilation-mode" code nil nil [48999 49203])
            ("emacs-lisp-compilation-recompile" function (:user-visible-flag t) nil [49205 49563])
            ("byte-compile-current-form" variable nil nil [49565 49603])
            ("byte-compile-dest-file" variable nil nil [49604 49639])
            ("byte-compile-current-file" variable nil nil [49640 49678])
            ("byte-compile-current-group" variable nil nil [49679 49718])
            ("byte-compile-current-buffer" variable nil nil [49719 49759])
            ("byte-compile-log" function (:arguments ("format-string" "args")) nil [49800 50149])
            ("byte-compile-log-1" function (:arguments ("string")) nil [50190 50507])
            ("byte-compile-last-warned-form" variable nil nil [50509 50551])
            ("byte-compile-last-logged-file" variable nil nil [50552 50594])
            ("byte-compile-root-dir" variable nil nil [50595 50703])
            ("byte-compile-abbreviate-file" function (:arguments ("file" "dir")) nil [50829 51015])
            ("byte-compile--first-symbol-with-pos" function (:arguments ("form")) nil [51017 51725])
            ("byte-compile--warning-source-offset" function nil nil [51727 51965])
            ("byte-compile-warning-prefix" function (:arguments ("level" "entry")) nil [52076 53921])
            ("byte-compile-warning-series" function (:arguments ("_ignore")) nil [54075 54132])
            ("declare-function" code nil nil [54182 54239])
            ("byte-compile-log-file" function nil nil [54419 56011])
            ("byte-compile-log-warning-function" variable (:default-value nil) nil [56013 56456])
            ("byte-compile-log-warning" function (:arguments ("string" "fill" "level")) nil [56458 56821])
            ("byte-compile--log-warning-for-byte-compile" function (:arguments ("string" "_position" "fill" "level")) nil [56823 57620])
            ("byte-compile-warn" function (:arguments ("format" "args")) nil [57622 57954])
            ("byte-compile-warn-x" function (:arguments ("arg" "format" "args")) nil [57956 58336])
            ("byte-compile-warn-obsolete" function (:arguments ("symbol" "type")) nil [58353 58946])
            ("byte-compile-report-error" function (:arguments ("error-info" "fill")) nil [58948 59386])
            ("byte-compile-fdefinition" function (:arguments ("name" "macro-p")) nil [59419 60762])
            ("byte-compile-arglist-signature" function (:arguments ("arglist")) nil [60764 61392])
            ("byte-compile--function-signature" function (:arguments ("f")) nil [61394 61953])
            ("byte-compile-arglist-signatures-congruent-p" function (:arguments ("old" "new")) nil [61955 62253])
            ("byte-compile-arglist-signature-string" function (:arguments ("signature")) nil [62255 62609])
            ("byte-compile-function-warn" function (:arguments ("f" "nargs" "def")) nil [62611 63691])
            ("byte-compile-emit-callargs-warn" function (:arguments ("name" "actual-args" "min-args" "max-args")) nil [63693 64115])
            ("byte-compile--check-arity-bytecode" function (:arguments ("form" "bytecode")) nil [64117 64719])
            ("byte-compile-callargs-warn" function (:arguments ("form")) nil [64799 65577])
            ("byte-compile-format-warn" function (:arguments ("form")) nil [65579 66706])
            ("dolist" code nil nil [66708 66786])
            ("byte-compile--suspicious-defcustom-choice" function (:arguments ("type")) nil [66788 67412])
            ("byte-compile-nogroup-warn" function (:arguments ("form")) nil [67480 68878])
            ("byte-compile-arglist-warn" function (:arguments ("name" "arglist" "macrop")) nil [68973 71286])
            ("byte-compile--wide-docstring-substitution-len" variable (:default-value 3) nil [71288 71592])
            ("byte-compile--wide-docstring-p" function (:arguments ("docstring" "col")) nil [71594 73411])
            ("byte-compile-docstring-max-column" variable (:default-value 80) nil [73413 73751])
            ("define-obsolete-function-alias" code nil nil [73753 73865])
            ("byte-compile-docstring-style-warn" function (:arguments ("form")) nil [73867 75893])
            ("byte-compile-warn-about-unresolved-functions" function nil nil [76080 76697])
            ("byte-compile--outbuffer" variable nil nil [76792 76824])
            ("byte-compile-close-variables" function (:arguments ("body")) nil [76826 78581])
            ("displaying-byte-compile-warnings" function (:arguments ("body")) nil [78583 80013])
            ("byte-force-recompile" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [80031 80303])
            ("byte-compile-ignore-files" variable nil nil [80305 80408])
            ("byte-recompile-directory" function
               (:user-visible-flag t
                :arguments ("directory" "arg" "force" "follow-symlinks"))
                nil [80425 84612])
            ("no-byte-compile" variable nil nil [84614 84829])
            ("byte-recompile-file" function (:arguments ("filename" "force" "arg" "load")) nil [84928 87043])
            ("byte-compile--load-dynvars" function (:arguments ("file")) nil [87045 87379])
            ("byte-compile-level" variable nil nil [87381 87466])
            ("byte-write-target-file" function (:arguments ("buffer" "target-file")) nil [87468 89065])
            ("byte-compile-file" function (:arguments ("filename" "load")) nil [89082 97091])
            ("compile-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97140 98259])
            ("byte-compile-from-buffer" function (:arguments ("inbuffer")) nil [98261 102015])
            ("byte-compile-insert-header" function (:arguments ("_filename" "outbuffer")) nil [102017 103932])
            ("byte-compile-output-file-form" function (:arguments ("form")) nil [103934 105362])
            ("byte-compile--for-effect" variable nil nil [105364 105397])
            ("byte-compile-output-docform" function (:arguments ("preface" "name" "info" "form" "specindex" "quoted")) nil [105399 109439])
            ("byte-compile-keep-pending" function (:arguments ("form" "handler")) nil [109441 109941])
            ("byte-compile-flush-pending" function nil nil [109943 110420])
            ("byte-compile-preprocess" function (:arguments ("form" "_for-effect")) nil [110422 111014])
            ("byte-compile-toplevel-file-form" function (:arguments ("top-level-form")) nil [111056 111533])
            ("byte-compile-file-form" function (:arguments ("form")) nil [111572 111915])
            ("put" code nil nil [112080 112147])
            ("byte-compile-file-form-autoload" function (:arguments ("form")) nil [112148 113979])
            ("put" code nil nil [113981 114046])
            ("put" code nil nil [114047 114112])
            ("byte-compile--check-prefixed-var" function (:arguments ("sym")) nil [114114 114390])
            ("byte-compile--declare-var" function (:arguments ("sym")) nil [114392 114837])
            ("byte-compile-file-form-defvar" function (:arguments ("form")) nil [114839 115373])
            ("put" code nil nil [115375 115465])
            ("put" code nil nil [115466 115543])
            ("byte-compile-file-form-defvar-function" function (:arguments ("form")) nil [115545 116321])
            ("put" code nil nil [116323 116417])
            ("put" code nil nil [116419 116504])
            ("put" code nil nil [116506 116571])
            ("byte-compile-file-form-require" function (:arguments ("form")) nil [116572 117426])
            ("put" code nil nil [117428 117489])
            ("put" code nil nil [117490 117551])
            ("byte-compile-file-form-progn" function (:arguments ("form")) nil [117552 117697])
            ("put" code nil nil [117699 117787])
            ("byte-compile-file-form-with-no-warnings" function (:arguments ("form")) nil [117788 117966])
            ("put" code nil nil [117968 118082])
            ("byte-compile-file-form-with-suppressed-warnings" function (:arguments ("form")) nil [118083 118350])
            ("put" code nil nil [118427 118504])
            ("byte-compile-file-form-make-obsolete" function (:arguments ("form")) nil [118505 118663])
            ("byte-compile-file-form-defmumble" function (:arguments ("name" "macro" "arglist" "body" "rest")) nil [118665 124842])
            ("byte-compile-output-as-comment" function (:arguments ("exp" "quoted")) nil [124844 126318])
            ("byte-compile--reify-function" function (:arguments ("fun")) nil [126320 127304])
            ("byte-compile" function (:arguments ("form")) nil [127322 129343])
            ("byte-compile-sexp" function (:arguments ("sexp")) nil [129345 129537])
            ("byte-compile-check-lambda-list" function (:arguments ("list")) nil [129539 130563])
            ("byte-compile-arglist-vars" function (:arguments ("arglist")) nil [130566 130723])
            ("byte-compile-make-lambda-lexenv" function (:arguments ("args")) nil [130725 131076])
            ("byte-compile-make-args-desc" function (:arguments ("arglist")) nil [131078 131777])
            ("byte-compile--warn-lexical-dynamic" function (:arguments ("var" "context")) nil [131779 132240])
            ("byte-compile-lambda" function (:arguments ("fun" "add-lambda" "reserved-csts")) nil [132242 137125])
            ("byte-compile-reserved-constants" variable nil nil [137127 137169])
            ("byte-compile-constants-vector" function nil nil [137171 138736])
            ("byte-compile-top-level" function (:arguments ("form" "for-effect" "output-type" "lexenv" "reserved-csts")) nil [138863 140372])
            ("byte-compile-out-toplevel" function (:arguments ("for-effect" "output-type")) nil [140374 144609])
            ("byte-compile-top-level-body" function (:arguments ("body" "for-effect")) nil [144660 144869])
            ("byte-compile-macroexpand-declare-function" function (:arguments ("fn" "file" "args")) nil [144927 145984])
            ("byte-compile-form" function (:arguments ("form" "for-effect")) nil [146712 150164])
            ("byte-compile-normal-call" function (:arguments ("form")) nil [150166 151008])
            ("byte-compile-inline-lapcode" function (:arguments ("lap" "end-depth")) nil [151280 154291])
            ("byte-compile-unfold-bcf" function (:arguments ("form")) nil [154293 156755])
            ("byte-compile-check-variable" function (:arguments ("var" "access-type")) nil [156757 157764])
            ("byte-compile-dynamic-variable-op" function (:arguments ("base-op" "var")) nil [157766 157993])
            ("byte-compile-dynamic-variable-bind" function (:arguments ("var")) nil [157995 158264])
            ("byte-compile-free-vars-warn" function (:arguments ("arg" "var" "assignment")) nil [158266 159336])
            ("byte-compile-variable-ref" function (:arguments ("var")) nil [159338 159798])
            ("byte-compile-variable-set" function (:arguments ("var")) nil [159800 160262])
            ("byte-compile-get-constant" function (:arguments ("const")) nil [160264 160695])
            ("byte-compile-constant" function (:arguments ("const")) nil [160789 160948])
            ("byte-compile-push-constant" function (:arguments ("const")) nil [161065 161183])
            ("byte-defop-compiler" function (:arguments ("function" "compile-handler")) nil [161282 162817])
            ("byte-defop-compiler-1" function (:arguments ("function" "compile-handler")) nil [162819 162954])
            ("put" code nil nil [162958 163003])
            ("put" code nil nil [163004 163047])
            ("put" code nil nil [163048 163091])
            ("put" code nil nil [163092 163135])
            ("put" code nil nil [163136 163179])
            ("put" code nil nil [163180 163223])
            ("put" code nil nil [163224 163271])
            ("put" code nil nil [163272 163319])
            ("put" code nil nil [163320 163367])
            ("put" code nil nil [163368 163415])
            ("put" code nil nil [163416 163463])
            ("byte-defop-compiler" code nil nil [163465 163495])
            ("byte-defop-compiler" code nil nil [163496 163530])
            ("byte-defop-compiler" code nil nil [163531 163565])
            ("byte-defop-compiler" code nil nil [163566 163604])
            ("byte-defop-compiler" code nil nil [163605 163643])
            ("byte-defop-compiler" code nil nil [163644 163682])
            ("byte-defop-compiler" code nil nil [163683 163712])
            ("byte-defop-compiler" code nil nil [163713 163742])
            ("byte-defop-compiler" code nil nil [163743 163772])
            ("byte-defop-compiler" code nil nil [163773 163802])
            ("byte-defop-compiler" code nil nil [163803 163841])
            ("byte-defop-compiler" code nil nil [163842 163872])
            ("byte-defop-compiler" code nil nil [163873 163913])
            ("byte-defop-compiler" code nil nil [163914 163954])
            ("byte-defop-compiler" code nil nil [163955 163995])
            ("byte-defop-compiler" code nil nil [163996 164028])
            ("byte-defop-compiler" code nil nil [164029 164059])
            ("byte-defop-compiler" code nil nil [164060 164092])
            ("byte-defop-compiler" code nil nil [164093 164123])
            ("byte-defop-compiler" code nil nil [164124 164152])
            ("byte-defop-compiler" code nil nil [164153 164192])
            ("byte-defop-compiler" code nil nil [164193 164221])
            ("byte-defop-compiler" code nil nil [164222 164250])
            ("byte-defop-compiler" code nil nil [164251 164282])
            ("byte-defop-compiler" code nil nil [164283 164319])
            ("byte-defop-compiler" code nil nil [164320 164359])
            ("byte-defop-compiler" code nil nil [164360 164398])
            ("byte-defop-compiler" code nil nil [164399 164437])
            ("byte-defop-compiler" code nil nil [164438 164472])
            ("byte-defop-compiler" code nil nil [164473 164510])
            ("byte-defop-compiler" code nil nil [164511 164546])
            ("byte-defop-compiler" code nil nil [164547 164585])
            ("byte-defop-compiler" code nil nil [164586 164621])
            ("byte-defop-compiler" code nil nil [164622 164655])
            ("byte-defop-compiler" code nil nil [164656 164689])
            ("byte-defop-compiler" code nil nil [164690 164723])
            ("byte-defop-compiler" code nil nil [164724 164756])
            ("byte-defop-compiler" code nil nil [164757 164790])
            ("byte-defop-compiler" code nil nil [164791 164839])
            ("byte-defop-compiler" code nil nil [164840 164888])
            ("byte-defop-compiler" code nil nil [164889 164918])
            ("byte-defop-compiler" code nil nil [164919 164948])
            ("byte-defop-compiler" code nil nil [164949 164978])
            ("byte-defop-compiler" code nil nil [164979 165008])
            ("byte-defop-compiler" code nil nil [165009 165037])
            ("byte-defop-compiler" code nil nil [165038 165082])
            ("byte-defop-compiler" code nil nil [165083 165123])
            ("byte-defop-compiler" code nil nil [165124 165164])
            ("byte-defop-compiler" code nil nil [165165 165206])
            ("byte-defop-compiler" code nil nil [165207 165248])
            ("byte-defop-compiler" code nil nil [165249 165277])
            ("byte-defop-compiler" code nil nil [165278 165306])
            ("byte-defop-compiler" code nil nil [165307 165343])
            ("byte-defop-compiler" code nil nil [165344 165399])
            ("byte-defop-compiler" code nil nil [165400 165436])
            ("byte-defop-compiler" code nil nil [165437 165476])
            ("byte-defop-compiler" code nil nil [165477 165510])
            ("byte-defop-compiler" code nil nil [165511 165542])
            ("byte-defop-compiler" code nil nil [165543 165576])
            ("byte-defop-compiler" code nil nil [165577 165609])
            ("byte-defop-compiler" code nil nil [165610 165642])
            ("byte-defop-compiler" code nil nil [165643 165694])
            ("byte-defop-compiler" code nil nil [165695 165746])
            ("byte-defop-compiler" code nil nil [165747 165777])
            ("byte-defop-compiler" code nil nil [165778 165809])
            ("byte-defop-compiler" code nil nil [165810 165838])
            ("byte-defop-compiler" code nil nil [165839 165870])
            ("byte-defop-compiler" code nil nil [165871 165900])
            ("byte-defop-compiler" code nil nil [165901 165945])
            ("byte-defop-compiler" code nil nil [165946 165990])
            ("byte-defop-compiler" code nil nil [165991 166022])
            ("byte-defop-compiler" code nil nil [166023 166054])
            ("byte-defop-compiler" code nil nil [166055 166095])
            ("byte-defop-compiler" code nil nil [166096 166133])
            ("byte-defop-compiler" code nil nil [166134 166174])
            ("byte-defop-compiler" code nil nil [166175 166211])
            ("byte-defop-compiler" code nil nil [166212 166241])
            ("byte-defop-compiler" code nil nil [166243 166290])
            ("byte-defop-compiler" code nil nil [166291 166338])
            ("byte-defop-compiler" code nil nil [166339 166404])
            ("byte-defop-compiler" code nil nil [166405 166470])
            ("byte-defop-compiler-1" code nil nil [166472 166525])
            ("byte-compile-subr-wrong-args" function (:arguments ("form" "n")) nil [166529 166949])
            ("byte-compile-no-args" function (:arguments ("form")) nil [166951 167123])
            ("byte-compile-one-arg" function (:arguments ("form")) nil [167125 167355])
            ("byte-compile-two-args" function (:arguments ("form")) nil [167357 167626])
            ("byte-compile-and-folded" function (:arguments ("form")) nil [167628 168215])
            ("byte-compile-three-args" function (:arguments ("form")) nil [168217 168525])
            ("byte-compile-zero-or-one-arg" function (:arguments ("form")) nil [168527 168759])
            ("byte-compile-one-or-two-args" function (:arguments ("form")) nil [168761 168995])
            ("byte-compile-two-or-three-args" function (:arguments ("form")) nil [168997 169237])
            ("byte-compile-one-to-three-args" function (:arguments ("form")) nil [169239 169566])
            ("byte-compile-noop" function (:arguments ("_form")) nil [169568 169631])
            ("byte-compile-discard" function (:arguments ("num" "preserve-tos")) nil [169633 170560])
            ("byte-compile-stack-ref" function (:arguments ("stack-pos")) nil [170562 170887])
            ("byte-compile-stack-set" function (:arguments ("stack-pos")) nil [170889 171080])
            ("byte-defop-compiler-1" code nil nil [171082 171153])
            ("byte-defop-compiler-1" code nil nil [171154 171229])
            ("byte-compile-make-closure" function (:arguments ("form")) nil [171231 174099])
            ("byte-compile-get-closed-var" function (:arguments ("form")) nil [174101 174323])
            ("byte-compile-variadic-numeric" function (:arguments ("form")) nil [174596 175265])
            ("byte-compile-min-max" function (:arguments ("form")) nil [175267 175512])
            ("byte-defop-compiler" code nil nil [175553 175586])
            ("byte-defop-compiler" code nil nil [175587 175622])
            ("byte-defop-compiler" code nil nil [175623 175658])
            ("byte-defop-compiler" code nil nil [175659 175685])
            ("byte-defop-compiler" code nil nil [175686 175714])
            ("byte-defop-compiler" code nil nil [175715 175741])
            ("byte-defop-compiler" code nil nil [175742 175820])
            ("byte-defop-compiler" code nil nil [175821 175852])
            ("byte-defop-compiler" code nil nil [175853 175881])
            ("byte-defop-compiler-1" code nil nil [175882 175941])
            ("byte-defop-compiler" code nil nil [175942 175996])
            ("byte-defop-compiler" code nil nil [175997 176048])
            ("byte-defop-compiler" code nil nil [176049 176076])
            ("byte-compile-char-before" function (:arguments ("form")) nil [176142 176529])
            ("byte-compile-backward-char" function (:arguments ("form")) nil [176654 177025])
            ("byte-compile-backward-word" function (:arguments ("form")) nil [177027 177398])
            ("byte-compile-list" function (:arguments ("form")) nil [177400 177819])
            ("byte-compile-concat" function (:arguments ("form")) nil [177821 178319])
            ("byte-compile-minus" function (:arguments ("form")) nil [178321 178499])
            ("byte-compile-quo" function (:arguments ("form")) nil [178501 178773])
            ("byte-compile-nconc" function (:arguments ("form")) nil [178775 179182])
            ("byte-compile-fset" function (:arguments ("form")) nil [179184 179980])
            ("byte-compile-function-form" function (:arguments ("form")) nil [180175 180550])
            ("byte-compile-indent-to" function (:arguments ("form")) nil [180552 180861])
            ("byte-compile-insert" function (:arguments ("form")) nil [180863 181455])
            ("byte-defop-compiler-1" code nil nil [181459 181487])
            ("byte-defop-compiler-1" code nil nil [181488 181517])
            ("byte-compile-setq" function (:arguments ("form")) nil [181519 181853])
            ("byte-defop-compiler-1" code nil nil [181855 181890])
            ("byte-compile-set-default" function (:arguments ("form")) nil [181891 182538])
            ("byte-compile-quote" function (:arguments ("form")) nil [182540 182616])
            ("byte-compile-body" function (:arguments ("body" "for-effect")) nil [182643 182825])
            ("byte-compile-body-do-effect" function (:arguments ("body")) nil [182827 182962])
            ("byte-compile-form-do-effect" function (:arguments ("form")) nil [182964 183099])
            ("byte-defop-compiler-1" code nil nil [183101 183150])
            ("byte-defop-compiler-1" code nil nil [183151 183180])
            ("byte-defop-compiler-1" code nil nil [183181 183210])
            ("byte-defop-compiler-1" code nil nil [183211 183237])
            ("byte-defop-compiler-1" code nil nil [183238 183266])
            ("byte-defop-compiler-1" code nil nil [183267 183294])
            ("byte-defop-compiler-1" code nil nil [183295 183321])
            ("byte-defop-compiler-1" code nil nil [183322 183351])
            ("byte-defop-compiler-1" code nil nil [183352 183383])
            ("byte-defop-compiler-1" code nil nil [183384 183411])
            ("byte-defop-compiler-1" code nil nil [183412 183457])
            ("byte-defop-compiler-1" code nil nil [183458 183488])
            ("byte-compile-progn" function (:arguments ("form")) nil [183490 183566])
            ("byte-compile-prog1" function (:arguments ("form")) nil [183568 183691])
            ("byte-compile-goto-if" function (:arguments ("cond" "discard" "tag")) nil [183693 183923])
            ("byte-compile-ignore" function (:arguments ("form")) nil [183925 184043])
            ("byte-compile-find-bound-condition" function (:arguments ("condition-param" "pred-list" "only-if-not-present")) nil [184172 184951])
            ("byte-compile-maybe-guarded" function (:arguments ("condition" "body")) nil [184953 187185])
            ("byte-compile-if" function (:arguments ("form")) nil [187187 188173])
            ("byte-compile--cond-vars" function (:arguments ("obj1" "obj2")) nil [188175 188549])
            ("byte-compile--common-test" function (:arguments ("test-1" "test-2")) nil [188551 188834])
            ("byte-compile--cond-switch-prefix" function (:arguments ("clauses")) nil [188836 192372])
            ("byte-compile-cond-jump-table" function (:arguments ("switch" "donetag")) nil [192374 195070])
            ("byte-compile-cond" function (:arguments ("clauses")) nil [195072 196920])
            ("byte-compile-and" function (:arguments ("form")) nil [196922 197118])
            ("byte-compile-and-recursion" function (:arguments ("rest" "failtag")) nil [197237 197583])
            ("byte-compile-or" function (:arguments ("form")) nil [197585 197779])
            ("byte-compile-or-recursion" function (:arguments ("rest" "wintag")) nil [197897 198247])
            ("byte-compile-while" function (:arguments ("form")) nil [198249 198659])
            ("byte-compile-funcall" function (:arguments ("form")) nil [198661 199050])
            ("byte-compile-push-binding-init" function (:arguments ("clause")) nil [199070 199562])
            ("byte-compile-bind" function (:arguments ("var" "init-lexenv")) nil [199564 201429])
            ("byte-compile-unbind" function (:arguments ("clauses" "init-lexenv" "preserve-body-value")) nil [201431 202574])
            ("byte-compile-let" function (:arguments ("form")) nil [202576 204044])
            ("byte-defop-compiler-1" code nil nil [204049 204096])
            ("byte-defop-compiler-1" code nil nil [204097 204146])
            ("byte-defop-compiler-1" code nil nil [204147 204198])
            ("put" code nil nil [204200 204237])
            ("put" code nil nil [204238 204281])
            ("put" code nil nil [204282 204327])
            ("byte-compile-negated" function (:arguments ("form")) nil [204329 204435])
            ("byte-compile-negation-optimizer" function (:arguments ("form")) nil [204505 204823])
            ("byte-defop-compiler-1" code nil nil [204869 204898])
            ("byte-defop-compiler-1" code nil nil [204899 204937])
            ("byte-defop-compiler-1" code nil nil [204938 204976])
            ("byte-defop-compiler-1" code nil nil [204977 205015])
            ("byte-defop-compiler-1" code nil nil [205016 205059])
            ("byte-defop-compiler-1" code nil nil [205060 205100])
            ("byte-compile-catch" function (:arguments ("form")) nil [205102 205378])
            ("byte-compile-unwind-protect" function (:arguments ("form")) nil [205380 205628])
            ("byte-compile-condition-case" function (:arguments ("form")) nil [205630 208495])
            ("byte-compile-save-excursion" function (:arguments ("form")) nil [208497 208906])
            ("byte-compile-save-restriction" function (:arguments ("form")) nil [208908 209077])
            ("byte-compile-save-current-buffer" function (:arguments ("form")) nil [209079 209254])
            ("byte-defop-compiler-1" code nil nil [209288 209318])
            ("byte-defop-compiler-1" code nil nil [209319 209371])
            ("byte-defop-compiler-1" code nil nil [209372 209404])
            ("byte-defop-compiler-1" code nil nil [209405 209460])
            ("byte-defop-compiler-1" code nil nil [209808 209854])
            ("byte-compile-make-obsolete-variable" function (:arguments ("form")) nil [209855 210054])
            ("byte-compile-defvar" function (:arguments ("form")) nil [210056 211693])
            ("byte-compile-autoload" function (:arguments ("form")) nil [211695 212137])
            ("byte-compile-lambda-form" function (:arguments ("_form")) nil [212248 212342])
            ("put" code nil nil [212420 212487])
            ("byte-compile-file-form-defalias" function (:arguments ("form")) nil [212525 215383])
            ("byte-defop-compiler-1" code nil nil [215385 215450])
            ("byte-compile-no-warnings" function (:arguments ("form")) nil [215451 215571])
            ("byte-defop-compiler-1" code nil nil [215573 215687])
            ("byte-compile-suppressed-warnings" function (:arguments ("form")) nil [215688 215900])
            ("byte-defop-compiler-1" code nil nil [215955 216068])
            ("byte-compile-make-variable-buffer-local" function (:arguments ("form")) nil [216069 216377])
            ("put" code nil nil [216378 216481])
            ("byte-compile-form-make-variable-buffer-local" function (:arguments ("form")) nil [216482 216602])
            ("byte-defop-compiler-1" code nil nil [216718 216817])
            ("byte-compile-make-local-variable" function (:arguments ("form")) nil [216818 216960])
            ("put" code nil nil [216962 217033])
            ("put" code nil nil [217034 217111])
            ("byte-compile-define-symbol-prop" function (:arguments ("form")) nil [217112 218169])
            ("byte-compile-make-tag" function nil nil [218358 218464])
            ("byte-compile-out-tag" function (:arguments ("tag")) nil [218467 218879])
            ("byte-compile-goto" function (:arguments ("opcode" "tag")) nil [218881 219176])
            ("byte-compile-stack-adjustment" function (:arguments ("op" "operand")) nil [219178 219861])
            ("byte-compile-out" function (:arguments ("op" "operand")) nil [219863 220659])
            ("byte-compile-annotate-call-tree" function (:arguments ("form")) nil [220683 221598])
            ("display-call-tree" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [221723 226797])
            ("batch-byte-compile-if-not-done" function nil nil [226816 227042])
            ("batch-byte-compile" function (:arguments ("noforce")) nil [227122 229327])
            ("batch-byte-compile-file" function (:arguments ("file")) nil [229329 230311])
            ("byte-compile-refresh-preloaded" function nil nil [230313 231821])
            ("batch-byte-recompile-directory" function (:arguments ("arg")) nil [231838 232932])
            ("put" code nil nil [232961 233255])
            ("byte-compile" package nil nil [233257 233280])
            ("bytecomp" package nil nil [233281 233300])
            ("byte-code-meter" variable nil nil [233355 233379])
            ("byte-compile-report-ops" function nil nil [233380 234212])
            ("or" code nil nil [234394 234977])
            ("make-obsolete-variable" code nil nil [234986 235099])
            ("run-hooks" code nil nil [235100 235131]))          
      :file "bytecomp.el.gz"
      :pointmax 235159
      :fsize 61397
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 234983 . 234984) (symbol 234980 . 234983) (symbol 234374 . 234391) (open-paren 234373 . 234374) (close-paren 5522 . 5523) (symbol 5487 . 5504) (open-paren 5486 . 5487) (close-paren 5484 . 5485) (symbol 5449 . 5466) (open-paren 5448 . 5449) (close-paren 5267 . 5268) (symbol 5231 . 5248) (open-paren 5230 . 5231)))
    (semanticdb-table "semanticdb-table-43fb7948"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1097 1113])
            ("find-func" include nil nil [1114 1134])
            ("speedbar" include nil nil [1135 1154])
            ("cl-extra" include nil nil [1265 1284])
            ("eieio-browse" function
               (:user-visible-flag t
                :arguments ("root-class"))
                nil [1311 1965])
            ("eieio-browse-tree" function (:arguments ("this-root" "prefix" "ch-prefix")) nil [1967 2693])
            ("declare-function" code nil nil [2785 2849])
            ("define-obsolete-function-alias" code nil nil [2866 2943])
            ("eieio-build-class-alist" function (:arguments ("class" "instantiable-only" "buildlist")) nil [2945 3887])
            ("eieio-read-class" variable nil nil [3889 3973])
            ("eieio-read-class" function (:arguments ("prompt" "histvar" "instantiable-only")) nil [3975 4377])
            ("eieio-read-subclass" function (:arguments ("prompt" "class" "histvar" "instantiable-only")) nil [4379 4868])
            ("eieio-help-constructor" function (:arguments ("ctr")) nil [4915 6194])
            ("eieio-display-method-list" function (:user-visible-flag t) nil [6283 8630])
            ("eieio-class-speedbar-key-map" variable nil nil [8657 8755])
            ("eieio-class-speedbar-make-map" function nil nil [8757 9158])
            ("if" code nil nil [9160 9414])
            ("eieio-class-speedbar-menu" variable nil nil [9416 9528])
            ("eieio-class-speedbar" function (:arguments ("_dir-or-object" "_depth")) nil [9530 9991])
            ("eieio-class-button" function (:arguments ("class" "depth")) nil [9993 10566])
            ("eieio-sb-expand" function (:arguments ("text" "class" "indent")) nil [10568 11316])
            ("eieio-describe-class-sb" function (:arguments ("_text" "token" "_indent")) nil [11318 11552])
            ("eieio-opt" package nil nil [11554 11574]))          
      :file "eieio-opt.el.gz"
      :pointmax 11603
      :fsize 4057
      :lastmodtime '(25521 36546 0 0)
      :unmatched-syntax nil))
  :file "!Applications!Emacs.app!Contents!Resources!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
