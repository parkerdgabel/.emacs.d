;; Object semanticdb-project-database-file-4f2f4f38
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4f2f4f38"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4b9cc4da"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bytecomp" include nil nil [1108 1127])
            ("cl-lib" include nil nil [1128 1145])
            ("tabulated-list" include nil nil [1146 1171])
            ("deftheme" code nil nil [1323 1345])
            ("enable-theme" code nil nil [1348 1375])
            ("setq" code nil nil [1511 1581])
            ("if" code nil nil [1604 2177])
            ("regexp-opt" include nil nil [2201 2222])
            ("use-package" customgroup (:user-visible-flag t) nil [2225 2402])
            ("use-package-version" variable
               (:constant-flag t
                :default-value "2.4.5")
                nil [2404 2477])
            ("use-package-keywords" variable (:default-value '(:disabled :load-path :requires :defines :functions :preface :if :when :unless :no-require :catch :after :custom :custom-face :bind :bind* :bind-keymap :bind-keymap* :interpreter :mode :magic :magic-fallback :hook :commands :autoload :init :defer :demand :load :config)) nil [2479 3791])
            ("use-package-deferring-keywords" variable (:default-value '(:bind-keymap :bind-keymap* :commands :autoload)) nil [3793 4291])
            ("use-package-ignore-unknown-keywords" variable nil nil [4293 4550])
            ("use-package-use-theme" variable (:default-value t) nil [4552 4758])
            ("use-package-verbose" variable nil nil [4760 5322])
            ("use-package-check-before-init" variable nil nil [5324 5539])
            ("use-package-always-defer" variable nil nil [5541 5736])
            ("use-package-always-demand" variable nil nil [5738 5934])
            ("use-package-defaults" variable (:default-value '((:config '(t) t) (:init nil t) (:catch t (lambda (name args) (not use-package-expand-minimally))) (:defer use-package-always-defer (lambda (name args) (and use-package-always-defer (not (plist-member args :defer)) (not (plist-member args :demand))))) (:demand use-package-always-demand (lambda (name args) (and use-package-always-demand (not (plist-member args :defer)) (not (plist-member args :demand))))))) nil [5936 7833])
            ("use-package-merge-key-alist" variable (:default-value '((:if lambda (new old) `(and ,new ,old)) (:after lambda (new old) `(:all ,new ,old)) (:defer lambda (new old) old) (:bind lambda (new old) (append new (list :break) old)))) nil [7835 8706])
            ("use-package-hook-name-suffix" variable (:default-value "-hook") nil [8708 8959])
            ("use-package-minimum-reported-time" variable (:default-value 0.1) nil [8961 9194])
            ("use-package-inject-hooks" variable nil nil [9196 10102])
            ("use-package-expand-minimally" variable nil nil [10104 10715])
            ("use-package-form-regexp-eval" variable (:default-value `(concat ,(eval-when-compile (concat "^\\s-*(" (regexp-opt '("use-package" "require") t) "\\s-+\\(")) (or (bound-and-true-p lisp-mode-symbol-regexp) "\\(?:\\sw\\|\\s_\\|\\\\.\\)+") "\\)")) nil [10717 11231])
            ("use-package-enable-imenu-support" variable nil nil [11233 11979])
            ("use-package-font-lock-keywords" variable
               (:constant-flag t
                :default-value '(("(\\(use-package\\)\\_>[ 	']*\\(\\(?:\\sw\\|\\s_\\)+\\)?" (1 font-lock-keyword-face) (2 font-lock-constant-face nil t))))
                nil [11981 12159])
            ("font-lock-add-keywords" code nil nil [12161 12233])
            ("use-package-compute-statistics" variable nil nil [12235 12612])
            ("use-package-statistics" variable (:default-value (make-hash-table)) nil [12614 12663])
            ("use-package-error" function (:arguments ("msg")) nil [12773 12912])
            ("use-package-concat" function (:arguments ("elems")) nil [12914 13091])
            ("use-package-non-nil-symbolp" function (:arguments ("sym")) nil [13093 13163])
            ("use-package-as-symbol" function (:arguments ("string-or-symbol")) nil [13165 13403])
            ("use-package-as-string" function (:arguments ("string-or-symbol")) nil [13405 13648])
            ("use-package-regex-p" function (:arguments ("re")) nil [13650 13792])
            ("use-package-normalize-regex" function (:arguments ("re")) nil [13794 14048])
            ("use-package-is-pair" function (:arguments ("x" "car-pred" "cdr-pred")) nil [14050 14327])
            ("use-package-as-mode" function (:arguments ("string-or-symbol")) nil [14329 14687])
            ("use-package-load-name" function (:arguments ("name" "noerror")) nil [14689 15011])
            ("use-package-hook-injector" function (:arguments ("name-string" "keyword" "body")) nil [15013 15662])
            ("use-package-with-elapsed-timer" function (:arguments ("text" "body")) nil [15664 16401])
            ("put" code nil nil [16403 16464])
            ("use-package-require" function (:arguments ("name" "no-require" "body")) nil [16466 17010])
            ("use-package-plist-delete" function (:arguments ("plist" "property")) nil [17117 17415])
            ("use-package-plist-delete-first" function (:arguments ("plist" "property")) nil [17417 17784])
            ("use-package-plist-maybe-put" function (:arguments ("plist" "property" "value")) nil [17786 18002])
            ("use-package-plist-cons" function (:arguments ("plist" "property" "value")) nil [18004 18192])
            ("use-package-plist-append" function (:arguments ("plist" "property" "value")) nil [18194 18389])
            ("use-package-split-list" function (:arguments ("pred" "xs")) nil [18391 18718])
            ("use-package-split-list-at-keys" function (:arguments ("key" "lst")) nil [18720 18928])
            ("use-package-keyword-index" function (:arguments ("keyword")) nil [19029 19268])
            ("use-package-normalize-plist" function (:arguments ("name" "input" "plist" "merge-function")) nil [19270 20692])
            ("use-package-unalias-keywords" function (:arguments ("_name" "args")) nil [20694 20974])
            ("use-package-merge-keys" function (:arguments ("key" "new" "old")) nil [20976 21156])
            ("use-package-sort-keywords" function (:arguments ("plist")) nil [21158 21665])
            ("use-package-normalize-keywords" function (:arguments ("name" "args")) nil [21667 26642])
            ("use-package-process-keywords" function (:arguments ("name" "plist" "state")) nil [26644 27851])
            ("put" code nil nil [27853 27917])
            ("use-package-list-insert" function (:arguments ("elem" "xs" "anchor" "after" "test")) nil [27919 28829])
            ("use-package-only-one" function (:arguments ("label" "args" "f")) nil [28941 29272])
            ("put" code nil nil [29274 29330])
            ("use-package-as-one" function (:arguments ("label" "args" "f" "allow-empty")) nil [29332 29818])
            ("put" code nil nil [29820 29874])
            ("use-package-memoize" function (:arguments ("f" "arg")) nil [29876 30361])
            ("use-package-normalize-value" function (:arguments ("_label" "arg")) nil [30363 30681])
            ("use-package-normalize-symbols" function (:arguments ("label" "arg" "recursed")) nil [30683 31072])
            ("use-package-normalize-symlist" function (:arguments ("_name" "keyword" "args")) nil [31074 31218])
            ("use-package-normalize-recursive-symbols" function (:arguments ("label" "arg")) nil [31220 31599])
            ("use-package-normalize-recursive-symlist" function (:arguments ("_name" "keyword" "args")) nil [31601 31765])
            ("use-package-normalize-paths" function (:arguments ("label" "arg" "recursed")) nil [31767 32488])
            ("use-package-normalize-predicate" function (:arguments ("_name" "keyword" "args")) nil [32490 32667])
            ("use-package-normalize-form" function (:arguments ("label" "args")) nil [32669 33173])
            ("use-package-normalize-forms" function (:arguments ("_name" "keyword" "args")) nil [33175 33289])
            ("use-package-normalize-pairs" function (:arguments ("key-pred" "val-pred" "name" "label" "arg" "recursed")) nil [33291 34147])
            ("use-package-recognize-function" function (:arguments ("v" "binding" "additional-pred")) nil [34149 34776])
            ("use-package-normalize-function" function (:arguments ("v")) nil [34778 35301])
            ("use-package-normalize-commands" function (:arguments ("args")) nil [35303 35583])
            ("use-package-normalize-mode" function (:arguments ("name" "keyword" "args")) nil [35585 35942])
            ("use-package-autoloads-mode" function (:arguments ("_name" "_keyword" "args")) nil [35944 36225])
            ("use-package-handle-mode" function (:arguments ("name" "alist" "args" "rest" "state")) nil [36227 36630])
            ("use-package-reset-statistics" function (:user-visible-flag t) nil [36733 36913])
            ("use-package-statistics-status" function (:arguments ("package")) nil [36915 37239])
            ("use-package-statistics-last-event" function (:arguments ("package")) nil [37241 37515])
            ("use-package-statistics-time" function (:arguments ("package")) nil [37517 37856])
            ("use-package-statistics-convert" function (:arguments ("package")) nil [37858 38372])
            ("use-package-report" function (:user-visible-flag t) nil [38374 39124])
            ("use-package-statistics-status-order" variable (:default-value '(("Declared" . 0) ("Prefaced" . 1) ("Initialized" . 2) ("Configured" . 3))) nil [39126 39267])
            ("define-derived-mode" code nil nil [39269 40632])
            ("use-package-statistics-gather" function (:arguments ("keyword" "name" "after")) nil [40634 41086])
            ("use-package-normalize/:disabled" function (:arguments ("_name" "_keyword" "_arg")) nil [41300 41389])
            ("use-package-handler/:disabled" function (:arguments ("name" "_keyword" "_arg" "rest" "state")) nil [41391 41509])
            ("use-package-normalize-test" function (:arguments ("_name" "keyword" "args")) nil [41540 41681])
            ("defalias" code nil nil [41683 41748])
            ("use-package-handler/:if" function (:arguments ("name" "_keyword" "pred" "rest" "state")) nil [41750 41904])
            ("defalias" code nil nil [41906 41973])
            ("defalias" code nil nil [41975 42037])
            ("defalias" code nil nil [42039 42108])
            ("use-package-handler/:unless" function (:arguments ("name" "_keyword" "pred" "rest" "state")) nil [42110 42270])
            ("defalias" code nil nil [42288 42362])
            ("use-package-handler/:requires" function (:arguments ("name" "_keyword" "requires" "rest" "state")) nil [42364 42718])
            ("use-package-normalize/:load-path" function (:arguments ("_name" "keyword" "args")) nil [42737 42882])
            ("use-package-handler/:load-path" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [42884 43169])
            ("defalias" code nil nil [43189 43267])
            ("use-package-handler/:no-require" function (:arguments ("name" "_keyword" "_arg" "rest" "state")) nil [43269 43389])
            ("defalias" code nil nil [43406 43479])
            ("use-package-handler/:defines" function (:arguments ("name" "_keyword" "_arg" "rest" "state")) nil [43481 43598])
            ("defalias" code nil nil [43617 43692])
            ("use-package-handler/:functions" function (:arguments ("name" "_keyword" "_arg" "rest" "state")) nil [43694 43813])
            ("defalias" code nil nil [43830 43901])
            ("use-package-handler/:preface" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [43903 44328])
            ("use-package--form" variable nil nil [44343 44369])
            ("use-package--hush-function" variable (:default-value nil) nil [44370 44437])
            ("use-package-hush" function (:arguments ("context" "keyword" "body")) nil [44439 44605])
            ("use-package-normalize/:catch" function (:arguments ("_name" "keyword" "args")) nil [44607 44778])
            ("use-package-handler/:catch" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [44780 46313])
            ("defalias" code nil nil [46334 46408])
            ("defalias" code nil nil [46409 46483])
            ("use-package-handler/:interpreter" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [46485 46628])
            ("defalias" code nil nil [46642 46709])
            ("defalias" code nil nil [46710 46777])
            ("use-package-handler/:mode" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [46779 46908])
            ("defalias" code nil nil [46923 46991])
            ("defalias" code nil nil [46992 47060])
            ("use-package-handler/:magic" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [47062 47193])
            ("defalias" code nil nil [47217 47294])
            ("defalias" code nil nil [47295 47372])
            ("use-package-handler/:magic-fallback" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [47374 47523])
            ("use-package-normalize/:hook" function (:arguments ("name" "keyword" "args")) nil [47537 48551])
            ("defalias" code nil nil [48553 48620])
            ("use-package-handler/:hook" function (:arguments ("name" "_keyword" "args" "rest" "state")) nil [48622 49308])
            ("use-package-hook-handler-normalize-mode-symbols" function (:arguments ("syms")) nil [49310 49482])
            ("defalias" code nil nil [49500 49574])
            ("use-package-handler/:commands" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [49576 50324])
            ("defalias" code nil nil [50342 50418])
            ("use-package-handler/:autoload" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [50420 51162])
            ("defalias" code nil nil [51177 51250])
            ("use-package-handler/:defer" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [51252 51768])
            ("use-package-normalize/:after" function (:arguments ("name" "keyword" "args")) nil [51783 51960])
            ("use-package-after-count-uses" function (:arguments ("features*")) nil [51962 52658])
            ("use-package-require-after-load" function (:arguments ("features*" "body")) nil [52660 53434])
            ("use-package-handler/:after" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [53436 53866])
            ("defalias" code nil nil [53882 53956])
            ("use-package-handler/:demand" function (:arguments ("name" "_keyword" "_arg" "rest" "state")) nil [53958 54074])
            ("use-package-normalize/:custom" function (:arguments ("_name" "keyword" "args")) nil [54090 54515])
            ("use-package-handler/:custom" function (:arguments ("name" "_keyword" "args" "rest" "state")) nil [54517 56021])
            ("use-package-normalize/:custom-face" function (:arguments ("name-symbol" "_keyword" "arg")) nil [56042 56649])
            ("use-package-handler/:custom-face" function (:arguments ("name" "_keyword" "args" "rest" "state")) nil [56651 56923])
            ("defalias" code nil nil [56937 57005])
            ("use-package-handler/:init" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [57007 57739])
            ("use-package-normalize/:load" function (:arguments ("name" "keyword" "args")) nil [57753 57929])
            ("use-package-handler/:load" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [57931 58168])
            ("defalias" code nil nil [58184 58254])
            ("use-package-handler/:config" function (:arguments ("name" "_keyword" "arg" "rest" "state")) nil [58256 59111])
            ("use-package-core" function (:arguments ("name" "args")) nil [59218 60157])
            ("use-package" function (:arguments ("name" "args")) nil [60174 64393])
            ("use-package-core" package nil nil [64395 64422]))          
      :file "use-package-core.el.gz"
      :pointmax 64458
      :fsize 15629
      :lastmodtime '(25547 34250 0 0)
      :unmatched-syntax '((close-paren 2222 . 2223) (symbol 2181 . 2198) (open-paren 2180 . 2181) (close-paren 2177 . 2178) (symbol 1584 . 1601) (open-paren 1583 . 1584) (close-paren 1345 . 1346) (symbol 1174 . 1190) (open-paren 1173 . 1174))))
  :file "!Applications!Emacs.app!Contents!Resources!lisp!use-package!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
