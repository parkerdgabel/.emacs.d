;; Object semanticdb-project-database-file-4f87b230
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-4f87b230"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4f87b26a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3143 3160])
            ("lv" include nil nil [3161 3174])
            ("ring" include nil nil [3175 3190])
            ("hydra-curr-map" variable nil nil [3192 3263])
            ("hydra-curr-on-exit" variable nil nil [3265 3345])
            ("hydra-curr-foreign-keys" variable nil nil [3347 3423])
            ("hydra-curr-body-fn" variable nil nil [3425 3497])
            ("hydra-deactivate" variable nil nil [3499 3646])
            ("hydra-amaranth-warn-message" variable (:default-value "An amaranth Hydra can only exit through a blue head") nil [3648 3855])
            ("hydra-set-transient-map" function (:arguments ("keymap" "on-exit" "foreign-keys")) nil [3857 4552])
            ("hydra--clearfun" function nil nil [4554 5227])
            ("hydra--ignore" variable nil nil [5229 5306])
            ("hydra--input-method-function" variable nil nil [5308 5400])
            ("hydra-disable" function nil nil [5402 6189])
            ("unless" code nil nil [6191 6593])
            ("unless" code nil nil [6595 6959])
            ("hydra-amaranth-warn" function (:user-visible-flag t) nil [6961 7103])
            ("hydra" customgroup (:user-visible-flag t) nil [7119 7214])
            ("hydra-is-helpful" variable (:default-value t) nil [7216 7347])
            ("hydra-default-hint" variable nil nil [7349 7500])
            ("declare-function" code nil nil [7502 7545])
            ("declare-function" code nil nil [7546 7589])
            ("declare-function" code nil nil [7590 7653])
            ("hydra-posframe-show-params" variable (:default-value '(:internal-border-width 1 :internal-border-color "red" :poshandler posframe-poshandler-window-center)) nil [7655 7853])
            ("hydra--posframe-timer" variable nil nil [7855 7925])
            ("hydra-posframe-show" function (:arguments ("str")) nil [7927 8201])
            ("hydra-posframe-hide" function nil nil [8203 8489])
            ("hydra-hint-display-alist" variable (:default-value (list (list 'lv #'lv-message #'lv-delete-window) (list 'message (lambda (str) (message "%s" str)) (lambda nil (message ""))) (list 'posframe #'hydra-posframe-show #'hydra-posframe-hide))) nil [8491 8783])
            ("hydra-hint-display-type" variable (:default-value 'lv) nil [8785 8967])
            ("hydra-verbose" variable nil nil [8969 9085])
            ("hydra-key-format-spec" variable (:default-value "%s") nil [9087 9279])
            ("hydra-doc-format-spec" variable (:default-value "%s") nil [9281 9403])
            ("hydra-look-for-remap" variable nil nil [9405 9689])
            ("make-obsolete-variable" code nil nil [9691 9825])
            ("hydra-face-red" variable
               (:default-value '((t (:foreground "#FF0000" :bold t)))
                :type "face")
                nil [9827 9987])
            ("hydra-face-blue" variable
               (:default-value '((((class color) (background light)) :foreground "#0000FF" :bold t) (((class color) (background dark)) :foreground "#8ac6f2" :bold t))
                :type "face")
                nil [9989 10238])
            ("hydra-face-amaranth" variable
               (:default-value '((t (:foreground "#E52B50" :bold t)))
                :type "face")
                nil [10240 10414])
            ("hydra-face-pink" variable
               (:default-value '((t (:foreground "#FF6EB4" :bold t)))
                :type "face")
                nil [10416 10577])
            ("hydra-face-teal" variable
               (:default-value '((t (:foreground "#367588" :bold t)))
                :type "face")
                nil [10579 10746])
            ("hydra-add-font-lock" function nil nil [10766 11096])
            ("hydra-add-imenu" function nil nil [11108 11310])
            ("eval-after-load" code nil nil [11330 12231])
            ("hydra-base-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "<f1> k") 'hydra--describe-key) (define-key map [21] 'hydra--universal-argument) (define-key map [45] 'hydra--negative-argument) (define-key map [48] 'hydra--digit-argument) (define-key map [49] 'hydra--digit-argument) (define-key map [50] 'hydra--digit-argument) (define-key map [51] 'hydra--digit-argument) (define-key map [52] 'hydra--digit-argument) (define-key map [53] 'hydra--digit-argument) (define-key map [54] 'hydra--digit-argument) (define-key map [55] 'hydra--digit-argument) (define-key map [56] 'hydra--digit-argument) (define-key map [57] 'hydra--digit-argument) (define-key map [kp-0] 'hydra--digit-argument) (define-key map [kp-1] 'hydra--digit-argument) (define-key map [kp-2] 'hydra--digit-argument) (define-key map [kp-3] 'hydra--digit-argument) (define-key map [kp-4] 'hydra--digit-argument) (define-key map [kp-5] 'hydra--digit-argument) (define-key map [kp-6] 'hydra--digit-argument) (define-key map [kp-7] 'hydra--digit-argument) (define-key map [kp-8] 'hydra--digit-argument) (define-key map [kp-9] 'hydra--digit-argument) (define-key map [kp-subtract] 'hydra--negative-argument) map)) nil [12256 13617])
            ("hydra--universal-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13619 13905])
            ("hydra--digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13907 14642])
            ("hydra--negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14644 14871])
            ("hydra--describe-key" function (:user-visible-flag t) nil [14873 15142])
            ("hydra-repeat--prefix-arg" variable nil nil [15155 15235])
            ("hydra-repeat--command" variable nil nil [15237 15311])
            ("hydra-repeat" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15313 15778])
            ("hydra--callablep" function (:arguments ("x")) nil [15799 15941])
            ("hydra--make-callable" function (:arguments ("x")) nil [15943 16339])
            ("hydra-plist-get-default" function (:arguments ("plist" "prop" "default")) nil [16341 16690])
            ("hydra--head-property" function (:arguments ("h" "prop" "default")) nil [16692 16893])
            ("hydra--head-set-property" function (:arguments ("h" "prop" "value")) nil [16895 17051])
            ("hydra--head-has-property" function (:arguments ("h" "prop")) nil [17053 17177])
            ("hydra--body-foreign-keys" function (:arguments ("body")) nil [17179 17438])
            ("hydra--body-exit" function (:arguments ("body")) nil [17440 17658])
            ("hydra--normalize-body" function (:arguments ("body")) nil [17660 18371])
            ("defalias" code nil nil [18373 18402])
            ("hydra-default-pre" function nil nil [18404 18801])
            ("hydra-timeout-timer" variable (:default-value (timer-create)) nil [18803 18877])
            ("hydra-message-timer" variable (:default-value (timer-create)) nil [18879 18946])
            ("hydra--work-around-dedicated" variable (:default-value t) nil [18948 19101])
            ("hydra-keyboard-quit" function (:user-visible-flag t) nil [19103 19463])
            ("hydra-head-format" variable (:default-value "[%s]: ") nil [19465 19554])
            ("hydra-key-doc-function" variable (:default-value 'hydra-key-doc-function-default) nil [19556 19666])
            ("hydra-key-doc-function-default" function (:arguments ("key" "key-width" "doc" "doc-width")) nil [19668 19995])
            ("hydra--to-string" function (:arguments ("x")) nil [19997 20065])
            ("hydra--eval-and-format" function (:arguments ("x")) nil [20067 20251])
            ("hydra--hint-heads-wocol" function (:arguments ("body" "heads")) nil [20253 22290])
            ("hydra--hint" function (:arguments ("body" "heads")) nil [22292 23143])
            ("hydra-fontify-head-function" variable nil nil [23145 23244])
            ("hydra-fontify-head-default" function (:arguments ("head" "body")) nil [23246 24268])
            ("hydra-fontify-head-greyscale" function (:arguments ("head" "_body")) nil [24270 24519])
            ("hydra-fontify-head" function (:arguments ("head" "body")) nil [24521 24701])
            ("hydra--strip-align-markers" function (:arguments ("str")) nil [24703 25091])
            ("hydra-docstring-keys-translate-alist" variable (:default-value '(("↑" . "<up>") ("↓" . "<down>") ("→" . "<right>") ("←" . "<left>") ("⌫" . "DEL") ("⌦" . "<deletechar>") ("⏎" . "RET"))) nil [25093 25285])
            ("hydra-width-spec-regex" variable
               (:constant-flag t
                :default-value " ?-?[0-9]*?")
                nil [25287 25392])
            ("hydra-key-regex" variable (:default-value "[][\\[:alnum:] ~.,;:/|?<>={}*+#%@!&^↑↓←→⌫⌦⏎'`()\"$-]+?") nil [25394 25522])
            ("hydra--format" function (:arguments ("_name" "body" "docstring" "heads")) nil [25524 29783])
            ("hydra--format-1" function (:arguments ("docstring" "rest" "varlist")) nil [29785 30937])
            ("hydra--complain" function (:arguments ("format-string" "args")) nil [30939 31169])
            ("hydra--doc" function (:arguments ("body-key" "body-name" "heads")) nil [31171 31735])
            ("hydra--call-interactively-remap-maybe" function (:arguments ("cmd")) nil [31737 32130])
            ("hydra--call-interactively" function (:arguments ("cmd" "name")) nil [32132 32487])
            ("hydra--make-defun" function (:arguments ("name" "body" "doc" "head" "keymap" "body-pre" "body-before-exit" "body-after-exit")) nil [32489 35609])
            ("hydra-props-alist" variable nil nil [35611 35641])
            ("hydra-set-property" function (:arguments ("name" "key" "val")) nil [35643 36052])
            ("hydra-get-property" function (:arguments ("name" "key")) nil [36054 36288])
            ("hydra-show-hint" function (:arguments ("hint" "caller")) nil [36290 36710])
            ("hydra--make-funcall" function (:arguments ("sym")) nil [36712 36867])
            ("hydra--head-name" function (:arguments ("h" "name")) nil [36869 37478])
            ("hydra--delete-duplicates" function (:arguments ("heads")) nil [37480 38182])
            ("hydra--pad" function (:arguments ("lst" "n")) nil [38184 38352])
            ("hydra-multipop" function (:arguments ("lst" "n")) nil [38354 38630])
            ("hydra--matrix" function (:arguments ("lst" "rows" "cols")) nil [38632 38897])
            ("hydra--cell" function (:arguments ("fstr" "names")) nil [38899 39593])
            ("hydra--vconcat" function (:arguments ("strs" "joiner")) nil [39595 40006])
            ("hydra-cell-format" variable (:default-value "% -20s %% -8`%s") nil [40008 40096])
            ("hydra--table" function (:arguments ("names" "rows" "cols" "cell-formats")) nil [40098 40839])
            ("hydra-reset-radios" function (:arguments ("names")) nil [40841 41028])
            ("hydra--normalize-heads" function (:arguments ("heads")) nil [41127 41579])
            ("hydra--sort-heads" function (:arguments ("normalized-heads")) nil [41581 43073])
            ("hydra--pad-heads" function (:arguments ("heads-groups" "padding-head")) nil [43075 43702])
            ("hydra--generate-matrix" function (:arguments ("heads-groups")) nil [43704 45243])
            ("hydra-interpose" function (:arguments ("x" "lst")) nil [45245 45431])
            ("hydra--hint-row" function (:arguments ("heads" "body")) nil [45433 46252])
            ("hydra--hint-from-matrix" function (:arguments ("body" "heads-matrix")) nil [46255 46721])
            ("hydra--hint-from-matrix-1" function (:arguments ("body" "heads-matrix")) nil [46723 47200])
            ("hydra-idle-message" function (:arguments ("secs" "hint" "name")) nil [47202 47632])
            ("hydra-timeout" function (:arguments ("secs" "function")) nil [47634 48152])
            ("defhydra" function (:arguments ("name" "body" "docstring" "heads")) nil [48180 58012])
            ("defhydra+" function (:arguments ("name" "body" "docstring" "heads")) nil [58014 58550])
            ("hydra--prop" function (:arguments ("name" "prop-name")) nil [58552 58652])
            ("defhydradio" function (:arguments ("name" "_body" "heads")) nil [58654 59460])
            ("hydra--radio" function (:arguments ("parent" "head")) nil [59462 59874])
            ("hydra--quote-maybe" function (:arguments ("x")) nil [59876 60039])
            ("hydra--cycle-radio" function (:arguments ("sym")) nil [60041 60563])
            ("hydra-pause-ring" variable (:default-value (make-ring 10)) nil [60565 60633])
            ("hydra-pause-resume" function (:user-visible-flag t) nil [60635 61121])
            ("hydra" package nil nil [61240 61256]))          
      :file "hydra.el"
      :pointmax 61281
      :fsize 61310
      :lastmodtime '(25869 47996 431002 483000)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4f86dd48"
      :file "lv.el"
      :fsize 4990
      :lastmodtime '(25869 47996 431094 775000)))
  :file "!Users!parkergabel!.emacs.d!straight!repos!hydra!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
