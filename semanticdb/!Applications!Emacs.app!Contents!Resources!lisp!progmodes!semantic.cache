;; Object semanticdb-project-database-file-43fa665c
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-43fa665c"
  :tables
  (list
    (semanticdb-table "semanticdb-table-4a813d6e"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [1231 1246])
            ("xref" include nil nil [1247 1262])
            ("fileloop" include nil nil [1263 1282])
            ("tags-file-name" variable nil nil [1299 1601])
            ("etags" customgroup (:user-visible-flag t) nil [1829 1880])
            ("tags-case-fold-search" variable (:default-value 'default) nil [1897 2290])
            ("tags-table-list" variable nil nil [2383 2748])
            ("tags-compression-info-list" variable (:default-value (purecopy '("" ".Z" ".bz2" ".gz" ".xz" ".tgz"))) nil [2765 3038])
            ("tags-add-tables" variable (:default-value 'ask-user) nil [3531 3909])
            ("tags-revert-without-query" variable nil nil [3911 4044])
            ("tags-table-computed-list" variable nil nil [4046 4528])
            ("tags-table-computed-list-for" variable nil nil [4530 4776])
            ("tags-table-list-pointer" variable nil nil [4778 4967])
            ("tags-table-list-started-at" variable nil nil [4969 5087])
            ("tags-table-set-list" variable nil nil [5089 5251])
            ("find-tag-hook" variable nil nil [5268 5498])
            ("find-tag-default-function" variable nil nil [5515 5836])
            ("define-obsolete-variable-alias" code nil nil [5838 5935])
            ("tags-location-ring-length" variable (:default-value 16) nil [5937 6144])
            ("tags-tag-face" variable (:default-value 'default) nil [6146 6263])
            ("tags-apropos-verbose" variable nil nil [6265 6411])
            ("tags-apropos-additional-actions" variable nil nil [6413 7359])
            ("find-tag-marker-ring" variable (:default-value (make-ring 16)) nil [7361 7501])
            ("make-obsolete-variable" code nil nil [7502 7616])
            ("default-tags-table-function" variable nil nil [7618 7842])
            ("tags-location-ring" variable (:default-value (make-ring tags-location-ring-length)) nil [7844 8045])
            ("tags-table-files" variable nil nil [8122 8287])
            ("tags-completion-table" variable nil nil [8289 8376])
            ("tags-included-tables" variable nil nil [8378 8471])
            ("tags-table-format-functions" variable (:default-value '(etags-recognize-tags-table tags-recognize-empty-tags-table)) nil [8502 8881])
            ("file-of-tag-function" variable nil nil [8883 9076])
            ("tags-table-files-function" variable nil nil [9077 9187])
            ("tags-completion-table-function" variable nil nil [9188 9282])
            ("snarf-tag-function" variable nil nil [9283 9491])
            ("goto-tag-location-function" variable nil nil [9492 9664])
            ("find-tag-regexp-search-function" variable nil nil [9665 9785])
            ("find-tag-regexp-tag-order" variable nil nil [9786 9894])
            ("find-tag-regexp-next-line-after-failure-p" variable nil nil [9895 10014])
            ("find-tag-search-function" variable nil nil [10015 10121])
            ("find-tag-tag-order" variable nil nil [10122 10216])
            ("find-tag-next-line-after-failure-p" variable nil nil [10217 10322])
            ("list-tags-function" variable nil nil [10323 10410])
            ("tags-apropos-function" variable nil nil [10411 10504])
            ("tags-included-tables-function" variable nil nil [10505 10623])
            ("verify-tags-table-function" variable nil nil [10624 10732])
            ("initialize-new-tags-table" function nil nil [10735 11358])
            ("define-derived-mode" code nil nil [11375 11540])
            ("visit-tags-table" function
               (:user-visible-flag t
                :arguments ("file" "local"))
                nil [11557 13853])
            ("tags-table-check-computed-list" function nil nil [13855 15727])
            ("tags-table-extend-computed-list" function nil nil [15729 17440])
            ("tags-expand-table-name" function (:arguments ("file")) nil [17442 17653])
            ("tags-table-list-member" function (:arguments ("file" "list")) nil [17785 18255])
            ("tags-verify-table" function (:arguments ("file")) nil [18257 20116])
            ("tags-table-including" function (:arguments ("this-file" "core-only")) nil [20527 22570])
            ("tags-next-table" function nil nil [22572 23412])
            ("visit-tags-table-buffer" function (:arguments ("cont" "cbuf")) nil [23429 30104])
            ("tags-reset-tags-tables" function (:user-visible-flag t) nil [30106 30764])
            ("file-of-tag" function (:arguments ("relative")) nil [30767 31100])
            ("tags-table-files" function nil nil [31117 31465])
            ("tags-included-tables" function nil nil [31467 31710])
            ("tags-completion-table" function (:arguments ("buf")) nil [31713 33110])
            ("tags-lazy-completion-table" function nil nil [33127 33583])
            ("tags-completion-at-point-function" function nil nil [33830 34550])
            ("find-tag-tag" function (:arguments ("string")) nil [34553 34946])
            ("find-tag--completion-ignore-case" function nil nil [34948 35085])
            ("find-tag--default" function nil nil [35087 35251])
            ("last-tag" variable nil nil [35253 35310])
            ("find-tag-interactive" function (:arguments ("prompt" "no-default")) nil [35312 35725])
            ("find-tag-history" variable nil nil [35727 35756])
            ("etags-case-fold-search" variable nil nil [35792 35823])
            ("etags-syntax-table" variable nil nil [35824 35851])
            ("local-find-tag-hook" variable nil nil [35852 35880])
            ("find-tag-noselect" function
               (:user-visible-flag t
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [35897 38992])
            ("find-tag" function (:arguments ("tagname" "next-p" "regexp-p")) nil [39009 40258])
            ("find-tag-other-window" function (:arguments ("tagname" "next-p" "regexp-p")) nil [40275 42184])
            ("find-tag-other-frame" function (:arguments ("tagname" "next-p")) nil [42201 43424])
            ("find-tag-regexp" function (:arguments ("regexp" "next-p" "other-window")) nil [43441 44584])
            ("defalias" code nil nil [44601 44639])
            ("tag-lines-already-matched" variable nil nil [44643 44719])
            ("find-tag-in-order" function (:arguments ("pattern" "search-forward-func" "order" "next-line-after-failure-p" "matching" "first-search")) nil [44750 49151])
            ("tag-find-file-of-tag-noselect" function (:arguments ("file")) nil [49153 50997])
            ("tag-find-file-of-tag" function (:arguments ("file")) nil [50999 51184])
            ("etags-recognize-tags-table" function nil nil [51225 52835])
            ("etags-verify-tags-table" function nil nil [52837 53033])
            ("etags-file-of-tag" function (:arguments ("relative")) nil [53035 53367])
            ("etags-tags-completion-table" function nil nil [53370 54450])
            ("etags-snarf-tag" function (:arguments ("use-explicit")) nil [54452 56041])
            ("etags-goto-tag-location" function (:arguments ("tag-info")) nil [56043 58853])
            ("etags-list-tags" function (:arguments ("file")) nil [58855 60270])
            ("tags-with-face" function (:arguments ("face" "body")) nil [60272 60603])
            ("etags-tags-apropos-additional" function (:arguments ("regexp")) nil [60605 61842])
            ("etags-tags-apropos" function (:arguments ("string")) nil [61844 64111])
            ("etags-tags-table-files" function nil nil [64113 64508])
            ("etags-tags-included-tables" function nil nil [64549 65057])
            ("tags-recognize-empty-tags-table" function nil nil [65089 65712])
            ("tag-exact-file-name-match-p" function (:arguments ("tag")) nil [66226 66494])
            ("tag-file-name-match-p" function (:arguments ("tag")) nil [66619 66841])
            ("tag-exact-match-p" function (:arguments ("tag")) nil [67175 67626])
            ("tag-implicit-name-match-p" function (:arguments ("tag")) nil [67743 68281])
            ("tag-symbol-match-p" function (:arguments ("tag")) nil [68410 68728])
            ("tag-word-match-p" function (:arguments ("tag")) nil [68846 69106])
            ("tag-partial-file-name-match-p" function (:arguments ("_tag")) nil [69244 69613])
            ("tag-any-match-p" function (:arguments ("_tag")) nil [69688 69810])
            ("tag-re-match-p" function (:arguments ("re")) nil [69872 70118])
            ("define-obsolete-variable-alias" code nil nil [70119 70209])
            ("defalias" code nil nil [70226 70263])
            ("make-obsolete" code nil nil [70264 70393])
            ("tags-next-file" function
               (:user-visible-flag t
                :arguments ("initialize" "novisit"))
                nil [70409 71202])
            ("tags--all-files" function nil nil [71204 72208])
            ("make-obsolete-variable" code nil nil [72210 72281])
            ("tags-loop-operate" variable nil nil [72282 72374])
            ("make-obsolete-variable" code nil nil [72376 72444])
            ("tags-loop-scan" variable (:default-value '(user-error "%s" (substitute-command-keys "No \\[tags-search] or \\[tags-query-replace] in progress"))) nil [72445 72772])
            ("tags-loop-eval" function (:arguments ("form")) nil [72774 73085])
            ("tags--compat-files" function (:arguments ("files")) nil [73087 73390])
            ("tags--compat-initialize" function (:arguments ("initialize")) nil [73392 73697])
            ("tags-loop-continue" function (:arguments ("first-time")) nil [73714 74487])
            ("tags--last-search-operate-function" variable nil nil [74550 74597])
            ("tags-search" function
               (:user-visible-flag t
                :arguments ("regexp" "files"))
                nil [74614 75663])
            ("tags-query-replace" function (:arguments ("from" "to" "delimited" "files")) nil [75680 76641])
            ("tags-complete-tags-table-file" function (:arguments ("string" "predicate" "what")) nil [76643 77528])
            ("tags--get-current-buffer-name-in-tags-file" function nil nil [77530 77846])
            ("list-tags" function
               (:user-visible-flag t
                :arguments ("file" "_next-match"))
                nil [77863 79143])
            ("tags-apropos" function (:arguments ("regexp")) nil [79160 80082])
            ("define-button-type" code nil nil [80111 80260])
            ("select-tags-table" function (:user-visible-flag t) nil [80350 82515])
            ("defvar-keymap" code nil nil [82517 82776])
            ("define-derived-mode" code nil nil [82778 82935])
            ("select-tags-table-select" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [82937 83301])
            ("select-tags-table-quit" function (:user-visible-flag t) nil [83303 83440])
            ("complete-tag" function (:user-visible-flag t) nil [83458 84147])
            ("etags--xref-limit" variable
               (:constant-flag t
                :default-value 1000)
                nil [84399 84432])
            ("etags-xref-find-definitions-tag-order" variable (:default-value '(tag-exact-match-p tag-implicit-name-match-p)) nil [84434 84786])
            ("etags-xref-prefer-current-file" variable nil nil [84788 84931])
            ("etags--xref-backend" function nil nil [84948 84985])
            ("cl-defmethod" code nil nil [84987 85082])
            ("cl-defmethod" code nil nil [85084 85253])
            ("cl-defmethod" code nil nil [85255 85442])
            ("cl-defmethod" code nil nil [85444 86194])
            ("cl-defmethod" code nil nil [86196 86416])
            ("etags--xref-find-definitions" function (:arguments ("pattern" "regexp?")) nil [86418 88074])
            ("etags--xref-apropos-additional" function (:arguments ("regexp")) nil [88076 89085])
            ("xref-etags-location" type
               (:members ("tag-info" "file")
                :type "struct")
                nil [89087 89240])
            ("cl-defmethod" code nil nil [89242 89333])
            ("cl-defmethod" code nil nil [89335 89692])
            ("cl-defmethod" code nil nil [89694 89835])
            ("xref-etags-apropos-location" type
               (:members ("symbol" "goto-fun" "group")
                :type "struct")
                nil [89837 90044])
            ("cl-defmethod" code nil nil [90046 90154])
            ("cl-defmethod" code nil nil [90156 90382])
            ("etags" package nil nil [90386 90402]))          
      :file "etags.el.gz"
      :pointmax 90427
      :fsize 23449
      :lastmodtime '(25621 32551 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-4692280a"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-generic" include nil nil [1015 1036])
            ("lisp-mode" include nil nil [1037 1057])
            ("cl-lib" include nil nil [1077 1094])
            ("subr-x" include nil nil [1115 1132])
            ("define-abbrev-table" code nil nil [1135 1315])
            ("emacs-lisp-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table lisp-data-mode-syntax-table))) table)) nil [1317 1597])
            ("defvar-keymap" code nil nil [1599 1970])
            ("easy-menu-define" code nil nil [1972 6432])
            ("elisp-context-menu" function (:arguments ("menu" "click")) nil [6434 7982])
            ("emacs-lisp-byte-compile" function (:user-visible-flag t) nil [7984 8220])
            ("emacs-lisp--before-compile-buffer" function nil nil [8222 8584])
            ("emacs-lisp-byte-compile-and-load" function (:user-visible-flag t) nil [8586 8903])
            ("declare-function" code nil nil [8905 8945])
            ("declare-function" code nil nil [8946 8996])
            ("emacs-lisp-native-compile-and-load" function (:user-visible-flag t) nil [8998 9579])
            ("emacs-lisp-macroexpand" function (:user-visible-flag t) nil [9581 10083])
            ("elisp-mode-syntax-propertize" function (:arguments ("start" "end")) nil [10085 10883])
            ("emacs-lisp-mode-hook" variable nil nil [10885 11063])
            ("emacs-lisp-set-electric-text-pairs" function nil nil [11065 11601])
            ("elisp-enable-lexical-binding" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [11603 12234])
            ("defvar-keymap" code nil nil [12236 12335])
            ("define-derived-mode" code nil nil [12352 14372])
            ("elisp--font-lock-flush-elisp-buffers" function (:arguments ("file")) nil [14400 15001])
            ("elisp--local-variables-1" function (:arguments ("vars" "sexp")) nil [15038 17232])
            ("warning-minimum-log-level" variable nil nil [17234 17268])
            ("elisp--local-variables" function nil nil [17270 18910])
            ("elisp--local-variables-completion-table" variable (:default-value (let ((lastpos nil) (lastvars nil)) (letrec ((hookfun (lambda nil (setq lastpos nil) (remove-hook 'post-command-hook hookfun)))) (completion-table-dynamic (lambda (_string) (save-excursion (skip-syntax-backward "_w") (let ((newpos (cons (point) (current-buffer)))) (unless (equal lastpos newpos) (add-hook 'post-command-hook hookfun) (setq lastpos newpos) (setq lastvars (mapcar #'symbol-name (elisp--local-variables)))))) lastvars))))) nil [18912 19885])
            ("elisp--expect-function-p" function (:arguments ("pos")) nil [19887 20586])
            ("elisp--form-quoted-p" function (:arguments ("pos")) nil [20588 21437])
            ("elisp--company-doc-buffer" function (:arguments ("str")) nil [22023 22750])
            ("elisp--company-doc-string" function (:arguments ("str")) nil [22752 23071])
            ("declare-function" code nil nil [23123 23181])
            ("declare-function" code nil nil [23182 23261])
            ("elisp--company-location" function (:arguments ("str")) nil [23263 23687])
            ("obarray-cache" variable nil nil [23689 23978])
            ("elisp--completion-local-symbols" function nil nil [23980 25576])
            ("elisp--shorthand-aware-fboundp" function (:arguments ("sym")) nil [25578 25666])
            ("elisp--shorthand-aware-boundp" function (:arguments ("sym")) nil [25668 25754])
            ("elisp-completion-at-point" function nil nil [25756 34659])
            ("elisp--company-kind" function (:arguments ("str")) nil [34661 34926])
            ("elisp--company-deprecated" function (:arguments ("str")) nil [34928 35082])
            ("lisp-completion-at-point" function (:arguments ("_predicate")) nil [35084 35225])
            ("declare-function" code nil nil [35245 35309])
            ("declare-function" code nil nil [35310 35371])
            ("elisp--xref-backend" function nil nil [35373 35410])
            ("elisp--xref-format" variable (:default-value nil) nil [35545 35669])
            ("elisp--xref-format-extra" variable (:default-value nil) nil [35804 35937])
            ("find-feature-regexp" variable nil nil [35939 35967])
            ("elisp--xref-make-xref" function (:arguments ("type" "symbol" "file" "summary")) nil [35987 36402])
            ("elisp-xref-find-def-functions" variable nil nil [36404 36731])
            ("elisp--xref-list-index" function nil nil [36733 37107])
            ("elisp--xref-infer-namespace" function (:arguments ("pos")) nil [37109 43105])
            ("cl-defmethod" code nil nil [43107 43480])
            ("cl-defmethod" code nil nil [43482 44116])
            ("elisp--xref-filter-definitions" function (:arguments ("definitions" "namespace" "symbol")) nil [44118 45479])
            ("elisp--xref-find-definitions" function (:arguments ("symbol")) nil [45481 52197])
            ("declare-function" code nil nil [52199 52254])
            ("cl-defmethod" code nil nil [52256 52555])
            ("elisp--xref-identifier-completion-table" variable (:default-value (apply-partially #'completion-table-with-predicate obarray (lambda (sym) (or (boundp sym) (fboundp sym) (featurep sym) (facep sym))) 'strict)) nil [52557 52902])
            ("cl-defmethod" code nil nil [52904 53084])
            ("xref-elisp-location" type
               (:members ("symbol" "type" "file")
                :type "struct")
                nil [53086 53264])
            ("cl-defmethod" code nil nil [53266 53682])
            ("cl-defmethod" code nil nil [53684 54025])
            ("elisp-load-path-roots" function nil nil [54027 54147])
            ("defvar-keymap" code nil nil [54177 54555])
            ("easy-menu-define" code nil nil [54557 55323])
            ("define-derived-mode" code nil nil [55325 55922])
            ("emacs-lisp-byte-code-comment-re" variable
               (:constant-flag t
                :default-value (concat "\\(#\\)@\\([0-9]+\\) " "\\(?:[^(]\\|([^\"]\\)"))
                nil [55975 56229])
            ("elisp--byte-code-comment" function (:arguments ("end" "_point")) nil [56232 57500])
            ("elisp-byte-code-syntax-propertize" function (:arguments ("start" "end")) nil [57502 57770])
            ("add-to-list" code nil nil [57787 57855])
            ("define-derived-mode" code nil nil [57871 58187])
            ("eval-print-last-sexp" function
               (:user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [58229 59034])
            ("last-sexp-setup-props" function (:arguments ("beg" "end" "value" "alt1" "alt2")) nil [59037 59829])
            ("elisp-last-sexp-toggle-display" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [59832 60612])
            ("prin1-char" function (:arguments ("char")) nil [60614 61782])
            ("elisp--preceding-sexp" function nil nil [61784 64021])
            ("define-obsolete-function-alias" code nil nil [64022 64100])
            ("elisp--eval-last-sexp" function (:arguments ("eval-last-sexp-arg-internal")) nil [64102 64975])
            ("elisp--eval-last-sexp-print-value" function (:arguments ("value" "output" "no-truncate" "char-print-limit")) nil [64977 65919])
            ("elisp--eval-last-sexp-fake-value" variable (:default-value (make-symbol "t")) nil [65922 65981])
            ("eval-sexp-add-defvars" function (:arguments ("exp" "pos")) nil [65983 66820])
            ("eval-last-sexp" function
               (:user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [66822 68258])
            ("elisp--eval-defun-1" function (:arguments ("form")) nil [68260 70176])
            ("elisp--eval-defun" function nil nil [70178 72787])
            ("eval-defun" function
               (:user-visible-flag t
                :arguments ("edebug-it"))
                nil [72789 74863])
            ("elisp--eldoc-last-data" variable (:default-value (make-vector 3 nil)) nil [74884 75216])
            ("elisp--documentation-one-liner" function nil nil [75218 75806])
            ("defalias" code nil nil [75808 76316])
            ("make-obsolete" code nil nil [76318 76425])
            ("elisp-eldoc-funcall" function (:arguments ("callback" "_ignored")) nil [76427 76947])
            ("elisp-eldoc-var-docstring" function (:arguments ("callback" "_ignored")) nil [76949 77402])
            ("elisp-eldoc-var-docstring-with-value" function (:arguments ("callback" "_")) nil [77404 78367])
            ("elisp-get-fnsym-args-string" function (:arguments ("sym" "index")) nil [78369 79600])
            ("elisp--highlight-function-argument" function (:arguments ("sym" "args" "index")) nil [79602 84838])
            ("elisp-get-var-docstring" function (:arguments ("sym")) nil [84931 85383])
            ("elisp--last-data-store" function (:arguments ("symbol" "doc" "type")) nil [85385 85557])
            ("elisp--docstring-first-line" function (:arguments ("doc")) nil [85668 86139])
            ("elisp--fnsym-in-current-sexp" function nil nil [86204 86557])
            ("elisp--beginning-of-sexp" function nil nil [86667 87218])
            ("elisp--current-symbol" function nil nil [87278 87436])
            ("elisp-function-argstring" function (:arguments ("arglist")) nil [87438 87900])
            ("checkdoc-create-error-function" variable nil nil [88102 88141])
            ("checkdoc-autofix-flag" variable nil nil [88142 88172])
            ("checkdoc-generate-compile-warnings-flag" variable nil nil [88173 88221])
            ("checkdoc-diagnostic-buffer" variable nil nil [88222 88257])
            ("elisp-flymake-checkdoc" function (:arguments ("report-fn" "_args")) nil [88274 89474])
            ("elisp-flymake--byte-compile-done" function (:arguments ("report-fn" "source-buffer" "output-buffer")) nil [89476 90750])
            ("defvar-local" code nil nil [90752 90870])
            ("elisp-flymake-byte-compile-load-path" variable (:default-value (list "./")) nil [90872 91116])
            ("put" code nil nil [91118 91379])
            ("elisp-flymake-byte-compile" function (:arguments ("report-fn" "_args")) nil [91396 93876])
            ("elisp-flymake--batch-compile-for-flymake" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [93878 94844])
            ("elisp-eval-region-or-buffer" function (:user-visible-flag t) nil [94846 95280])
            ("elisp-byte-compile-file" function
               (:user-visible-flag t
                :arguments ("load"))
                nil [95282 95715])
            ("elisp-byte-compile-buffer" function
               (:user-visible-flag t
                :arguments ("load"))
                nil [95717 97721])
            ("put" code nil nil [97725 97783])
            ("elisp-mode" package nil nil [97785 97806]))          
      :file "elisp-mode.el.gz"
      :pointmax 97835
      :fsize 25566
      :lastmodtime '(25770 30159 0 0)
      :unmatched-syntax '((close-paren 56229 . 56230) (symbol 55956 . 55972) (open-paren 55955 . 55956) (close-paren 1132 . 1133) (symbol 1097 . 1114) (open-paren 1096 . 1097) (close-paren 1094 . 1095) (symbol 1059 . 1076) (open-paren 1058 . 1059))))
  :file "!Applications!Emacs.app!Contents!Resources!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
